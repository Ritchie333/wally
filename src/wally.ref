[Game]
Game=Everyone's A Wally
TitleSuffix=Everyone's A Wally RAM disassembly
Copyright=(c) 1985 Mikro-Gen (code and graphics), 2013-2023 Ritchie Swann (this disassembly)

[Config]
HtmlWriterClass=wally.WallyHtmlWriter
RefFiles=wallygfx.ref;data.ref;sounds.ref

[Page:DataStructures]
SectionPrefix=DataStructures

[Page:Logic]
SectionPrefix=Logic

[Page:Rooms]
SectionPrefix=Rooms

[Page:Characters]
SectionPrefix=Characters

[Index:DataTables:Data tables and buffers]
GameStatusBuffer
DataStructures
Logic

[Index:Graphics:Graphics and Sounds]
Characters
Rooms
Sounds

[Links]
DataStructures=Data structures

[DataStructures:Room data]
The room data is defined as a series of entries in #R$CDB5.

Each entry contains the block ID to draw plus bit 7 used as the row's least significant bit.
The next byte contains the remainder of the row in bits 0 - 2 and the column in bits 3 - 7.
This allows to pack an ID plus two co-ordinates into two bytes, saving memory.

Each entry can also contain the following special values:
#TABLE( default, center )
{ =h Value | =h Description }
{ #N$7E , n | Block should only be drawn if flag 'n' is set. This is only used to
draw the wall in Wall Street if it has been built, otherwise show a pile of bricks. (#R$CEC9) }
{ #N$7F | End of data }
TABLE#

[DataStructures:Block data]
The block data is defined as a series of entries in #R$BD86. Each entry can contain the following.

#TABLE( default, center )
{ =h Value | =h Description }
{ #N$A8 - #N$EF , y | Move forward the value - #N$C8 columns, and by the number of rows in the next byte. }
{ #N$F0 , y, n | Draw the graphic 'n' and repeat for 'y' rows. }
{ #N$F1 | Move forward one column. }
{ #N$F2 , x, n | Draw the graphic 'n' and repeat for 'x' pairs of columns. }
{ #N$F3 , lo, hi | Jump to block data at the address specified. }
{ #N$FB , lo, hi | Use the address pointed to by the next two bytes for the UDG graphic data. }
{ #N$FD , x, n | Draw the graphic 'n' and repeat for 'x' pairs of columns. }
{ #N$FE , x | Change to attribute 'x'. }
{ #N$FF | End of data. }
TABLE#

[DataStructures:Object data]
Each room can have a number of objects that can be picked up. These are defined in a series of
buffers starting at #R$BCE9 and accessed via the routine at #R$AA8C.

Each object takes four bytes and has the following structure:

#TABLE( default, center )
{ =h Byte | =h Description }
{ 0 | Object ID }
{ 1 | X co-ordinate }
{ 2 | Y co-ordinate }
{ 3 | Flags for the item }
TABLE#

The flags in byte 3 determine if the item can be picked up.
Bits 0 - 5 are set if a character can pick it up (from bit 0 - Wally to bit 5 - Harry). So, #N$1F means "all characters".
It bit 7 is reset, a computer character can pick the item up.

The end of the table is denoted by the byte #N$FF. If the room has no objects in it, that is the only byte in the buffer.

[DataStructures:Movement tables]
Each moving object in a room, along with Herbert and the jumping jack (which can appear in any room),
is associated with two four-byte buffers. The first is fixed and contains the object bounds; the second
is dynamic and contains the current position and direction change. This is updated by calls to the
routine at #R$EF35.

The buffer containing bounds is fixed at:
#TABLE(default, center)
{ =h Byte | =h Description }
{ 0 | Minimum x co-ordinate }
{ 1 | Maximum x co-ordinate }
{ 2 | Minimum y co-ordinate }
{ 3 | Maximum y co-ordinate }
TABLE#

The buffer containing the positions varies over time and contains:
#TABLE(default, center)
{ =h Byte | =h Description }
{ 0 | Current x co-ordinate }
{ 1 | Current y co-ordinate }
{ 2 | Distance to move in x }
{ 3 | Distance to move in y }
TABLE#
The distances to move are stored as a 2s complement value.

When an object hits the minimum or maximum value, its distance to move is
inverted between positive and negative and it starts travelling back in the
other direction.

[DataStructures:Next rooms]
Each room has links to others in a table starting at #R$AC7F. The lookup is done at the routine in #R$AC69.

Each entry contains the following structure:

#TABLE( default, center )
{ =h Byte | =h Description }
{ 0 | ID of the next room. }
{ 1 | ID of co-ordinates that trigger this room. }
{ 2 | ID of co-ordinates to start in the new room. }
TABLE#

The co-ordinates are an index into a table starting at #R$AF10. Each entry contains an x and y co-ordinate.
The most common entries are 0 (x = 0, y = #N$98) and 1 (x = #N$F0, y = #N$98) which are the far left and
far right parts of the screen. So common entries are a,$01,$00,b,$00,$01.

A new room is automatically triggered when the player moves to the far-left or far-right of the screen,
or when the player presses the "in" key. However, if the current co-ordinate does match any valid tables,
nothing will happen.

The end of the table is denoted by the byte #N$FF.

[DataStructures:Above-floor platforms]
Some rooms allow players to walk elsewhere than the ground, to climb onto things.

These are defined in a table with offsets defined at #R$AF8F. Each entry contains three bytes
with the y co-ordinate, the leftmost co-ordinate and the rightmost. As you might expect, the
stairs in the sewer are the most complex definition.

The specific table used by each room is defined as a table in #R$AFA3. Most rooms use ID 0,
which has no additional platforms.

[DataStructures:Food]
Food is stored in a table at #R$F7E9. The structure is:

#TABLE(default, center)
{ =h Byte | =h Description }
{ 0 | ID of the room the food appears in }
{ 1 | X co-ordinate }
{ 2 | Y co-ordinate }
{ 3 | ID of the graphic for the food (#N$5B - #N$5F) }
TABLE#

The last entry holds #N$FF instead.

When an item of food is picked up, the game switches to the next entry in the table,
then cycles back round to the start.

Each character has a favourite food defined in #R$BC80. If they pick up this,
their endurance will be restored to the full value, otherwise other foods
just increment it slightly.

The favourite foods are:

#TABLE(default, center)
{ =h Character | =h Food }
{ Wally | Burger }
{ Wilma | Iced bun }
{ Tom | Fiz }
{ Dick | Bottle }
{ Harry | Pear }
TABLE#

[Logic:Introduction]
The game includes a simple compiled programming language, conceptually similar to
#HTML(<a href="https://en.wikipedia.org/wiki/AWK">AWK</a> ). Each entry includes a number of
patterns or clauses, that if all are true, invokes one or more actions.

The logic for each room is stored in various buffers starting at #R$E80F (for the Town Square).
These are accessed by the routine at #R$EABF. The routine starts by checking for patterns,
but switches to checking for actions taken if those patterns are all true with byte #N$F7.
A new pattern is then identified with byte #N$F6. Byte #N$FF signals the end of the logic.

Each room also contains a set of custom code that can be executed on entry. These are
stored in a table at #R$EEF3. If there is no custom action for the room, the table's
entry is #R$F2F6, which is a simple RET instruction.

[Logic:Patterns]
A pattern is identified by the byte sequence opcode,[operands]. The number of bytes used as
operands is dependent on the specific opcode.

The routines to handle each pattern is stored in a lookup table at #R$E7E9.

#TABLE( default, center )
{ =h Value | =h Instruction | =h Description }
{ 0 | AT_OBJ(n) | True if the player is standing next to the 'n'th object in the room. }
{ 1 | HAS(n) | True if the player is holding object 'n'. }
{ 2 | IS_SET(f) | True if the flag 'f' is set. }
{ 3 | IS_OBJ(n,i) | True if the 'n'th object in the room is 'i'. }
{ 4 | AT(x,y) | True if the player is standing at co-ordinates x,y. }
{ 5 | AM(n) | True if the player is using the character with this ID. }
{ 6 | NOT_HAS(n) | True if the player isn't holding object 'n'. }
{ 7 | NOT_OBJ(n,i) | True if the 'n'th object in the room isn't 'i'. }
TABLE#

The character IDs used in opcode 5 (AM(n)) are:
#TABLE( default, center )
{ =h Value | =h Character }
{ 01 | Wally }
{ 02 | Wilma }
{ 04 | Tom }
{ 08 | Dick }
{ #N$10 | Harry }
TABLE#

[Logic:Actions]
An action is identified by the byte sequence opcode,[operands]. The number of bytes used as
operands is dependent on the specific opcode.

The routines to handle each action is stored in a lookup table at #R$E7F9.

#TABLE( default, center )
{ =h Value | =h Instruction | =h Description }
{ 0 | SWAP | Swap the least-recently picked up item for the nearest one in the room. }
{ 1 | SWAPFOR( n ) | Swap object with ID 'n' that the player holds for the nearest one in the room.
Used when a combination of items held or near reacts to produce another one, such as swapping the
sand for the cement when holding a full bucket. }
{ 2 | SET( f ) | Set flag 'f'. }
{ 3 | RESET( f ) | Reset flag 'f'. }
{ 4 | SET(f, i) | Set the value 'x' to 'i'. }
{ 5 | EARN(i) | Earn the amount of money indexed. }
{ 6 | WALL | Build the wall. Only relevant in Wall Street. }
{ 7 | SPACE | Enter the asteroids game. Only relevant when standing near a phone booth. }
{ 8 | SAFE | Blow the safe, get the money and complete the game! Only used in the bank. }
{ 9 | CHASE | Open up the floor and drop the player down to the "chase the shark" room. 
Most often used when some task needs to be completed at a location, but the player has the
wrong character and items. }
{ A | OUT | Enter the "out of town" room. }
TABLE#

[Logic:Money]
The money earned by various tasks is defined in a table at #R$EC5C.
Each entry in the table contains three bytes:
#TABLE( default, center )
{ =h Byte | =h Character }
{ 0 | Set to 1 if the task earning the money is completed, or 0 if not }
{ 1 | Money low byte }
{ 2 | Money high byte }
TABLE#

Money is always given in multiples of £10.

The high byte is the hundreds part of the money. The low byte is the tens part of the money.

In both cases, only the top nybble is used (as a decimal digit can be represented as four bits).

Example : $00, $50, $01 = Entry 1, £150.

The maximum amount of money that can be earned is defined at #R$ECFC as £4,000.

Morning, lunch and tea breaks and the end of the game are reached when a certain amount
of money has been earned, defined in entries at #R$ECF6. These are:
#TABLE( default, center )
{ =h Byte | =h Character }
{ £600 | Morning tea break }
{ £1,300 | Lunch time }
{ £2,100 | Tea time }
{ £4,000 | End of game }
TABLE#

The index of the next index into the buffer is stored in #R$ECF5.

[Logic:Computer characters]
The computer characters run off a list defined at #R$AEEA, which contains a target room for
them to move to, where they will swap with the first item in the room. The list is terminated
by #N$FF.

Whenever a computer character has swapped with an item, it picks the next entry off the table
to decide where it's going to move to. As different characters swap at different times,
always taking the next room ID in the table, it looks pseudo-random to the end user.

The table at #R$AD78 explains how the computer character needs to move between the current
and the target room. Each entry contains a pair of bytes. The routine at #R$ADBA, called
when a character enters a new room, takes
the cumulative difference between the two pairs of bytes (in the next room and the
target room) and assigns it a "score". It compares it against a running "best score"
(initialised to #N$FF so the first entry will always return a better result), and picks
the room with the lowest score, which moves the character towards the intended room.

[Fact:Screen updates]
There are two copies of the screen, one with the background graphics (stored at #R$5B00) and one
with moving objects and characters overlaid (#R$6B00).

The background buffer is usually left untouched after entering a room (but it can occasionally
be changed, see the routine in #R$B82B), but the moving objects buffer is updated
continuously as objects move around the screen, by copying the background layer and overlaying
everything in its current position.

Although this seems slow and redundant, it's not slow enough to make the game unplayable,
and it does solve the requirement of having to write code
that invalidates a specific part of the screen. The routine that puts sprites in the buffer
at #R$A83D also uses the stack for copying data. This is a
#HTML(<a href="https://chuntey.wordpress.com/2013/10/02/how-to-write-zx-spectrum-games-chapter-13/">well-known trick</a>)
to make graphics updating faster.

[Fact:Colours]
The attributes for each playable character are stored in #R$BC85.

If you fancy drawing Wally in flashing cyan on mangenta, now you can!

[Fact:Miles out of town]
The "out of town" screen at #R$F177 uses a simple 16-bit word at #R$F15B to store the number of miles walked.
Therefore if you've walked 65,535 miles and walk one more, the counter will reset to 0 and you'll be able
to get back into town in a single move.

(Note that 65,535 miles is approximately twice round the circumerence of the Earth.)

[Fact:Shark]
The shark in the sewer is treated as two separate moving objects stacked on top of each other,
with the movement and bounds tables set up to be contiguous.

To see the shark appear to move while sawn in half, try POKE #N$F3A9 , 3

[Page:Pokes]
SectionType=ListItems

[Poke:Pokes]
Immunity
 #N$E343 , #N$C9

Stop computer players moving
 #N$A92C , #N$C9

[OtherCode:Loading system]
Source=wally_loader.skool
