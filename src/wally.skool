@start
@org=$4000

@expand=#DEF(#OBJECTGFX(a) #UDGARRAY2,6,2,2(($a);($a+1);($a+$10);($a+$11)))
@expand=#DEF(#OBJECTGFXM(a) #UDGARRAY4,6,2,4(($a);($a+1);($a+2);($a+3);($a+$20);($a+$21);($a+$22);($a+$23)))

; Loading screen
;
; #UDGTABLE
; { #SCR2(loading) }
; TABLE#
b$4000 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $4008 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $4010 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $4018 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $4020 DEFB $C0,$00,$00,$00,$00,$00,$00,$00
 $4028 DEFB $00,$00,$00,$00,$00,$00,$01,$F0
 $4030 DEFB $00,$00,$BF,$FC,$00,$00,$00,$00
 $4038 DEFB $00,$00,$00,$00,$00,$00,$00,$03
 $4040 DEFB $C0,$00,$00,$01,$F0,$FC,$00,$00
 $4048 DEFB $00,$00,$00,$00,$00,$00,$11,$F1
 $4050 DEFB $03,$00,$01,$D3,$77,$80,$00,$C2
 $4058 DEFB $01,$98,$0C,$00,$00,$00,$00,$03
 $4060 DEFB $C0,$00,$02,$00,$80,$00,$06,$96
 $4068 DEFB $24,$99,$24,$00,$44,$42,$40,$C1
 $4070 DEFB $38,$40,$E0,$07,$35,$58,$03,$A0
 $4078 DEFB $FD,$F7,$FA,$80,$00,$00,$00,$03
 $4080 DEFB $C0,$04,$22,$00,$09,$00,$00,$D1
 $4088 DEFB $5A,$8B,$25,$41,$3F,$E0,$3E,$00
 $4090 DEFB $80,$00,$00,$00,$00,$80,$25,$88
 $4098 DEFB $22,$02,$08,$10,$00,$00,$00,$03
 $40A0 DEFB $C0,$82,$00,$02,$04,$78,$22,$04
 $40A8 DEFB $40,$00,$04,$1E,$1C,$80,$6A,$80
 $40B0 DEFB $00,$0C,$90,$00,$00,$41,$82,$21
 $40B8 DEFB $C2,$3A,$11,$04,$00,$00,$00,$03
 $40C0 DEFB $C0,$40,$02,$11,$10,$00,$30,$88
 $40C8 DEFB $91,$02,$15,$88,$50,$C2,$00,$37
 $40D0 DEFB $E4,$57,$00,$02,$44,$00,$85,$00
 $40D8 DEFB $1E,$00,$2D,$10,$0E,$00,$00,$03
 $40E0 DEFB $C0,$40,$00,$84,$08,$00,$49,$48
 $40E8 DEFB $55,$31,$80,$2C,$90,$3C,$01,$C0
 $40F0 DEFB $00,$03,$00,$07,$80,$00,$52,$89
 $40F8 DEFB $22,$17,$8E,$44,$C6,$06,$60,$03
 $4100 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $4108 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $4110 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $4118 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $4120 DEFB $C0,$00,$00,$00,$00,$00,$00,$00
 $4128 DEFB $00,$00,$00,$00,$00,$00,$03,$C8
 $4130 DEFB $00,$02,$FF,$1F,$80,$00,$00,$00
 $4138 DEFB $00,$00,$00,$00,$00,$00,$00,$03
 $4140 DEFB $C0,$00,$00,$06,$5F,$87,$80,$00
 $4148 DEFB $00,$00,$00,$00,$00,$00,$E0,$0D
 $4150 DEFB $06,$00,$00,$AD,$DD,$C0,$00,$00
 $4158 DEFB $02,$48,$02,$00,$00,$00,$00,$03
 $4160 DEFB $C0,$00,$04,$00,$00,$00,$0A,$95
 $4168 DEFB $24,$91,$28,$00,$44,$A8,$81,$38
 $4170 DEFB $88,$40,$90,$03,$2D,$B8,$01,$7F
 $4178 DEFB $FF,$B7,$F7,$00,$00,$00,$00,$03
 $4180 DEFB $C0,$04,$40,$00,$01,$38,$18,$CA
 $4188 DEFB $00,$55,$48,$80,$D1,$14,$1F,$09
 $4190 DEFB $00,$00,$00,$00,$24,$0C,$13,$88
 $4198 DEFB $21,$22,$04,$50,$00,$00,$00,$03
 $41A0 DEFB $C0,$82,$20,$02,$08,$00,$12,$20
 $41A8 DEFB $00,$00,$02,$20,$A2,$40,$6C,$80
 $41B0 DEFB $00,$11,$08,$00,$00,$22,$04,$22
 $41B8 DEFB $64,$16,$09,$08,$00,$00,$00,$03
 $41C0 DEFB $C0,$44,$42,$10,$08,$00,$59,$08
 $41C8 DEFB $91,$04,$35,$01,$EF,$04,$22,$80
 $41D0 DEFB $04,$29,$C0,$00,$04,$00,$89,$10
 $41D8 DEFB $62,$00,$34,$89,$CF,$00,$00,$03
 $41E0 DEFB $C0,$20,$00,$90,$08,$10,$89,$24
 $41E8 DEFB $49,$28,$40,$12,$50,$42,$01,$67
 $41F0 DEFB $80,$00,$80,$05,$40,$00,$A4,$84
 $41F8 DEFB $01,$9E,$0C,$44,$06,$1C,$1C,$03
 $4200 DEFB $C0,$00,$00,$00,$00,$00,$00,$00
 $4208 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4210 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4218 DEFB $00,$00,$00,$00,$00,$00,$00,$03
 $4220 DEFB $C0,$00,$00,$00,$00,$00,$00,$00
 $4228 DEFB $00,$00,$00,$00,$00,$00,$07,$FC
 $4230 DEFB $00,$0F,$D0,$6D,$C0,$00,$00,$00
 $4238 DEFB $00,$00,$00,$00,$00,$00,$00,$03
 $4240 DEFB $C0,$00,$00,$08,$08,$00,$C0,$00
 $4248 DEFB $00,$80,$00,$00,$00,$03,$18,$01
 $4250 DEFB $0C,$20,$00,$B7,$BF,$40,$01,$09
 $4258 DEFB $19,$26,$01,$00,$00,$00,$00,$03
 $4260 DEFB $C0,$00,$04,$04,$00,$02,$09,$53
 $4268 DEFB $26,$92,$2A,$00,$DA,$01,$2A,$14
 $4270 DEFB $89,$42,$80,$00,$A0,$34,$01,$7F
 $4278 DEFB $FB,$E7,$FE,$00,$00,$00,$00,$03
 $4280 DEFB $C0,$08,$40,$10,$02,$42,$20,$A1
 $4288 DEFB $08,$12,$55,$20,$22,$98,$CF,$C2
 $4290 DEFB $00,$00,$00,$00,$00,$32,$13,$88
 $4298 DEFB $41,$22,$04,$50,$00,$00,$00,$03
 $42A0 DEFB $C0,$80,$20,$04,$10,$00,$0C,$20
 $42A8 DEFB $04,$00,$02,$29,$81,$18,$21,$00
 $42B0 DEFB $80,$26,$24,$20,$00,$0C,$48,$42
 $42B8 DEFB $34,$09,$09,$08,$00,$00,$00,$03
 $42C0 DEFB $C0,$44,$40,$08,$08,$03,$B1,$0A
 $42C8 DEFB $94,$0C,$57,$0A,$80,$00,$88,$F0
 $42D0 DEFB $02,$36,$00,$00,$08,$00,$49,$10
 $42D8 DEFB $41,$02,$76,$49,$27,$00,$00,$03
 $42E0 DEFB $C0,$20,$00,$10,$10,$0E,$11,$22
 $42E8 DEFB $22,$04,$19,$93,$70,$82,$01,$7A
 $42F0 DEFB $40,$00,$60,$05,$40,$00,$A4,$44
 $42F8 DEFB $04,$6E,$18,$84,$00,$18,$92,$03
 $4300 DEFB $C0,$00,$00,$00,$00,$00,$00,$00
 $4308 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4310 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4318 DEFB $00,$00,$00,$00,$00,$00,$00,$03
 $4320 DEFB $C0,$00,$00,$00,$00,$00,$00,$00
 $4328 DEFB $00,$00,$00,$00,$00,$00,$04,$7C
 $4330 DEFB $00,$3B,$81,$FD,$70,$00,$00,$00
 $4338 DEFB $00,$00,$00,$00,$00,$00,$00,$03
 $4340 DEFB $C0,$00,$00,$10,$00,$00,$70,$00
 $4348 DEFB $88,$88,$00,$00,$00,$7C,$07,$81
 $4350 DEFB $10,$96,$00,$DB,$FF,$60,$02,$12
 $4358 DEFB $24,$A2,$21,$00,$00,$00,$00,$03
 $4360 DEFB $C0,$00,$08,$00,$00,$01,$0D,$4A
 $4368 DEFB $94,$12,$54,$01,$60,$00,$44,$22
 $4370 DEFB $49,$C3,$80,$00,$2A,$5A,$82,$FF
 $4378 DEFB $C8,$10,$FF,$80,$00,$00,$00,$03
 $4380 DEFB $C0,$08,$80,$01,$02,$8E,$3C,$C0
 $4388 DEFB $01,$24,$92,$88,$2A,$50,$4F,$E4
 $4390 DEFB $00,$07,$00,$00,$00,$01,$13,$08
 $4398 DEFB $5F,$3E,$02,$08,$00,$00,$00,$03
 $43A0 DEFB $C0,$40,$40,$04,$20,$00,$02,$20
 $43A8 DEFB $00,$00,$01,$2C,$F1,$04,$21,$04
 $43B0 DEFB $00,$20,$13,$C0,$00,$70,$48,$44
 $43B8 DEFB $34,$08,$88,$88,$00,$00,$00,$03
 $43C0 DEFB $C0,$80,$01,$08,$08,$01,$51,$10
 $43C8 DEFB $9C,$02,$66,$05,$63,$80,$20,$E0
 $43D0 DEFB $01,$28,$00,$00,$08,$00,$49,$10
 $43D8 DEFB $80,$C0,$6A,$04,$AE,$70,$00,$03
 $43E0 DEFB $C0,$10,$00,$10,$12,$50,$12,$21
 $43E8 DEFB $9C,$04,$26,$0A,$0F,$02,$02,$41
 $43F0 DEFB $20,$00,$10,$05,$78,$01,$24,$42
 $43F8 DEFB $03,$04,$35,$48,$00,$1B,$2B,$03
 $4400 DEFB $C0,$00,$00,$00,$00,$00,$00,$00
 $4408 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4410 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4418 DEFB $00,$00,$00,$00,$00,$00,$00,$03
 $4420 DEFB $C0,$00,$00,$00,$00,$00,$00,$00
 $4428 DEFB $00,$00,$00,$00,$00,$00,$07,$F4
 $4430 DEFB $00,$40,$1D,$25,$6C,$00,$00,$00
 $4438 DEFB $00,$0E,$00,$00,$00,$00,$00,$03
 $4440 DEFB $C0,$00,$00,$60,$00,$A0,$38,$0C
 $4448 DEFB $88,$08,$00,$00,$07,$83,$00,$79
 $4450 DEFB $1D,$09,$80,$D3,$D5,$A0,$02,$22
 $4458 DEFB $4E,$00,$10,$80,$00,$00,$00,$03
 $4460 DEFB $C0,$00,$18,$40,$01,$81,$0D,$4A
 $4468 DEFB $94,$92,$64,$01,$00,$00,$02,$43
 $4470 DEFB $25,$C3,$80,$00,$00,$1F,$1E,$E7
 $4478 DEFB $90,$08,$00,$40,$00,$00,$00,$03
 $4480 DEFB $C0,$10,$80,$01,$02,$3A,$48,$42
 $4488 DEFB $20,$01,$A5,$00,$2A,$60,$FC,$58
 $4490 DEFB $00,$08,$80,$00,$00,$61,$12,$01
 $4498 DEFB $72,$24,$02,$08,$00,$00,$00,$03
 $44A0 DEFB $C0,$40,$40,$04,$20,$00,$82,$12
 $44A8 DEFB $00,$00,$01,$23,$82,$02,$0D,$00
 $44B0 DEFB $00,$40,$10,$00,$04,$40,$88,$84
 $44B8 DEFB $44,$08,$48,$08,$00,$00,$00,$03
 $44C0 DEFB $C0,$88,$81,$08,$04,$00,$E2,$24
 $44C8 DEFB $40,$01,$C6,$0E,$3C,$01,$01,$D0
 $44D0 DEFB $01,$02,$00,$00,$10,$00,$51,$50
 $44D8 DEFB $80,$3F,$CA,$04,$77,$9C,$00,$03
 $44E0 DEFB $C0,$18,$41,$08,$20,$09,$24,$40
 $44E8 DEFB $40,$03,$E9,$0B,$00,$02,$04,$51
 $44F0 DEFB $18,$00,$1C,$0B,$7C,$01,$2A,$21
 $44F8 DEFB $00,$FC,$36,$48,$01,$98,$44,$83
 $4500 DEFB $C0,$00,$00,$00,$00,$00,$00,$00
 $4508 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4510 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4518 DEFB $00,$00,$00,$00,$00,$00,$00,$03
 $4520 DEFB $C0,$00,$00,$00,$00,$00,$00,$00
 $4528 DEFB $00,$00,$00,$00,$00,$00,$03,$F8
 $4530 DEFB $00,$40,$54,$DF,$FC,$00,$00,$00
 $4538 DEFB $00,$31,$80,$00,$00,$00,$00,$03
 $4540 DEFB $C0,$00,$00,$80,$00,$08,$19,$2C
 $4548 DEFB $4A,$89,$00,$00,$18,$10,$E0,$06
 $4550 DEFB $27,$3E,$00,$37,$FD,$B0,$04,$22
 $4558 DEFB $4E,$00,$14,$80,$00,$00,$00,$03
 $4560 DEFB $C0,$00,$60,$01,$00,$08,$12,$AA
 $4568 DEFB $92,$A4,$A8,$C1,$00,$00,$01,$24
 $4570 DEFB $A7,$CC,$80,$00,$08,$90,$3F,$C1
 $4578 DEFB $10,$08,$02,$40,$00,$00,$00,$03
 $4580 DEFB $C0,$30,$80,$81,$02,$44,$68,$40
 $4588 DEFB $84,$00,$4E,$00,$13,$02,$FB,$22
 $4590 DEFB $00,$00,$40,$00,$00,$11,$24,$09
 $4598 DEFB $3A,$34,$00,$04,$00,$00,$00,$03
 $45A0 DEFB $C0,$20,$80,$08,$60,$01,$04,$10
 $45A8 DEFB $1C,$01,$20,$9C,$48,$01,$49,$00
 $45B0 DEFB $00,$80,$08,$00,$04,$40,$8A,$84
 $45B8 DEFB $42,$10,$70,$08,$00,$00,$00,$03
 $45C0 DEFB $C0,$88,$80,$04,$04,$00,$12,$51
 $45C8 DEFB $4C,$00,$03,$0C,$20,$00,$01,$80
 $45D0 DEFB $00,$AC,$20,$00,$E0,$00,$30,$48
 $45D8 DEFB $80,$08,$CB,$54,$57,$06,$00,$03
 $45E0 DEFB $C0,$24,$41,$08,$20,$09,$20,$40
 $45E8 DEFB $10,$00,$A8,$F2,$00,$04,$08,$52
 $45F0 DEFB $24,$00,$2E,$0B,$7C,$01,$29,$81
 $45F8 DEFB $00,$18,$2A,$88,$0E,$5C,$44,$83
 $4600 DEFB $C0,$00,$00,$00,$00,$00,$00,$00
 $4608 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4610 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4618 DEFB $00,$00,$00,$00,$00,$00,$00,$03
 $4620 DEFB $C0,$00,$00,$00,$00,$00,$00,$00
 $4628 DEFB $00,$00,$00,$00,$00,$00,$0C,$04
 $4630 DEFB $00,$80,$17,$6D,$77,$00,$00,$00
 $4638 DEFB $18,$81,$40,$00,$00,$00,$00,$03
 $4640 DEFB $C0,$00,$01,$00,$00,$00,$0D,$26
 $4648 DEFB $48,$89,$50,$00,$22,$52,$1C,$01
 $4650 DEFB $34,$C7,$00,$1E,$BA,$F0,$04,$11
 $4658 DEFB $24,$00,$14,$40,$00,$00,$00,$03
 $4660 DEFB $C0,$01,$80,$82,$08,$62,$A1,$A9
 $4668 DEFB $4A,$A4,$D5,$01,$00,$03,$40,$08
 $4670 DEFB $6C,$F3,$40,$00,$00,$1F,$1D,$80
 $4678 DEFB $24,$04,$21,$20,$00,$00,$00,$03
 $4680 DEFB $C0,$41,$00,$01,$05,$E4,$70,$40
 $4688 DEFB $00,$44,$34,$00,$78,$44,$F4,$40
 $4690 DEFB $00,$00,$40,$00,$00,$12,$20,$11
 $4698 DEFB $3C,$1C,$02,$04,$00,$00,$00,$03
 $46A0 DEFB $C0,$20,$80,$08,$90,$01,$20,$90
 $46A8 DEFB $22,$00,$C2,$80,$48,$11,$08,$80
 $46B0 DEFB $03,$40,$04,$00,$43,$80,$82,$84
 $46B8 DEFB $41,$E0,$38,$10,$00,$00,$00,$03
 $46C0 DEFB $C0,$48,$80,$84,$04,$00,$20,$50
 $46C8 DEFB $2A,$51,$C0,$80,$44,$01,$82,$40
 $46D0 DEFB $00,$70,$C0,$07,$00,$00,$11,$48
 $46D8 DEFB $98,$09,$8B,$14,$AF,$83,$00,$03
 $46E0 DEFB $C0,$20,$21,$00,$20,$05,$20,$40
 $46E8 DEFB $0C,$00,$E6,$0C,$00,$1C,$30,$A4
 $46F0 DEFB $02,$00,$5A,$17,$7F,$01,$29,$60
 $46F8 DEFB $C0,$38,$E5,$88,$30,$2C,$82,$83
 $4700 DEFB $C0,$00,$00,$00,$00,$00,$00,$00
 $4708 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4710 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $4718 DEFB $00,$00,$00,$00,$00,$00,$00,$03
 $4720 DEFB $C0,$00,$00,$00,$00,$00,$00,$00
 $4728 DEFB $00,$00,$00,$00,$00,$00,$1E,$02
 $4730 DEFB $00,$80,$07,$DE,$BB,$00,$00,$3C
 $4738 DEFB $E6,$80,$30,$00,$00,$00,$00,$03
 $4740 DEFB $C0,$00,$02,$00,$30,$00,$04,$96
 $4748 DEFB $44,$11,$10,$00,$24,$12,$23,$01
 $4750 DEFB $28,$41,$80,$02,$EF,$78,$02,$F3
 $4758 DEFB $18,$4D,$68,$40,$00,$00,$00,$03
 $4760 DEFB $C0,$02,$01,$00,$00,$80,$21,$64
 $4768 DEFB $4A,$C9,$92,$31,$00,$3C,$38,$10
 $4770 DEFB $20,$40,$30,$00,$0A,$60,$C5,$80
 $4778 DEFB $22,$02,$10,$A0,$00,$00,$00,$03
 $4780 DEFB $C0,$82,$01,$02,$04,$A4,$22,$40
 $4788 DEFB $00,$00,$0C,$01,$80,$80,$E9,$40
 $4790 DEFB $00,$00,$90,$00,$00,$20,$41,$11
 $4798 DEFB $01,$E1,$E0,$04,$00,$00,$00,$03
 $47A0 DEFB $C0,$44,$80,$10,$90,$00,$04,$88
 $47A8 DEFB $49,$01,$2A,$84,$44,$21,$26,$48
 $47B0 DEFB $1C,$7C,$00,$00,$02,$00,$85,$08
 $47B8 DEFB $20,$00,$29,$10,$0C,$00,$00,$03
 $47C0 DEFB $C0,$48,$40,$84,$04,$00,$28,$4A
 $47C8 DEFB $59,$22,$10,$40,$88,$06,$02,$00
 $47D0 DEFB $00,$0F,$00,$06,$00,$00,$52,$89
 $47D8 DEFB $24,$11,$8A,$54,$A7,$83,$00,$03
 $47E0 DEFB $C0,$20,$21,$01,$20,$04,$00,$8C
 $47E8 DEFB $07,$00,$41,$F1,$00,$62,$60,$A0
 $47F0 DEFB $0D,$80,$B2,$2B,$77,$82,$28,$98
 $47F8 DEFB $B8,$E8,$E5,$10,$43,$EC,$01,$83
 $4800 DEFB $C0,$40,$20,$81,$30,$04,$41,$09
 $4808 DEFB $35,$C1,$80,$81,$00,$EE,$71,$00
 $4810 DEFB $30,$41,$6A,$5B,$57,$82,$08,$64
 $4818 DEFB $81,$A8,$CD,$10,$98,$2D,$01,$83
 $4820 DEFB $C0,$80,$04,$02,$40,$00,$44,$FF
 $4828 DEFB $BF,$BF,$F6,$7E,$02,$92,$21,$FF
 $4830 DEFB $FF,$9F,$D2,$67,$FD,$F3,$B1,$2A
 $4838 DEFB $62,$32,$04,$60,$00,$46,$88,$03
 $4840 DEFB $C0,$04,$10,$00,$00,$00,$00,$67
 $4848 DEFB $77,$DF,$FD,$FE,$04,$8C,$70,$00
 $4850 DEFB $FF,$FA,$25,$01,$F0,$EF,$B8,$00
 $4858 DEFB $81,$E3,$00,$88,$48,$02,$F0,$03
 $4860 DEFB $C0,$00,$10,$04,$40,$00,$10,$E0
 $4868 DEFB $BA,$5F,$FD,$40,$22,$40,$20,$04
 $4870 DEFB $1D,$9E,$02,$8D,$7E,$E3,$FC,$40
 $4878 DEFB $28,$3B,$20,$41,$4D,$70,$80,$03
 $4880 DEFB $C0,$00,$08,$08,$00,$00,$27,$83
 $4888 DEFB $F7,$80,$07,$E1,$00,$00,$02,$41
 $4890 DEFB $99,$D4,$DD,$80,$FB,$FF,$DE,$06
 $4898 DEFB $18,$C0,$00,$23,$0A,$A0,$00,$03
 $48A0 DEFB $C0,$00,$00,$FF,$87,$FC,$FA,$3F
 $48A8 DEFB $2F,$7E,$38,$00,$D7,$E7,$FF,$FD
 $48B0 DEFB $44,$2F,$F4,$80,$3F,$FF,$CD,$A7
 $48B8 DEFB $83,$9F,$F5,$38,$00,$00,$00,$03
 $48C0 DEFB $C0,$00,$00,$7F,$83,$8F,$9C,$02
 $48C8 DEFB $B8,$9D,$00,$00,$18,$78,$00,$00
 $48D0 DEFB $00,$09,$98,$06,$7E,$7F,$BC,$01
 $48D8 DEFB $8F,$FB,$E7,$00,$00,$00,$00,$03
 $48E0 DEFB $C0,$00,$00,$1D,$FC,$3F,$28,$07
 $48E8 DEFB $05,$4E,$40,$00,$00,$20,$00,$00
 $48F0 DEFB $00,$01,$03,$FF,$F3,$F8,$00,$1B
 $48F8 DEFB $C1,$F6,$06,$80,$00,$00,$00,$03
 $4900 DEFB $C0,$40,$00,$81,$08,$04,$42,$16
 $4908 DEFB $FF,$75,$03,$12,$01,$FE,$F1,$00
 $4910 DEFB $C1,$A2,$E9,$5D,$5B,$F2,$09,$14
 $4918 DEFB $81,$D8,$CE,$20,$80,$1D,$01,$83
 $4920 DEFB $C0,$80,$08,$01,$50,$00,$29,$FD
 $4928 DEFB $BF,$80,$01,$7E,$02,$53,$A3,$BF
 $4930 DEFB $FF,$9F,$DF,$03,$F9,$F3,$1A,$29
 $4938 DEFB $72,$31,$04,$00,$00,$27,$CC,$03
 $4940 DEFB $C0,$02,$10,$00,$00,$00,$00,$7F
 $4948 DEFB $F7,$C0,$01,$FE,$04,$4D,$02,$10
 $4950 DEFB $06,$71,$9D,$00,$FB,$FF,$B8,$28
 $4958 DEFB $82,$30,$80,$80,$08,$1D,$00,$03
 $4960 DEFB $C0,$00,$10,$04,$00,$00,$0F,$F0
 $4968 DEFB $FB,$C0,$01,$C0,$22,$00,$02,$04
 $4970 DEFB $19,$A8,$02,$86,$7E,$FC,$ED,$80
 $4978 DEFB $24,$79,$C0,$20,$0A,$B0,$80,$03
 $4980 DEFB $C0,$00,$08,$04,$00,$1C,$27,$81
 $4988 DEFB $F5,$00,$01,$E1,$00,$00,$00,$83
 $4990 DEFB $92,$F5,$67,$63,$7B,$FF,$FE,$08
 $4998 DEFB $08,$60,$00,$20,$E5,$40,$00,$03
 $49A0 DEFB $C0,$00,$00,$22,$FF,$FF,$FA,$1F
 $49A8 DEFB $2F,$DD,$F8,$00,$52,$3F,$FF,$FD
 $49B0 DEFB $48,$2B,$29,$00,$3F,$FF,$CD,$B1
 $49B8 DEFB $33,$9F,$F2,$C0,$00,$00,$00,$03
 $49C0 DEFB $C0,$00,$00,$7F,$C1,$C0,$94,$03
 $49C8 DEFB $0E,$8E,$80,$00,$0C,$70,$00,$00
 $49D0 DEFB $00,$08,$14,$06,$7E,$7F,$FA,$03
 $49D8 DEFB $0F,$F7,$85,$00,$00,$00,$00,$03
 $49E0 DEFB $C0,$00,$00,$1E,$FE,$1F,$28,$07
 $49E8 DEFB $3F,$D1,$40,$00,$00,$20,$00,$00
 $49F0 DEFB $00,$01,$7F,$FF,$F3,$F8,$00,$17
 $49F8 DEFB $C2,$F6,$04,$80,$00,$00,$00,$03
 $4A00 DEFB $C0,$40,$40,$40,$84,$02,$42,$1A
 $4A08 DEFB $FD,$D5,$61,$22,$01,$DE,$CA,$07
 $4A10 DEFB $00,$22,$A9,$5D,$B3,$C9,$09,$08
 $4A18 DEFB $41,$D4,$D2,$20,$A0,$0A,$01,$83
 $4A20 DEFB $C0,$80,$08,$00,$E0,$00,$10,$BE
 $4A28 DEFB $DF,$FF,$FB,$FE,$02,$54,$03,$7F
 $4A30 DEFB $FF,$3F,$88,$E1,$F3,$E6,$1C,$19
 $4A38 DEFB $5C,$34,$02,$00,$00,$63,$94,$03
 $4A40 DEFB $C0,$01,$D0,$00,$00,$00,$00,$3F
 $4A48 DEFB $94,$DF,$FD,$FE,$08,$46,$04,$10
 $4A50 DEFB $04,$EC,$01,$C0,$BF,$9F,$78,$30
 $4A58 DEFB $84,$30,$40,$80,$88,$E1,$00,$03
 $4A60 DEFB $C0,$00,$08,$04,$10,$20,$07,$F0
 $4A68 DEFB $FB,$BF,$FD,$C0,$42,$00,$02,$08
 $4A70 DEFB $33,$2B,$F0,$0A,$BF,$7F,$78,$C0
 $4A78 DEFB $24,$CC,$C0,$20,$8D,$50,$80,$03
 $4A80 DEFB $C0,$00,$08,$02,$00,$22,$C1,$10
 $4A88 DEFB $3E,$00,$81,$62,$21,$00,$50,$83
 $4A90 DEFB $B2,$D7,$6D,$5C,$3D,$FF,$BF,$08
 $4A98 DEFB $04,$20,$3F,$20,$1B,$80,$00,$03
 $4AA0 DEFB $C0,$00,$00,$7F,$3F,$FF,$FA,$0F
 $4AA8 DEFB $FF,$E3,$F0,$00,$3F,$FF,$4F,$FE
 $4AB0 DEFB $88,$52,$D6,$29,$BF,$FF,$9B,$9E
 $4AB8 DEFB $33,$BB,$FE,$C0,$00,$00,$00,$03
 $4AC0 DEFB $C0,$00,$00,$7F,$C0,$F0,$54,$02
 $4AC8 DEFB $1F,$9F,$80,$00,$07,$E0,$00,$00
 $4AD0 DEFB $00,$04,$14,$06,$FF,$FF,$F1,$03
 $4AD8 DEFB $0F,$F5,$05,$00,$00,$00,$00,$03
 $4AE0 DEFB $C0,$00,$00,$1F,$FC,$1F,$38,$07
 $4AE8 DEFB $C7,$D1,$40,$00,$00,$A0,$00,$00
 $4AF0 DEFB $00,$01,$7F,$7F,$E7,$F0,$00,$3E
 $4AF8 DEFB $41,$3F,$00,$80,$00,$00,$00,$03
 $4B00 DEFB $C0,$40,$00,$20,$84,$01,$42,$3F
 $4B08 DEFB $D4,$3E,$70,$C4,$01,$9E,$48,$18
 $4B10 DEFB $60,$0E,$B9,$5E,$B3,$CC,$09,$48
 $4B18 DEFB $61,$1F,$CA,$A0,$A0,$0F,$02,$03
 $4B20 DEFB $C0,$82,$08,$00,$00,$00,$0B,$CF
 $4B28 DEFB $59,$80,$03,$FE,$04,$34,$27,$BF
 $4B30 DEFB $FF,$3F,$1E,$11,$FF,$7C,$FC,$09
 $4B38 DEFB $0F,$E2,$02,$00,$00,$A2,$14,$03
 $4B40 DEFB $C0,$00,$20,$00,$00,$00,$00,$3F
 $4B48 DEFB $57,$C0,$01,$FE,$08,$44,$04,$20
 $4B50 DEFB $85,$E1,$D6,$23,$FF,$5E,$FC,$28
 $4B58 DEFB $44,$30,$40,$40,$0B,$41,$00,$03
 $4B60 DEFB $C0,$00,$08,$04,$02,$00,$07,$F0
 $4B68 DEFB $FB,$80,$01,$C0,$44,$00,$04,$08
 $4B70 DEFB $66,$27,$FC,$31,$5F,$DF,$BC,$20
 $4B78 DEFB $23,$8C,$80,$20,$0A,$B1,$80,$03
 $4B80 DEFB $C0,$00,$08,$04,$80,$2B,$61,$08
 $4B88 DEFB $1E,$01,$C1,$02,$20,$7A,$00,$03
 $4B90 DEFB $E4,$ED,$57,$40,$3E,$FF,$73,$08
 $4B98 DEFB $04,$37,$C2,$80,$00,$00,$00,$03
 $4BA0 DEFB $C0,$00,$00,$7F,$1E,$FF,$FE,$07
 $4BA8 DEFB $FF,$E3,$F0,$00,$33,$E7,$1E,$00
 $4BB0 DEFB $7C,$4C,$08,$1E,$3F,$FF,$3B,$C9
 $4BB8 DEFB $63,$FB,$FB,$80,$00,$00,$00,$03
 $4BC0 DEFB $C0,$00,$00,$7B,$E0,$FF,$9C,$01
 $4BC8 DEFB $1F,$BF,$80,$00,$03,$E0,$00,$00
 $4BD0 DEFB $00,$06,$14,$07,$FE,$FF,$E1,$00
 $4BD8 DEFB $1F,$E9,$05,$00,$00,$00,$00,$03
 $4BE0 DEFB $C0,$00,$00,$1F,$FE,$1F,$90,$03
 $4BE8 DEFB $FF,$D0,$E0,$00,$00,$58,$40,$00
 $4BF0 DEFB $00,$01,$BF,$7E,$E7,$E0,$00,$2F
 $4BF8 DEFB $C1,$BB,$00,$80,$00,$00,$00,$03
 $4C00 DEFB $C0,$20,$40,$D0,$86,$01,$01,$3F
 $4C08 DEFB $7F,$C0,$7C,$46,$01,$18,$26,$60
 $4C10 DEFB $03,$FD,$D9,$BE,$B3,$F4,$09,$88
 $4C18 DEFB $91,$1E,$9C,$C0,$60,$04,$80,$03
 $4C20 DEFB $C0,$42,$08,$00,$00,$00,$07,$FE
 $4C28 DEFB $5F,$BF,$FB,$FE,$04,$33,$27,$F7
 $4C30 DEFB $6E,$7C,$91,$80,$FF,$39,$FC,$01
 $4C38 DEFB $33,$C6,$01,$00,$07,$33,$E8,$03
 $4C40 DEFB $C0,$00,$10,$00,$00,$00,$00,$3E
 $4C48 DEFB $F7,$DF,$FD,$FE,$08,$40,$08,$21
 $4C50 DEFB $0D,$E3,$8C,$1F,$EE,$DE,$FC,$20
 $4C58 DEFB $48,$30,$20,$41,$4D,$A0,$80,$03
 $4C60 DEFB $C0,$00,$08,$04,$00,$00,$07,$78
 $4C68 DEFB $9B,$BF,$FD,$C0,$44,$00,$18,$10
 $4C70 DEFB $4E,$1F,$FE,$C1,$5F,$DF,$FC,$3E
 $4C78 DEFB $11,$CF,$00,$21,$4D,$71,$40,$03
 $4C80 DEFB $C0,$00,$04,$0E,$F8,$2D,$D1,$00
 $4C88 DEFB $1F,$00,$82,$02,$20,$00,$00,$03
 $4C90 DEFB $F0,$E7,$5D,$48,$2E,$FC,$F3,$0C
 $4C98 DEFB $06,$10,$01,$70,$00,$00,$00,$03
 $4CA0 DEFB $C0,$00,$00,$7F,$0F,$3F,$FA,$07
 $4CA8 DEFB $FB,$FF,$D0,$00,$26,$58,$F0,$00
 $4CB0 DEFB $03,$53,$F0,$18,$3F,$FF,$FB,$B0
 $4CB8 DEFB $63,$FB,$FA,$80,$00,$00,$00,$03
 $4CC0 DEFB $C0,$00,$00,$3B,$E0,$F0,$98,$01
 $4CC8 DEFB $3F,$3F,$80,$00,$03,$C0,$00,$00
 $4CD0 DEFB $00,$02,$14,$17,$FC,$FF,$C1,$00
 $4CD8 DEFB $1F,$E9,$05,$00,$00,$00,$00,$03
 $4CE0 DEFB $C0,$00,$00,$2F,$FF,$3F,$F0,$03
 $4CE8 DEFB $9F,$7F,$B0,$00,$00,$24,$28,$00
 $4CF0 DEFB $00,$01,$BB,$7E,$D7,$E0,$00,$37
 $4CF8 DEFB $C1,$3F,$00,$00,$00,$00,$00,$03
 $4D00 DEFB $C0,$20,$01,$09,$0A,$01,$01,$7E
 $4D08 DEFB $FE,$30,$9E,$7A,$02,$13,$E1,$01
 $4D10 DEFB $FF,$95,$D9,$7D,$B2,$E7,$88,$93
 $4D18 DEFB $0E,$19,$C1,$40,$30,$36,$40,$03
 $4D20 DEFB $C0,$22,$10,$00,$00,$00,$03,$9F
 $4D28 DEFB $AF,$C0,$01,$FE,$04,$39,$83,$8F
 $4D30 DEFB $FE,$78,$10,$00,$FE,$3F,$F8,$81
 $4D38 DEFB $26,$A0,$01,$00,$1A,$12,$18,$03
 $4D40 DEFB $C0,$00,$10,$00,$80,$00,$00,$3D
 $4D48 DEFB $B7,$C0,$01,$BE,$12,$40,$C8,$21
 $4D50 DEFB $0B,$C7,$0A,$BD,$F5,$BE,$F4,$20
 $4D58 DEFB $48,$18,$20,$40,$0A,$A0,$80,$03
 $4D60 DEFB $C0,$00,$08,$04,$00,$00,$0D,$3C
 $4D68 DEFB $E3,$80,$01,$C0,$84,$00,$E0,$20
 $4D70 DEFB $CC,$3A,$6D,$10,$AF,$EF,$FC,$41
 $4D78 DEFB $F0,$7C,$00,$20,$0A,$B1,$40,$03
 $4D80 DEFB $C0,$00,$04,$1C,$FB,$CD,$98,$82
 $4D88 DEFB $4F,$00,$82,$02,$19,$00,$00,$03
 $4D90 DEFB $CE,$8D,$73,$48,$BF,$F3,$E7,$22
 $4D98 DEFB $07,$18,$06,$88,$00,$00,$00,$03
 $4DA0 DEFB $C0,$00,$00,$7F,$07,$CF,$CA,$03
 $4DA8 DEFB $C5,$E3,$E0,$00,$33,$F3,$C0,$00
 $4DB0 DEFB $00,$D0,$10,$0C,$3E,$FF,$F7,$02
 $4DB8 DEFB $C3,$FB,$FA,$80,$00,$00,$00,$03
 $4DC0 DEFB $C0,$00,$00,$3B,$E0,$7F,$98,$01
 $4DC8 DEFB $CE,$3F,$80,$00,$01,$C0,$00,$00
 $4DD0 DEFB $00,$02,$C4,$CF,$FF,$FF,$80,$80
 $4DD8 DEFB $3F,$DE,$05,$00,$00,$00,$00,$03
 $4DE0 DEFB $C0,$00,$00,$23,$FF,$FF,$F0,$01
 $4DE8 DEFB $0E,$7F,$F0,$00,$00,$22,$14,$00
 $4DF0 DEFB $60,$01,$BB,$BE,$CF,$C0,$00,$3F
 $4DF8 DEFB $C1,$37,$00,$00,$00,$00,$00,$03
 $4E00 DEFB $C0,$40,$82,$04,$31,$82,$82,$7E
 $4E08 DEFB $E7,$67,$7E,$7E,$01,$14,$11,$3E
 $4E10 DEFB $00,$0D,$DA,$FD,$F2,$E6,$41,$17
 $4E18 DEFB $C2,$18,$31,$90,$38,$46,$30,$03
 $4E20 DEFB $C0,$14,$10,$00,$00,$00,$01,$CE
 $4E28 DEFB $AF,$DF,$F9,$FE,$04,$1A,$07,$F0
 $4E30 DEFB $FC,$F1,$25,$04,$FE,$37,$F8,$00
 $4E38 DEFB $84,$40,$01,$C1,$E4,$0E,$68,$03
 $4E40 DEFB $C0,$00,$10,$08,$00,$00,$00,$39
 $4E48 DEFB $D7,$DF,$FD,$8C,$12,$43,$10,$42
 $4E50 DEFB $17,$C6,$25,$36,$FA,$3E,$FC,$20
 $4E58 DEFB $48,$1C,$20,$40,$8D,$60,$80,$03
 $4E60 DEFB $C0,$00,$08,$08,$00,$00,$15,$9C
 $4E68 DEFB $9B,$8F,$F3,$C1,$04,$0F,$00,$20
 $4E70 DEFB $9C,$5E,$D6,$80,$B7,$F7,$FE,$80
 $4E78 DEFB $20,$00,$00,$20,$8D,$71,$40,$03
 $4E80 DEFB $C0,$00,$02,$1F,$19,$EA,$74,$78
 $4E88 DEFB $A7,$80,$04,$01,$0D,$90,$00,$1B
 $4E90 DEFB $C0,$77,$95,$4B,$3F,$CF,$E7,$11
 $4E98 DEFB $03,$0F,$C9,$B4,$00,$00,$00,$03
 $4EA0 DEFB $C0,$00,$00,$7F,$07,$F3,$CA,$03
 $4EA8 DEFB $C4,$22,$80,$00,$37,$FF,$00,$00
 $4EB0 DEFB $00,$20,$14,$2C,$3E,$FF,$EF,$10
 $4EB8 DEFB $C7,$FB,$FA,$80,$00,$00,$00,$03
 $4EC0 DEFB $C0,$00,$00,$1D,$F0,$7F,$98,$01
 $4EC8 DEFB $E0,$5F,$80,$00,$00,$C0,$00,$00
 $4ED0 DEFB $00,$01,$2E,$0F,$F9,$FF,$00,$60
 $4ED8 DEFB $FF,$7E,$05,$00,$00,$00,$00,$03
 $4EE0 DEFB $C0,$00,$00,$3C,$1F,$FC,$40,$00
 $4EE8 DEFB $87,$3F,$F0,$00,$00,$22,$22,$00
 $4EF0 DEFB $90,$01,$5D,$BD,$AF,$C0,$00,$37
 $4EF8 DEFB $41,$B1,$00,$00,$00,$00,$00,$03
 $4F00 DEFB $C0,$40,$84,$02,$40,$56,$44,$FF
 $4F08 DEFB $7F,$00,$06,$7E,$01,$94,$08,$C0
 $4F10 DEFB $71,$CF,$DB,$8F,$E4,$F3,$41,$26
 $4F18 DEFB $C7,$19,$0A,$E0,$0C,$82,$08,$03
 $4F20 DEFB $C0,$04,$10,$00,$00,$00,$00,$E7
 $4F28 DEFB $6F,$C0,$01,$FE,$04,$99,$88,$FF
 $4F30 DEFB $1F,$F0,$27,$08,$FC,$7F,$F8,$00
 $4F38 DEFB $80,$7C,$00,$B6,$08,$05,$88,$03
 $4F40 DEFB $C0,$00,$10,$08,$00,$08,$00,$71
 $4F48 DEFB $D7,$C0,$01,$80,$12,$4C,$20,$42
 $4F50 DEFB $17,$BC,$D9,$1A,$FB,$3F,$FC,$20
 $4F58 DEFB $28,$3E,$20,$40,$0A,$A0,$80,$03
 $4F60 DEFB $C0,$00,$08,$08,$00,$00,$15,$9F
 $4F68 DEFB $C7,$7B,$FB,$E1,$02,$00,$00,$41
 $4F70 DEFB $9A,$7B,$6E,$88,$57,$FB,$DE,$01
 $4F78 DEFB $EF,$00,$00,$2C,$0A,$D1,$80,$03
 $4F80 DEFB $C0,$00,$01,$30,$0B,$E2,$74,$3E
 $4F88 DEFB $57,$E1,$48,$01,$07,$FC,$78,$3B
 $4F90 DEFB $C4,$5D,$56,$BC,$3E,$3F,$E7,$88
 $4F98 DEFB $83,$8F,$F7,$54,$00,$00,$00,$03
 $4FA0 DEFB $C0,$00,$00,$7F,$83,$FF,$9E,$03
 $4FA8 DEFB $C4,$23,$00,$00,$14,$3C,$00,$00
 $4FB0 DEFB $00,$16,$14,$86,$3E,$7F,$DE,$05
 $4FB8 DEFB $87,$FB,$FA,$80,$00,$00,$00,$03
 $4FC0 DEFB $C0,$00,$00,$1D,$F8,$3F,$28,$03
 $4FC8 DEFB $1E,$4E,$40,$00,$00,$40,$00,$00
 $4FD0 DEFB $00,$01,$00,$7F,$F9,$FC,$00,$1F
 $4FD8 DEFB $FE,$FE,$07,$80,$00,$00,$00,$03
 $4FE0 DEFB $C0,$00,$00,$0E,$E0,$33,$A0,$01
 $4FE8 DEFB $78,$BF,$A0,$00,$00,$2A,$22,$00
 $4FF0 DEFB $08,$03,$DD,$BD,$AF,$80,$00,$36
 $4FF8 DEFB $20,$F1,$00,$00,$00,$00,$00,$03
 $5000 DEFB $C0,$00,$00,$01,$5F,$D6,$E0,$01
 $5008 DEFB $F8,$B1,$E0,$0C,$00,$3A,$0A,$00
 $5010 DEFB $C8,$03,$EE,$BD,$5F,$80,$00,$76
 $5018 DEFB $21,$F9,$00,$00,$00,$00,$00,$03
 $5020 DEFB $C0,$00,$00,$1F,$FF,$B2,$80,$07
 $5028 DEFB $FF,$7F,$F0,$00,$FE,$40,$03,$00
 $5030 DEFB $00,$8F,$BE,$FF,$F6,$00,$00,$DC
 $5038 DEFB $C1,$E5,$80,$00,$00,$00,$00,$03
 $5040 DEFB $C0,$00,$01,$FF,$FF,$F6,$00,$04
 $5048 DEFB $4E,$9C,$21,$88,$00,$C0,$18,$00
 $5050 DEFB $E0,$3E,$20,$00,$09,$00,$03,$70
 $5058 DEFB $3B,$FF,$F8,$00,$00,$00,$00,$03
 $5060 DEFB $C0,$00,$19,$FF,$CC,$FC,$10,$58
 $5068 DEFB $0F,$44,$F5,$78,$3E,$FD,$FE,$23
 $5070 DEFB $00,$00,$11,$00,$01,$00,$06,$C6
 $5078 DEFB $62,$62,$5B,$68,$00,$00,$00,$03
 $5080 DEFB $C0,$00,$03,$FC,$1D,$FF,$50,$00
 $5088 DEFB $00,$00,$00,$00,$00,$00,$00,$04
 $5090 DEFB $04,$38,$74,$E9,$9C,$4F,$9D,$3E
 $5098 DEFB $70,$04,$FF,$D3,$FD,$0E,$70,$03
 $50A0 DEFB $C0,$00,$00,$00,$00,$00,$00,$00
 $50A8 DEFB $00,$00,$00,$00,$00,$00,$00,$3F
 $50B0 DEFB $84,$EE,$74,$E9,$CE,$4C,$9D,$00
 $50B8 DEFB $70,$04,$01,$D0,$19,$34,$70,$03
 $50C0 DEFB $C0,$07,$FF,$1E,$1C,$7F,$F1,$FE
 $50C8 DEFB $0F,$8F,$03,$C0,$F0,$E3,$FF,$9C
 $50D0 DEFB $3F,$40,$00,$0C,$00,$01,$EF,$70
 $50D8 DEFB $18,$07,$80,$1E,$00,$F8,$F0,$03
 $50E0 DEFB $C0,$03,$00,$03,$E0,$30,$00,$CC
 $50E8 DEFB $00,$60,$18,$18,$43,$41,$80,$00
 $50F0 DEFB $80,$C0,$00,$41,$80,$00,$6B,$40
 $50F8 DEFB $83,$03,$00,$0C,$00,$06,$00,$03
 $5100 DEFB $C0,$00,$00,$01,$DD,$DB,$A0,$01
 $5108 DEFB $F8,$B1,$E0,$0A,$00,$1A,$1A,$00
 $5110 DEFB $28,$03,$AF,$DD,$DF,$00,$00,$66
 $5118 DEFB $20,$FF,$80,$00,$00,$00,$00,$03
 $5120 DEFB $C0,$00,$00,$3F,$FF,$BF,$80,$03
 $5128 DEFB $C3,$3F,$F0,$00,$FD,$A2,$00,$80
 $5130 DEFB $01,$0F,$EC,$FF,$EE,$00,$00,$FC
 $5138 DEFB $E1,$CD,$00,$00,$00,$00,$00,$03
 $5140 DEFB $C0,$00,$01,$FF,$FC,$F6,$00,$0F
 $5148 DEFB $2D,$3C,$62,$04,$00,$30,$06,$01
 $5150 DEFB $80,$01,$00,$00,$05,$00,$03,$63
 $5158 DEFB $FA,$0F,$FC,$00,$00,$00,$00,$03
 $5160 DEFB $C0,$00,$1F,$3F,$9E,$FC,$19,$FC
 $5168 DEFB $30,$F8,$0F,$80,$39,$7D,$EF,$16
 $5170 DEFB $00,$00,$0E,$00,$01,$00,$00,$7A
 $5178 DEFB $26,$22,$89,$30,$00,$00,$00,$03
 $5180 DEFB $C0,$00,$03,$FC,$1F,$FE,$F8,$00
 $5188 DEFB $00,$00,$00,$00,$00,$00,$00,$04
 $5190 DEFB $04,$38,$74,$E9,$9C,$4C,$9D,$36
 $5198 DEFB $73,$E4,$C7,$D3,$01,$0E,$70,$03
 $51A0 DEFB $C0,$00,$00,$00,$00,$00,$00,$00
 $51A8 DEFB $00,$00,$00,$00,$00,$00,$00,$3F
 $51B0 DEFB $04,$EE,$74,$E9,$E7,$4C,$9D,$80
 $51B8 DEFB $F0,$02,$03,$D0,$1D,$34,$70,$03
 $51C0 DEFB $C0,$03,$01,$0C,$08,$30,$10,$C3
 $51C8 DEFB $03,$06,$0E,$70,$70,$41,$80,$9C
 $51D0 DEFB $60,$C0,$00,$0C,$00,$00,$C6,$20
 $51D8 DEFB $18,$03,$00,$0C,$00,$30,$60,$03
 $51E0 DEFB $C0,$03,$00,$01,$C0,$30,$00,$C6
 $51E8 DEFB $00,$60,$18,$18,$43,$41,$80,$00
 $51F0 DEFB $C0,$C0,$00,$41,$80,$00,$31,$80
 $51F8 DEFB $83,$03,$01,$0C,$04,$06,$00,$03
 $5200 DEFB $C0,$00,$00,$01,$77,$7E,$C0,$01
 $5208 DEFB $FF,$31,$E0,$39,$00,$60,$18,$00
 $5210 DEFB $48,$03,$77,$7B,$BF,$00,$00,$66
 $5218 DEFB $40,$B9,$00,$00,$00,$00,$00,$03
 $5220 DEFB $C0,$00,$00,$33,$FF,$7F,$80,$01
 $5228 DEFB $04,$23,$F0,$00,$78,$79,$0C,$80
 $5230 DEFB $06,$07,$7C,$FF,$FE,$00,$00,$FC
 $5238 DEFB $A0,$E7,$00,$00,$00,$00,$00,$03
 $5240 DEFB $C0,$00,$01,$9F,$FA,$F6,$00,$10
 $5248 DEFB $2D,$3C,$1C,$04,$07,$CC,$03,$8F
 $5250 DEFB $00,$00,$80,$00,$02,$00,$06,$CF
 $5258 DEFB $FE,$30,$02,$00,$00,$00,$00,$03
 $5260 DEFB $C0,$00,$1B,$9F,$3F,$F8,$1B,$FE
 $5268 DEFB $EF,$00,$00,$00,$3E,$7D,$EE,$8C
 $5270 DEFB $00,$00,$00,$00,$01,$80,$00,$0F
 $5278 DEFB $E1,$FC,$76,$C0,$00,$00,$00,$03
 $5280 DEFB $C0,$00,$03,$CC,$0E,$FF,$F8,$00
 $5288 DEFB $00,$00,$00,$00,$00,$00,$00,$08
 $5290 DEFB $04,$10,$74,$E8,$38,$4F,$9D,$36
 $5298 DEFB $72,$34,$DF,$93,$E1,$26,$70,$03
 $52A0 DEFB $C0,$00,$00,$00,$00,$00,$00,$00
 $52A8 DEFB $00,$00,$00,$00,$00,$00,$00,$4E
 $52B0 DEFB $07,$FF,$F7,$EF,$BF,$7C,$FC,$FF
 $52B8 DEFB $E0,$01,$FF,$9F,$FD,$F3,$F0,$03
 $52C0 DEFB $C0,$03,$00,$0E,$18,$30,$00,$C1
 $52C8 DEFB $83,$04,$18,$18,$58,$41,$80,$0C
 $52D0 DEFB $C0,$40,$00,$16,$00,$00,$C6,$20
 $52D8 DEFB $2C,$03,$00,$0C,$00,$30,$40,$03
 $52E0 DEFB $C0,$03,$01,$01,$C0,$30,$10,$C3
 $52E8 DEFB $00,$60,$0E,$70,$41,$C1,$80,$80
 $52F0 DEFB $E1,$80,$00,$41,$80,$00,$31,$80
 $52F8 DEFB $83,$03,$03,$0C,$0C,$06,$00,$03
 $5300 DEFB $C0,$00,$00,$01,$DD,$DB,$C0,$01
 $5308 DEFB $7F,$AD,$A0,$44,$80,$88,$00,$00
 $5310 DEFB $90,$06,$FB,$BB,$FE,$00,$00,$66
 $5318 DEFB $81,$B7,$00,$00,$00,$00,$00,$03
 $5320 DEFB $C0,$00,$00,$67,$FF,$7F,$00,$01
 $5328 DEFB $CC,$20,$E0,$00,$30,$05,$F0,$80
 $5330 DEFB $1E,$07,$FC,$7F,$F6,$00,$00,$F6
 $5338 DEFB $20,$C5,$00,$00,$00,$00,$00,$03
 $5340 DEFB $C0,$00,$01,$9F,$FA,$FE,$00,$2C
 $5348 DEFB $2C,$9C,$28,$02,$0C,$7B,$02,$3C
 $5350 DEFB $00,$00,$80,$08,$02,$00,$06,$DC
 $5358 DEFB $02,$C0,$7E,$00,$00,$00,$00,$03
 $5360 DEFB $C0,$00,$1B,$E6,$3A,$F8,$0B,$FF
 $5368 DEFB $C0,$00,$00,$00,$4F,$FD,$58,$78
 $5370 DEFB $00,$00,$00,$00,$01,$40,$00,$00
 $5378 DEFB $3F,$88,$00,$00,$00,$00,$00,$03
 $5380 DEFB $C0,$00,$03,$3C,$0E,$3F,$98,$00
 $5388 DEFB $00,$00,$00,$00,$00,$00,$00,$08
 $5390 DEFB $04,$92,$74,$E8,$38,$40,$3D,$36
 $5398 DEFB $72,$3C,$D1,$D0,$31,$26,$70,$03
 $53A0 DEFB $C0,$00,$00,$00,$00,$00,$00,$00
 $53A8 DEFB $00,$00,$00,$00,$00,$00,$01,$82
 $53B0 DEFB $03,$DD,$F3,$E7,$9F,$3C,$7C,$7F
 $53B8 DEFB $C0,$00,$FF,$0F,$FC,$F1,$F0,$03
 $53C0 DEFB $C0,$03,$00,$06,$10,$30,$00,$C1
 $53C8 DEFB $81,$88,$18,$18,$58,$41,$80,$0C
 $53D0 DEFB $E0,$40,$00,$16,$00,$00,$C6,$20
 $53D8 DEFB $2C,$03,$00,$0C,$00,$18,$80,$03
 $53E0 DEFB $C0,$07,$FF,$01,$C0,$7F,$F1,$E3
 $53E8 DEFB $C0,$F0,$03,$C0,$E1,$E3,$FF,$80
 $53F0 DEFB $9F,$00,$01,$E3,$70,$00,$31,$83
 $53F8 DEFB $C7,$C7,$FF,$1F,$FC,$0F,$00,$03
 $5400 DEFB $C0,$00,$00,$03,$77,$6E,$40,$01
 $5408 DEFB $7F,$BC,$60,$3A,$40,$90,$40,$00
 $5410 DEFB $20,$07,$7D,$FB,$FE,$00,$00,$66
 $5418 DEFB $81,$36,$80,$00,$00,$00,$00,$03
 $5420 DEFB $C0,$00,$00,$67,$FE,$FB,$00,$01
 $5428 DEFB $0C,$20,$40,$00,$18,$04,$C1,$00
 $5430 DEFB $1E,$03,$5E,$41,$F6,$00,$00,$F5
 $5438 DEFB $21,$ED,$80,$00,$00,$00,$00,$03
 $5440 DEFB $C0,$00,$03,$3F,$F4,$FE,$03,$C0
 $5448 DEFB $16,$4C,$0C,$1A,$10,$7F,$81,$80
 $5450 DEFB $1C,$00,$40,$10,$01,$00,$0D,$F8
 $5458 DEFB $01,$01,$FD,$E0,$00,$00,$00,$03
 $5460 DEFB $C0,$00,$19,$FE,$37,$DC,$06,$07
 $5468 DEFB $00,$00,$00,$00,$21,$57,$C0,$08
 $5470 DEFB $07,$81,$C7,$8F,$3C,$7F,$C0,$7F
 $5478 DEFB $80,$01,$FC,$1F,$F1,$E3,$C0,$03
 $5480 DEFB $C0,$00,$03,$43,$0E,$1F,$98,$00
 $5488 DEFB $00,$00,$00,$00,$00,$00,$00,$10
 $5490 DEFB $04,$82,$74,$E8,$38,$40,$19,$36
 $5498 DEFB $72,$3C,$D1,$D0,$39,$32,$70,$03
 $54A0 DEFB $C0,$00,$00,$00,$00,$00,$00,$00
 $54A8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $54B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $54B8 DEFB $00,$00,$00,$00,$00,$00,$00,$03
 $54C0 DEFB $C0,$03,$04,$06,$10,$30,$40,$C1
 $54C8 DEFB $81,$88,$30,$0C,$4C,$41,$82,$08
 $54D0 DEFB $78,$00,$00,$16,$00,$00,$C6,$20
 $54D8 DEFB $2C,$03,$00,$0C,$00,$18,$80,$03
 $54E0 DEFB $C0,$00,$00,$00,$00,$00,$00,$00
 $54E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $54F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $54F8 DEFB $00,$00,$00,$00,$00,$00,$00,$03
 $5500 DEFB $C0,$00,$00,$04,$95,$D3,$80,$01
 $5508 DEFB $8F,$5C,$50,$08,$20,$90,$24,$00
 $5510 DEFB $40,$0E,$FE,$FB,$FE,$00,$00,$4C
 $5518 DEFB $C0,$3F,$80,$00,$00,$00,$00,$03
 $5520 DEFB $C0,$00,$00,$4F,$FF,$FB,$00,$01
 $5528 DEFB $CA,$2C,$C0,$00,$04,$02,$00,$00
 $5530 DEFB $17,$04,$00,$3F,$0E,$00,$01,$F9
 $5538 DEFB $F0,$FB,$40,$00,$00,$00,$00,$03
 $5540 DEFB $C0,$00,$03,$3F,$ED,$FE,$08,$38
 $5548 DEFB $1B,$40,$03,$EE,$11,$FF,$C0,$60
 $5550 DEFB $7E,$80,$44,$20,$01,$00,$1F,$F0
 $5558 DEFB $FC,$BC,$F7,$F0,$00,$00,$00,$03
 $5560 DEFB $C0,$00,$3F,$FC,$3B,$E4,$07,$F8
 $5568 DEFB $00,$00,$00,$00,$1F,$FC,$00,$08
 $5570 DEFB $04,$C2,$64,$C9,$A6,$40,$20,$80
 $5578 DEFB $C0,$02,$02,$10,$19,$32,$60,$03
 $5580 DEFB $C0,$00,$03,$96,$80,$0F,$E0,$00
 $5588 DEFB $00,$00,$00,$00,$00,$00,$00,$10
 $5590 DEFB $0C,$C6,$74,$E9,$98,$4F,$9D,$36
 $5598 DEFB $72,$3C,$D9,$D3,$F9,$32,$70,$03
 $55A0 DEFB $C0,$00,$00,$00,$00,$00,$00,$00
 $55A8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $55B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $55B8 DEFB $00,$00,$00,$00,$00,$00,$00,$03
 $55C0 DEFB $C0,$03,$FC,$07,$30,$3F,$C0,$C3
 $55C8 DEFB $00,$D0,$30,$0C,$4C,$41,$FE,$10
 $55D0 DEFB $1E,$00,$00,$23,$00,$00,$6B,$40
 $55D8 DEFB $46,$03,$00,$0C,$00,$0D,$00,$03
 $55E0 DEFB $C0,$00,$00,$00,$00,$00,$00,$00
 $55E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $55F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $55F8 DEFB $00,$00,$00,$00,$00,$00,$00,$03
 $5600 DEFB $C0,$00,$00,$0E,$67,$36,$80,$03
 $5608 DEFB $8F,$44,$50,$06,$30,$89,$24,$00
 $5610 DEFB $00,$1D,$BF,$77,$FE,$00,$00,$4C
 $5618 DEFB $C1,$76,$80,$00,$00,$00,$00,$03
 $5620 DEFB $C0,$00,$00,$CF,$FF,$FB,$00,$02
 $5628 DEFB $0E,$4C,$40,$00,$02,$02,$00,$00
 $5630 DEFB $33,$00,$7F,$C0,$C6,$00,$01,$BF
 $5638 DEFB $31,$E5,$C0,$00,$00,$00,$00,$03
 $5640 DEFB $C0,$00,$03,$FF,$EC,$FE,$08,$04
 $5648 DEFB $04,$7F,$1F,$FE,$17,$FF,$E0,$40
 $5650 DEFB $C1,$00,$4E,$40,$01,$00,$1E,$43
 $5658 DEFB $FF,$CE,$FA,$48,$00,$00,$00,$03
 $5660 DEFB $C0,$00,$37,$FC,$1B,$DF,$00,$00
 $5668 DEFB $00,$00,$00,$00,$00,$00,$00,$08
 $5670 DEFB $04,$64,$74,$E9,$CF,$40,$11,$00
 $5678 DEFB $60,$04,$01,$10,$1D,$1E,$70,$03
 $5680 DEFB $C0,$00,$01,$FD,$80,$00,$00,$00
 $5688 DEFB $00,$00,$00,$00,$00,$00,$00,$30
 $5690 DEFB $14,$C6,$74,$E9,$9C,$4F,$9D,$36
 $5698 DEFB $73,$FC,$C9,$D2,$01,$38,$70,$03
 $56A0 DEFB $C0,$00,$00,$00,$00,$00,$00,$00
 $56A8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $56B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $56B8 DEFB $00,$00,$00,$00,$00,$00,$00,$03
 $56C0 DEFB $C0,$03,$04,$03,$20,$30,$40,$FE
 $56C8 DEFB $00,$D0,$30,$0C,$46,$41,$82,$00
 $56D0 DEFB $07,$80,$00,$23,$00,$00,$6B,$40
 $56D8 DEFB $46,$03,$00,$0C,$00,$0D,$00,$03
 $56E0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $56E8 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $56F0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $56F8 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $5700 DEFB $C0,$00,$00,$1F,$98,$69,$00,$07
 $5708 DEFB $8F,$47,$90,$01,$B8,$44,$44,$00
 $5710 DEFB $00,$6F,$EE,$77,$FA,$00,$00,$CC
 $5718 DEFB $C1,$FE,$80,$00,$00,$00,$00,$03
 $5720 DEFB $C0,$00,$00,$FF,$FE,$FB,$00,$03
 $5728 DEFB $8E,$5C,$C0,$70,$01,$01,$E0,$00
 $5730 DEFB $31,$C3,$C0,$00,$32,$00,$01,$BF
 $5738 DEFB $F3,$F6,$50,$00,$00,$00,$00,$03
 $5740 DEFB $C0,$00,$0F,$FF,$CC,$FC,$10,$32
 $5748 DEFB $00,$C7,$FF,$A6,$2F,$FB,$F8,$21
 $5750 DEFB $80,$00,$24,$80,$01,$00,$0F,$87
 $5758 DEFB $14,$A3,$8A,$48,$00,$00,$00,$03
 $5760 DEFB $C0,$00,$33,$FC,$1C,$EF,$A0,$00
 $5768 DEFB $00,$00,$00,$00,$00,$00,$00,$04
 $5770 DEFB $04,$74,$74,$E9,$CE,$4F,$99,$3E
 $5778 DEFB $70,$04,$F9,$93,$FD,$1E,$70,$03
 $5780 DEFB $C0,$00,$00,$FF,$00,$00,$00,$00
 $5788 DEFB $00,$00,$00,$00,$00,$00,$00,$3C
 $5790 DEFB $64,$C6,$74,$E9,$CC,$4C,$9D,$3E
 $5798 DEFB $71,$FC,$F9,$D3,$F1,$38,$70,$03
 $57A0 DEFB $C0,$00,$00,$00,$00,$00,$00,$00
 $57A8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $57B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $57B8 DEFB $00,$00,$00,$00,$00,$00,$00,$03
 $57C0 DEFB $C0,$03,$00,$03,$20,$30,$00,$D8
 $57C8 DEFB $00,$60,$30,$0C,$46,$41,$80,$00
 $57D0 DEFB $81,$C0,$00,$3F,$00,$00,$6B,$40
 $57D8 DEFB $7E,$03,$00,$0C,$00,$06,$00,$03
 $57E0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $57E8 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $57F0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $57F8 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $5800 DEFB $3A,$3A,$3A,$3A,$3A,$3A,$3A,$3A
 $5808 DEFB $3A,$3A,$3A,$3A,$3A,$3A,$3A,$3A
 $5810 DEFB $3A,$3A,$3A,$3A,$3A,$3A,$3A,$3A
 $5818 DEFB $3A,$3A,$3A,$3A,$3A,$3A,$3A,$3A
 $5820 DEFB $3A,$39,$39,$39,$39,$39,$39,$39
 $5828 DEFB $39,$39,$39,$39,$39,$39,$39,$39
 $5830 DEFB $39,$39,$39,$39,$39,$39,$39,$39
 $5838 DEFB $39,$39,$39,$39,$39,$39,$39,$3A
 $5840 DEFB $3A,$39,$39,$39,$39,$39,$39,$39
 $5848 DEFB $39,$39,$39,$39,$39,$39,$39,$39
 $5850 DEFB $39,$39,$39,$39,$39,$39,$39,$39
 $5858 DEFB $39,$39,$39,$39,$39,$39,$39,$3A
 $5860 DEFB $3A,$39,$39,$39,$39,$39,$39,$39
 $5868 DEFB $39,$39,$39,$39,$39,$39,$39,$39
 $5870 DEFB $39,$39,$39,$39,$39,$39,$39,$39
 $5878 DEFB $39,$39,$39,$39,$39,$39,$39,$3A
 $5880 DEFB $3A,$39,$39,$39,$39,$39,$39,$39
 $5888 DEFB $39,$39,$39,$39,$39,$39,$39,$39
 $5890 DEFB $39,$39,$39,$39,$39,$39,$39,$39
 $5898 DEFB $39,$39,$39,$39,$39,$39,$39,$3A
 $58A0 DEFB $3A,$39,$39,$39,$39,$39,$39,$39
 $58A8 DEFB $39,$39,$39,$39,$39,$39,$39,$39
 $58B0 DEFB $39,$39,$39,$39,$39,$39,$39,$39
 $58B8 DEFB $39,$39,$39,$39,$39,$39,$39,$3A
 $58C0 DEFB $3A,$39,$39,$39,$39,$39,$39,$39
 $58C8 DEFB $39,$39,$39,$39,$39,$39,$39,$39
 $58D0 DEFB $39,$39,$39,$39,$39,$39,$39,$39
 $58D8 DEFB $39,$39,$39,$39,$39,$39,$39,$3A
 $58E0 DEFB $3A,$39,$39,$39,$39,$39,$39,$39
 $58E8 DEFB $39,$39,$39,$39,$39,$39,$39,$39
 $58F0 DEFB $39,$39,$39,$39,$39,$39,$39,$39
 $58F8 DEFB $39,$39,$39,$39,$39,$39,$39,$3A
 $5900 DEFB $3A,$39,$39,$39,$39,$39,$39,$39
 $5908 DEFB $39,$39,$39,$39,$39,$39,$39,$39
 $5910 DEFB $39,$39,$39,$39,$39,$39,$39,$39
 $5918 DEFB $39,$39,$39,$39,$39,$39,$39,$3A
 $5920 DEFB $3A,$39,$39,$39,$39,$39,$39,$39
 $5928 DEFB $39,$39,$39,$39,$39,$39,$39,$39
 $5930 DEFB $39,$39,$39,$39,$39,$39,$39,$39
 $5938 DEFB $39,$39,$39,$39,$39,$39,$39,$3A
 $5940 DEFB $3A,$39,$39,$39,$39,$39,$39,$39
 $5948 DEFB $39,$39,$39,$39,$39,$39,$39,$39
 $5950 DEFB $39,$39,$39,$39,$39,$39,$39,$39
 $5958 DEFB $39,$39,$39,$39,$39,$39,$39,$3A
 $5960 DEFB $3A,$39,$39,$39,$39,$39,$39,$39
 $5968 DEFB $39,$39,$39,$39,$39,$39,$39,$39
 $5970 DEFB $39,$39,$39,$39,$39,$39,$39,$39
 $5978 DEFB $39,$39,$39,$39,$39,$39,$39,$3A
 $5980 DEFB $3A,$39,$39,$39,$39,$39,$39,$39
 $5988 DEFB $39,$39,$39,$39,$39,$39,$39,$39
 $5990 DEFB $39,$39,$39,$39,$39,$39,$39,$39
 $5998 DEFB $39,$39,$39,$39,$39,$39,$39,$3A
 $59A0 DEFB $3A,$39,$39,$39,$39,$39,$39,$39
 $59A8 DEFB $39,$39,$39,$39,$39,$39,$39,$39
 $59B0 DEFB $39,$39,$39,$39,$39,$39,$39,$39
 $59B8 DEFB $39,$39,$39,$39,$39,$39,$39,$3A
 $59C0 DEFB $3A,$39,$39,$39,$39,$39,$39,$39
 $59C8 DEFB $39,$39,$39,$39,$39,$39,$39,$39
 $59D0 DEFB $39,$39,$39,$39,$39,$39,$39,$39
 $59D8 DEFB $39,$39,$39,$39,$39,$39,$39,$3A
 $59E0 DEFB $3A,$39,$39,$39,$39,$39,$39,$39
 $59E8 DEFB $39,$39,$39,$39,$39,$39,$39,$39
 $59F0 DEFB $39,$39,$39,$39,$39,$39,$39,$39
 $59F8 DEFB $39,$39,$39,$39,$39,$39,$39,$3A
 $5A00 DEFB $3A,$39,$39,$39,$39,$39,$39,$39
 $5A08 DEFB $39,$39,$39,$39,$39,$39,$39,$39
 $5A10 DEFB $39,$39,$39,$39,$39,$39,$39,$39
 $5A18 DEFB $39,$39,$39,$39,$39,$39,$39,$3A
 $5A20 DEFB $3A,$39,$39,$39,$39,$39,$39,$39
 $5A28 DEFB $39,$39,$39,$39,$39,$39,$39,$39
 $5A30 DEFB $39,$39,$39,$39,$39,$39,$39,$39
 $5A38 DEFB $39,$39,$39,$39,$39,$39,$39,$3A
 $5A40 DEFB $3A,$39,$39,$39,$39,$39,$39,$39
 $5A48 DEFB $39,$39,$39,$39,$39,$39,$39,$39
 $5A50 DEFB $39,$39,$39,$39,$39,$39,$38,$39
 $5A58 DEFB $39,$39,$39,$39,$39,$39,$39,$3A
 $5A60 DEFB $3A,$39,$39,$39,$39,$39,$39,$39
 $5A68 DEFB $39,$39,$39,$39,$39,$39,$39,$39
 $5A70 DEFB $38,$38,$38,$38,$38,$38,$38,$38
 $5A78 DEFB $38,$38,$38,$38,$38,$38,$38,$3A
 $5A80 DEFB $3A,$39,$39,$39,$39,$39,$39,$39
 $5A88 DEFB $39,$39,$39,$39,$39,$39,$39,$39
 $5A90 DEFB $38,$38,$38,$38,$38,$38,$38,$38
 $5A98 DEFB $38,$38,$38,$38,$38,$38,$38,$3A
 $5AA0 DEFB $3A,$39,$39,$39,$39,$39,$39,$39
 $5AA8 DEFB $39,$39,$39,$39,$39,$39,$39,$39
 $5AB0 DEFB $38,$38,$38,$38,$38,$38,$38,$38
 $5AB8 DEFB $38,$38,$38,$38,$38,$38,$38,$3A
 $5AC0 DEFB $3A,$3A,$3A,$3A,$3A,$3A,$3A,$3A
 $5AC8 DEFB $3A,$3A,$3A,$3A,$3A,$3A,$3A,$3A
 $5AD0 DEFB $3A,$3A,$3A,$3A,$3A,$3A,$3A,$3A
 $5AD8 DEFB $3A,$3A,$3A,$3A,$3A,$3A,$3A,$3A
 $5AE0 DEFB $3A,$3A,$3A,$3A,$3A,$3A,$3A,$3A
 $5AE8 DEFB $3A,$3A,$3A,$3A,$3A,$3A,$3A,$3A
 $5AF0 DEFB $3A,$3A,$3A,$3A,$3A,$3A,$3A,$3A
 $5AF8 DEFB $3A,$3A,$3A,$3A,$3A,$3A,$3A,$3A

; Copy of main playing area
;
; This is a copy of the bottom two thirds of the screen
; containing the background graphics that don't change
; until a room is redrawn.
;
; .
;
; The buffer is initialised by the routine at #R$B9AC
; when all the background graphics are drawn.
g$5B00 DEFS $1000

; Sprite buffer
;
; The buffer contains a copy of the lower two thirds of the screen,
; sorted sequentially by rows.
;
; .
;
; The data is written to the screen by the routine at #R$B9FB.
; It is initialised as a copy of the main screen at #R$5B00
; by the routine at #R$EEA2. 
; Sprites are then drawn on top by the routine at #R$A83D.
g$6B00 DEFS $1000 

; Lookup table for reversing graphics
;
; Used by the routine at #R$81E3.
;
; .
;
; The table gives a fast way of reversing all the bits in a byte.
; On lookup, the index to the table gives the inverse bit pattern.
; This saves time calculating it by hand.
b$7B00 DEFB $00,$80,$40,$C0,$20,$A0,$60,$E0
 $7B08 DEFB $10,$90,$50,$D0,$30,$B0,$70,$F0
 $7B10 DEFB $08,$88,$48,$C8,$28,$A8,$68,$E8
 $7B18 DEFB $18,$98,$58,$D8,$38,$B8,$78,$F8
 $7B20 DEFB $04,$84,$44,$C4,$24,$A4,$64,$E4
 $7B28 DEFB $14,$94,$54,$D4,$34,$B4,$74,$F4
 $7B30 DEFB $0C,$8C,$4C,$CC,$2C,$AC,$6C,$EC
 $7B38 DEFB $1C,$9C,$5C,$DC,$3C,$BC,$7C,$FC
 $7B40 DEFB $02,$82,$42,$C2,$22,$A2,$62,$E2
 $7B48 DEFB $12,$92,$52,$D2,$32,$B2,$72,$F2
 $7B50 DEFB $0A,$8A,$4A,$CA,$2A,$AA,$6A,$EA
 $7B58 DEFB $1A,$9A,$5A,$DA,$3A,$BA,$7A,$FA
 $7B60 DEFB $06,$86,$46,$C6,$26,$A6,$66,$E6
 $7B68 DEFB $16,$96,$56,$D6,$36,$B6,$76,$F6
 $7B70 DEFB $0E,$8E,$4E,$CE,$2E,$AE,$6E,$EE
 $7B78 DEFB $1E,$9E,$5E,$DE,$3E,$BE,$7E,$FE
 $7B80 DEFB $01,$81,$41,$C1,$21,$A1,$61,$E1
 $7B88 DEFB $11,$91,$51,$D1,$31,$B1,$71,$F1
 $7B90 DEFB $09,$89,$49,$C9,$29,$A9,$69,$E9
 $7B98 DEFB $19,$99,$59,$D9,$39,$B9,$79,$F9
 $7BA0 DEFB $05,$85,$45,$C5,$25,$A5,$65,$E5
 $7BA8 DEFB $15,$95,$55,$D5,$35,$B5,$75,$F5
 $7BB0 DEFB $0D,$8D,$4D,$CD,$2D,$AD,$6D,$ED
 $7BB8 DEFB $1D,$9D,$5D,$DD,$3D,$BD,$7D,$FD
 $7BC0 DEFB $03,$83,$43,$C3,$23,$A3,$63,$E3
 $7BC8 DEFB $13,$93,$53,$D3,$33,$B3,$73,$F3
 $7BD0 DEFB $0B,$8B,$4B,$CB,$2B,$AB,$6B,$EB
 $7BD8 DEFB $1B,$9B,$5B,$DB,$3B,$BB,$7B,$FB
 $7BE0 DEFB $07,$87,$47,$C7,$27,$A7,$67,$E7
 $7BE8 DEFB $17,$97,$57,$D7,$37,$B7,$77,$F7
 $7BF0 DEFB $0F,$8F,$4F,$CF,$2F,$AF,$6F,$EF
 $7BF8 DEFB $1F,$9F,$5F,$DF,$3F,$BF,$7F,$FF

; Character names
t$7C00 DEFM "WALLY"
 $7C05 DEFB $FF
 $7C06 DEFM "WILMA"
 $7C0B DEFB $FF
 $7C0C DEFM "TOM"
 $7C0F DEFB $FF
 $7C10 DEFM "DICK"
 $7C14 DEFB $FF
 $7C15 DEFM "HARRY"
 $7C1A DEFB $FF

; Wages page text
t$7C1B DEFB $FE
 $7C1C DEFM "CTODAY'S WAGES"
 $7C2A DEFB $B8
 $7C2B DEFB $04
 $7C2C DEFB $FE
 $7C2D DEFM "FWALLY'S PAY"
 $7C39 DEFB $BD
 $7C3A DEFB $03
 $7C3B DEFM "WILMA'S PAY"
 $7C46 DEFB $BD
 $7C47 DEFB $03
 $7C48 DEFM "TOM'S PAY"
 $7C51 DEFB $BF
 $7C52 DEFB $03
 $7C53 DEFM "DICK'S PAY"
 $7C5D DEFB $BE
 $7C5E DEFB $03
 $7C5F DEFM "HARRY'S PAY"
 $7C6A DEFB $FE
 $7C6B DEFM "C"
 $7C6C DEFB $BF
 $7C6D DEFB $04
 $7C6E DEFM "OVERALL"
 $7C75 DEFB $FF

; Completed page text
t$7C76 DEFB $FE
 $7C77 DEFM "DYOU CLEVER DICK  (PLUS TOM,"
 $7C93 DEFB $AD
 $7C94 DEFB $03
 $7C95 DEFM "HARRY, WILMA AND WALLY)."
 $7CAD DEFB $B0
 $7CAE DEFB $03
 $7CAF DEFM "YOU'VE OPENED THE SAFE."
 $7CC6 DEFB $B1
 $7CC7 DEFB $03
 $7CC8 DEFM "PERHAPS  EVERYONE'S  NOT  A"
 $7CE3 DEFB $AD
 $7CE4 DEFB $03
 $7CE5 DEFM "WALLY AFTER ALL."
 $7CF5 DEFB $B8
 $7CF6 DEFB $03
 $7CF7 DEFM "THE GANG HAVE BEEN PAID AND"
 $7D12 DEFB $AD
 $7D13 DEFB $03
 $7D14 DEFM "ARE NOW OFF ON THEIR HOLS."
 $7D2E DEFB $AE
 $7D2F DEFB $03
 $7D30 DEFM "SEE YOU AGAIN SOMETIME."
 $7D47 DEFB $FF

; Game over page text
t$7D48 DEFB $FE
 $7D49 DEFM "DTOUGH LUCK.  THE GANG HAS"
 $7D63 DEFB $AF
 $7D64 DEFB $03
 $7D65 DEFM "EARNED"
 $7D6B DEFB $CE
 $7D6C DEFB $00
 $7D6D DEFM ",  BUT  CAN'T"
 $7D7A DEFB $AF
 $7D7B DEFB $03
 $7D7C DEFM "HAVE  IT  'COS  THE  SAFE"
 $7D95 DEFB $AF
 $7D96 DEFB $03
 $7D97 DEFM "WASN'T OPENED, AND THAT'S"
 $7DB0 DEFB $AF
 $7DB1 DEFB $03
 $7DB2 DEFM "WHERE THE MONEY IS."
 $7DC5 DEFB $FF

; Title page text
t$7DC6 DEFB $FE
 $7DC7 DEFM "BKEY:-"
 $7DCD DEFB $FE
 $7DCE DEFM "F   1.SINCLAIR JOYSTICK"
 $7DE5 DEFB $AD
 $7DE6 DEFB $07
 $7DE7 DEFB $FE
 $7DE8 DEFM "BKEY:-"
 $7DEE DEFB $FE
 $7DEF DEFM "F   2.KEMPSTON JOYSTICK"
 $7E06 DEFB $AD
 $7E07 DEFB $07
 $7E08 DEFB $FE
 $7E09 DEFM "BKEY:-"
 $7E0F DEFB $FE
 $7E10 DEFM "F   3.KEYBOARD"
 $7E1E DEFB $BA
 $7E1F DEFB $08
 $7E20 DEFB $FE
 $7E21 DEFM "EPRESS KEY 4 TO START"
 $7E36 DEFB $FF

; 'Key :'
t$7E37 DEFB $FE
 $7E38 DEFM "GKEY:-"
 $7E3E DEFB $FF

; Status bar text
t$7E3F DEFB $FB
 $7E40 DEFB $DC
 $7E41 DEFB $DF
 $7E42 DEFB $FE
 $7E43 DEFM "DCHARACTER:"
 $7E4E DEFB $BE
 $7E4F DEFB $02
 $7E50 DEFB $FE
 $7E51 DEFM "GENDURANCE:"
 $7E5C DEFB $AE
 $7E5D DEFB $00
 $7E5E DEFB $FE
 $7E5F DEFM "G  "
 $7E62 DEFB $C6
 $7E63 DEFB $01
 $7E64 DEFM "  "
 $7E66 DEFB $C6
 $7E67 DEFB $01
 $7E68 DEFB $FB
 $7E69 DEFB $DC
 $7E6A DEFB $DF
 $7E6B DEFB $FE
 $7E6C DEFM "B"
 $7E6D DEFB $FD
 $7E6E DEFM " ["
 $7E70 DEFB $FF

; Morning tea break
t$7E71 DEFB $FE
 $7E72 DEFM "E"
 $7E73 DEFB $CD
 $7E74 DEFB $0C
 $7E75 DEFM "HO HUM, TIME FOR A BUN"
 $7E8B DEFB $B4
 $7E8C DEFB $04
 $7E8D DEFM "MORNING TEA BREAK"
 $7E9E DEFB $FF

; Lunch time
t$7E9F DEFB $FE
 $7EA0 DEFM "C"
 $7EA1 DEFB $CA
 $7EA2 DEFB $0C
 $7EA3 DEFM "RUBBA DUB DUB, TIME FOR GRUB"
 $7EBF DEFB $B5
 $7EC0 DEFB $04
 $7EC1 DEFM "LUNCH TIME"
 $7ECB DEFB $FF

; Afternoon tea break
t$7ECC DEFB $FE
 $7ECD DEFM "F"
 $7ECE DEFB $CA
 $7ECF DEFB $0C
 $7ED0 DEFM "FIDDLE DEE DEE, TIME FOR TEA"
 $7EEC DEFB $B1
 $7EED DEFB $04
 $7EEE DEFM "AFTERNOON TEA BREAK"
 $7F01 DEFB $FF

; Room block data : Asteroids
;
; #CALL:print_block_data(#PC, asteroids)
b$7F02 DEFB $FE,$42,$FB,$BC,$D7,$00,$01,$C6
 $7F0A DEFB $01,$02,$03,$DC,$FF,$00,$01,$C6
 $7F12 DEFB $01,$02,$03,$FF

; Room block data : Hole opening for chase
;
; Used by the routine at #R$EFC7.
;
; .
;
; This block data is simply four empty spaces.
b$7F16 DEFB $FB,$DC,$DF,$FE,$46,$FD,$04,$20
 $7F1E DEFB $FF

; Location text
;
; Used by the routine at #R$BA6E.
t$7F1F DEFM "THE TOWN SQUARE"
 $7F2E DEFB $FF
 $7F2F DEFM "STAMP STREET"
 $7F3B DEFB $FF
 $7F3C DEFM "THE POST OFFICE"
 $7F4B DEFB $FF
 $7F4C DEFM "MARKET STREET"
 $7F59 DEFB $FF
 $7F5A DEFM "THE SUPER MARKET"
 $7F6A DEFB $FF
 $7F6B DEFM "THE PARK"
 $7F73 DEFB $FF
 $7F74 DEFM "WOBBLY WALK"
 $7F7F DEFB $FF
 $7F80 DEFM "RUBBLE ROAD"
 $7F8B DEFB $FF
 $7F8C DEFM "WALL STREET"
 $7F97 DEFB $FF
 $7F98 DEFM "PETE STREET"
 $7FA3 DEFB $FF
 $7FA4 DEFM "THE WORK SHED"
 $7FB1 DEFB $FF
 $7FB2 DEFM "SCHOOL LANE"
 $7FBD DEFB $FF
 $7FBE DEFM "THE SCHOOL"
 $7FC8 DEFB $FF
 $7FC9 DEFM "BAKER STREET"
 $7FD5 DEFB $FF
 $7FD6 DEFM "THE BAKERS"
 $7FE0 DEFB $FF
 $7FE1 DEFM "THE PUB"
 $7FE8 DEFB $FF
 $7FE9 DEFM "MOTOR WAY"
 $7FF2 DEFB $FF
 $7FF3 DEFM "THE LABORATORY"
 $8001 DEFB $FF
 $8002 DEFM "THE GARAGE"
 $800C DEFB $FF
 $800D DEFM "REFERENCE ROAD"
 $801B DEFB $FF
 $801C DEFM "THE LIBRARY"
 $8027 DEFB $FF
 $8028 DEFM "PENNY LANE"
 $8032 DEFB $FF
 $8033 DEFM "THE BANK"
 $803B DEFB $FF
 $803C DEFM "WALLY'S HOUSE"
 $8049 DEFB $FF
 $804A DEFM "MEAT STREET"
 $8055 DEFB $FF
 $8056 DEFM "THE BUTCHERS"
 $8062 DEFB $FF
 $8063 DEFM "TRUNK ROAD"
 $806D DEFB $FF
 $806E DEFM "THE ZOO"
 $8075 DEFB $FF
 $8076 DEFM "RAIL ROAD"
 $807F DEFB $FF
 $8080 DEFM "THE STATION"
 $808B DEFB $FF
 $808C DEFM "THE DOCKS"
 $8095 DEFB $FF
 $8096 DEFM "THE SEWER"
 $809F DEFB $FF
 $80A0 DEFM "THE CAVE"
 $80A8 DEFB $FF

; Positions of the lightning bolts in the "asteroids" game
;
; Used by the routines at #R$EDF7, #R$F8B9, #R$F9F5 and #R$FAF0.
;
; .
; 
; The format is:
; #TABLE( default, center )
; { =h Byte | =h Description }
; { 0 | x co-ordinate, or #N$FF for no lightning here }
; { 1 | y co-ordinate }
; { 2 | change in X (may be negative) }
; { 3 | change in Y (may be negative) }
; { 4 | object ID to draw with }
; TABLE#
g$80A9 DEFB $FF,$00,$00,$00,$00
 $80AE DEFB $FF,$00,$00,$00,$00
 $80B3 DEFB $FF,$00,$00,$00,$00
 $80B8 DEFB $FF,$00,$00,$00,$00
 $80BD DEFB $FF,$00,$00,$00,$00
 $80C2 DEFB $FF,$00,$00,$00,$00
 $80C7 DEFB $FF,$00,$00,$00,$00
 $80CC DEFB $FF,$00,$00,$00,$00
 $80D1 DEFB $FF,$00,$00,$00,$00
 $80D6 DEFB $FF,$00,$00,$00,$00
 $80DB DEFB $FF,$00,$00,$00,$00
 $80E0 DEFB $FF,$00,$00,$00,$00

; Show title screen
;
; Used by the routines at #R$8155 and #R$8184.
;
; .
;
; The routine returns when the user starts a game.
c$80E5 CALL $B8ED    ; Clear the screen.
 $80E8 CALL $B471    ; Initialize the theme tune data.
*$80EB LD HL,$7DC6   ; { Print the title page text. (#R$7DC6)
 $80EE LD DE,$0003   ;
 $80F1 CALL $B8C4    ; }
 $80F4 LD HL,$7E37   ; Point #REGhl at the "key" text. (#R$7E37)
 $80F7 LD A,($B2DB)  ; { Put the current control mechanism (#R$B2DB) in #REGb.
 $80FA LD B,A        ; }
 $80FB LD A,$02      ; { Convert this to a location on screen
 $80FD SUB B         ; and put it in #REGde.
 $80FE LD B,A        ;
 $80FF ADD A,A       ;
 $8100 ADD A,A       ;
 $8101 ADD A,A       ;
 $8102 SUB B         ;
 $8103 LD D,A        ;
 $8104 LD E,$03      ; }
 $8106 CALL $B8C4    ; Print a marker against the selected option.
*$8109 LD A,$FF      ; { Set to no key pressed.
 $810B LD ($B4E9),A  ; }
 $810E CALL $B482    ; Play the next note of the theme tune.
 $8111 LD A,($B55F)  ; { Is the tune still playing?
 $8114 OR A          ; }
 $8115 JR NZ,$8155   ; If not, start demo mode.
 $8117 LD A,($B4E9)  ; Get the last key pressed.
 $811A BIT 0,A       ; Was '1' pressed?
 $811C JR NZ,$8123   ; Jump forward if not.
 $811E CALL $B2DC    ; { Select Sinclair control and continue playing the tune.
 $8121 JR $80EB      ; }
*$8123 BIT 1,A       ; Was '2' pressed?
 $8125 JR NZ,$812C   ; Jump forward if not.
 $8127 CALL $B2E2    ; { Select Kempston control and continue playing the tune.
 $812A JR $80EB      ; }
*$812C BIT 2,A       ; Was '3' pressed?
 $812E JR NZ,$8135   ; Jump forward if not.
 $8130 CALL $B2E8    ; { Select Keyboard control and continue playing the tune.
 $8133 JR $80EB      ; }
*$8135 BIT 3,A       ; Was '4' pressed?
 $8137 JR NZ,$8109   ; Jump back if not to continue playing the tune.
 $8139 RET           ; Otherwise return to start the game.

; The current room showing in demo mode.
g$813A DEFB $00

; Set up initial game data
;
; Used by the routines at #R$8155 and #R$8184.
c$813B CALL $B952    ; Draw the room.
 $813E LD BC,$0014   ; Number of entries to update.
*$8141 PUSH BC       ; Store #REGbc.
 $8142 CALL $EEA2    ; Initialize the sprite buffers
 $8145 CALL $F578    ; Draw the fountain.
 $8148 CALL $B9D6    ; Update character positions.
 $814B CALL $B9FB    ; Put sprites on screen.
 $814E POP BC        ; Restore #REGbc.
 $814F DEC BC        ; { Loop until all entries are refreshed.
 $8150 LD A,B        ;
 $8151 OR C          ;
 $8152 JR NZ,$8141   ; 
 $8154 RET           ; }

; Demo mode
;
; Used by the routine at #R$80E5.
c$8155 CALL $BAD8    ; Initialize character data.
 $8158 CALL $B8ED    ; Clear the screen.
 $815B CALL $E3FD    ; Refresh the status bar.
 $815E CALL $813B    ; Set up initial data.
 $8161 LD ($813A),A  ; Set the current room (#R$813A) to 0 (set up by the previous routine)
; The main loop of the demo mode begins here.
*$8164 LD A,($813A)  ; Get the current room in demo mode.
 $8167 CP (IY+$0F)   ; Is is the current room for the current character?
 $816A JR Z,$8175    ; Jump forward if it is.
 $816C LD A,(IY+$0F) ; { Otherwise copy the current room to the demo mode room flag.
 $816F LD ($813A),A  ; }
 $8172 CALL $B952    ; Draw the room.
*$8175 CALL $81AE    ; Move everything on screen.
 $8178 XOR A         ; { Read all keys.
 $8179 IN A,($FE)    ; }
 $817B OR $E0        ; Set bits 5-7 as the hardware doesn't read those.
 $817D CP $FF        ; Was any key pressed?
 $817F JP NZ,$80E5   ; No, so carry on in demo mode.
 $8182 JR $8164      ; Otherwise loop back round and continue.

; Main entry point
;
; Used by the routines at #R$B3C3 and #R$B451.
c$8184 DI            ; Disable interrupts.
 $8185 LD SP,$FC00   ; Put the stack somewhere safe.
 $8188 CALL $80E5    ; Show the title screen.
; The game is now ready to start.
 $818B CALL $BAD8    ; Initialize character data
 $818E CALL $E3FD    ; Refresh the status bar.
 $8191 CALL $813B    ; Set up initial game data.
; This entry point is used by the routine at #R$EDF7.
*$8194 CALL $EB55    ; See if any collectable items are being touched.
 $8197 CALL $EABF    ; Process logic for this room.
 $819A CALL $AC06    ; Check to see if a new room is entered.
 $819D CALL $E79B    ; Check for changing a character.
 $81A0 CALL $B09F    ; Check for user input.
 $81A3 CALL $81AE    ; Update the screen.
 $81A6 CALL $81C4    ; Check for pause.
 $81A9 CALL $ED2A    ; Display a break screen if necessary.
 $81AC JR $8194      ; Loop back and do it again.

; Move everything on screen
;
; Used by the routines at #R$8155, #R$8184 and #R$EFC7.
c$81AE CALL $BAB4    ; Update the "{character} is in {room}" tick count, if any.
 $81B1 CALL $A92C    ; Move the computer controlled characters.
 $81B4 CALL $EEC1    ; Refresh the current room.
 $81B7 CALL $F10E    ; Move the jumping jack.
 $81BA CALL $F814    ; Display any food.
 $81BD CALL $F277    ; Move Herbert.
 $81C0 CALL $B9D6    ; Update and draw characters.
 $81C3 RET           ; Return.

; Check for the pause key
;
; If CAPS + SPACE is held down, loop until it is released.
c$81C4 LD A,$FE      ; { Read CAPS - V on the keyboard.
 $81C6 IN A,($FE)    ; }
 $81C8 LD B,A        ; Put this in B.
 $81C9 LD A,$7F      ; { Read SPACE - B on the keyboard.
 $81CB IN A,($FE)    ; }
 $81CD OR B          ; Merge the two key presses together.
 $81CE BIT 0,A       ; Did both have the first key pressed? (ie: CAPS + SPACE )
 $81D0 RET NZ        ; Return if not.
 $81D1 JP $81C4      ; Otherwise loop back and wait until the keys are released.

; Change direction
;
; Used by the routines at #R$B1A6, #R$B288 and #R$EFC7.
;
; IY Current character pointer (#R$BC67 - #N$BC6B)
c$81D4 EXX           ; Exchange all registers.
 $81D5 XOR $01       ; Invert bit 1.
 $81D7 LD (IY-$3C),A ; Set this for this character
 $81DA LD E,(IY+$23) ; { Put the graphic ID in #REGde.
 $81DD LD D,(IY+$28) ; }
 $81E0 LD BC,$0400   ; Copy #N$400 bytes (size of all frames).
                     ; Control passes to #R$81E3.

; Change a sprite to the reverse direction
;
; Used by the routine at #R$F047.
;
; DE The address of the graphic
; BC The size of the data to copy
;
; The buffer at #R$7B00 has lookup entries that allow fast reversal
; of graphic data without having to recalculate it by hand.
c$81E3 LD A,(DE)     ; Get the first byte.
 $81E4 EX AF,AF'     ; Swap #REGa for the shadow copy.
 $81E5 INC DE        ; { Put the second byte in #REGa.
 $81E6 LD A,(DE)     ; 
 $81E7 DEC DE        ; }
 $81E8 LD L,A        ; { Set the index to copy from the buffer.
 $81E9 LD H,$7B      ; }
 $81EB LDI           ; Do the copy.
 $81ED EX AF,AF'     ; Swap #REGa for the other instance.
 $81EE LD H,$7B      ; { Set the index to copy from the buffer.
 $81F0 LD L,A        ; }
 $81F1 LDI           ; Do the copy.
 $81F3 JP PE,$81E3   ; Loop while there is more to do.
 $81F6 EXX           ; { Swap all main registers and return.
 $81F7 RET           ; }

; Screen offset table
;
; Used by the routines at #R$B715, #R$B77B, #R$B7BA, #R$B931 and #R$E77A.
;
; .
;
; This buffer holds the various locations on screen where each line of text should go
;
; .
;
; Status bar
w$81F8 DEFW $4000
 $81FA DEFW $4100
 $81FC DEFW $4200
 $81FE DEFW $4300
 $8200 DEFW $4400
 $8202 DEFW $4500
 $8204 DEFW $4600
 $8206 DEFW $4700
 $8208 DEFW $4020
 $820A DEFW $4120
 $820C DEFW $4220
 $820E DEFW $4320
 $8210 DEFW $4420
 $8212 DEFW $4520
 $8214 DEFW $4620
 $8216 DEFW $4720
 $8218 DEFW $4040
 $821A DEFW $4140
 $821C DEFW $4240
 $821E DEFW $4340
 $8220 DEFW $4440
 $8222 DEFW $4540
 $8224 DEFW $4640
 $8226 DEFW $4740
 $8228 DEFW $4060
 $822A DEFW $4160
 $822C DEFW $4260
 $822E DEFW $4360
 $8230 DEFW $4460
 $8232 DEFW $4560
 $8234 DEFW $4660
 $8236 DEFW $4760
 $8238 DEFW $4080
 $823A DEFW $4180
 $823C DEFW $4280
 $823E DEFW $4380
 $8240 DEFW $4480
 $8242 DEFW $4580
 $8244 DEFW $4680
 $8246 DEFW $4780
; Separator bar between status and main screen
*$8248 DEFW $40A0
 $824A DEFW $41A0
 $824C DEFW $42A0
 $824E DEFW $43A0
 $8250 DEFW $44A0
 $8252 DEFW $45A0
 $8254 DEFW $46A0
 $8256 DEFW $47A0
 $8258 DEFW $40C0
 $825A DEFW $41C0
 $825C DEFW $42C0
 $825E DEFW $43C0
 $8260 DEFW $44C0
 $8262 DEFW $45C0
 $8264 DEFW $46C0
 $8266 DEFW $47C0
 $8268 DEFW $40E0
 $826A DEFW $41E0
 $826C DEFW $42E0
 $826E DEFW $43E0
 $8270 DEFW $44E0
 $8272 DEFW $45E0
 $8274 DEFW $46E0
 $8276 DEFW $47E0
; Main screen
*$8278 DEFW $4800
 $827A DEFW $4900
 $827C DEFW $4A00
 $827E DEFW $4B00
 $8280 DEFW $4C00
 $8282 DEFW $4D00
 $8284 DEFW $4E00
 $8286 DEFW $4F00
 $8288 DEFW $4820
 $828A DEFW $4920
 $828C DEFW $4A20
 $828E DEFW $4B20
 $8290 DEFW $4C20
 $8292 DEFW $4D20
 $8294 DEFW $4E20
 $8296 DEFW $4F20
 $8298 DEFW $4840
 $829A DEFW $4940
 $829C DEFW $4A40
 $829E DEFW $4B40
 $82A0 DEFW $4C40
 $82A2 DEFW $4D40
 $82A4 DEFW $4E40
 $82A6 DEFW $4F40
 $82A8 DEFW $4860
 $82AA DEFW $4960
 $82AC DEFW $4A60
 $82AE DEFW $4B60
 $82B0 DEFW $4C60
 $82B2 DEFW $4D60
 $82B4 DEFW $4E60
 $82B6 DEFW $4F60
 $82B8 DEFW $4880
 $82BA DEFW $4980
 $82BC DEFW $4A80
 $82BE DEFW $4B80
 $82C0 DEFW $4C80
 $82C2 DEFW $4D80
 $82C4 DEFW $4E80
 $82C6 DEFW $4F80
 $82C8 DEFW $48A0
 $82CA DEFW $49A0
 $82CC DEFW $4AA0
 $82CE DEFW $4BA0
 $82D0 DEFW $4CA0
 $82D2 DEFW $4DA0
 $82D4 DEFW $4EA0
 $82D6 DEFW $4FA0
 $82D8 DEFW $48C0
 $82DA DEFW $49C0
 $82DC DEFW $4AC0
 $82DE DEFW $4BC0
 $82E0 DEFW $4CC0
 $82E2 DEFW $4DC0
 $82E4 DEFW $4EC0
 $82E6 DEFW $4FC0
 $82E8 DEFW $48E0
 $82EA DEFW $49E0
 $82EC DEFW $4AE0
 $82EE DEFW $4BE0
 $82F0 DEFW $4CE0
 $82F2 DEFW $4DE0
 $82F4 DEFW $4EE0
 $82F6 DEFW $4FE0
 $82F8 DEFW $5000
 $82FA DEFW $5100
 $82FC DEFW $5200
 $82FE DEFW $5300
 $8300 DEFW $5400
 $8302 DEFW $5500
 $8304 DEFW $5600
 $8306 DEFW $5700
 $8308 DEFW $5020
 $830A DEFW $5120
 $830C DEFW $5220
 $830E DEFW $5320
 $8310 DEFW $5420
 $8312 DEFW $5520
 $8314 DEFW $5620
 $8316 DEFW $5720
 $8318 DEFW $5040
 $831A DEFW $5140
 $831C DEFW $5240
 $831E DEFW $5340
 $8320 DEFW $5440
 $8322 DEFW $5540
 $8324 DEFW $5640
 $8326 DEFW $5740
 $8328 DEFW $5060
 $832A DEFW $5160
 $832C DEFW $5260
 $832E DEFW $5360
 $8330 DEFW $5460
 $8332 DEFW $5560
 $8334 DEFW $5660
 $8336 DEFW $5760
 $8338 DEFW $5080
 $833A DEFW $5180
 $833C DEFW $5280
 $833E DEFW $5380
 $8340 DEFW $5480
 $8342 DEFW $5580
 $8344 DEFW $5680
 $8346 DEFW $5780
 $8348 DEFW $50A0
 $834A DEFW $51A0
 $834C DEFW $52A0
 $834E DEFW $53A0
 $8350 DEFW $54A0
 $8352 DEFW $55A0
 $8354 DEFW $56A0
 $8356 DEFW $57A0
 $8358 DEFW $50C0
 $835A DEFW $51C0
 $835C DEFW $52C0
 $835E DEFW $53C0
 $8360 DEFW $54C0
 $8362 DEFW $55C0
 $8364 DEFW $56C0
 $8366 DEFW $57C0
 $8368 DEFW $50E0
 $836A DEFW $51E0
 $836C DEFW $52E0
 $836E DEFW $53E0
 $8370 DEFW $54E0
 $8372 DEFW $55E0
 $8374 DEFW $56E0
 $8376 DEFW $57E0

; Object 00 - The plunger
;
; #OBJECTGFX(#PC)(object00)
b$8378 DEFB $01,$80,$01,$80,$01,$80,$01,$80
 $8380 DEFB $01,$80,$01,$80,$01,$80,$01,$80
 $8388 DEFB $01,$80,$01,$80,$00,$00,$03,$C0
 $8390 DEFB $0D,$F0,$13,$F8,$17,$F8,$3F,$FC

; Object 01 - The letter A
;
; #OBJECTGFX(#PC)(object01)
b$8398 DEFB $03,$C0,$03,$C0,$03,$C0,$07,$E0
 $83A0 DEFB $06,$60,$06,$60,$0E,$70,$0C,$30
 $83A8 DEFB $0C,$30,$1C,$38,$1F,$F8,$1F,$F8
 $83B0 DEFB $38,$1C,$30,$0C,$78,$1E,$FC,$3F

; Object 02 - Book 2
;
; #OBJECTGFX(#PC)(object02)
b$83B8 DEFB $6F,$EF,$6F,$F7,$2F,$FB,$2F,$FD
 $83C0 DEFB $6E,$1E,$6C,$CF,$2F,$CF,$6F,$9F
 $83C8 DEFB $6F,$3F,$6E,$7F,$6C,$FF,$2C,$0E
 $83D0 DEFB $2F,$FD,$2F,$FB,$6F,$F7,$6F,$EF

; Object 03 - The sand
;
; #OBJECTGFX(#PC)(object03)
b$83D8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $83E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $83E8 DEFB $00,$00,$03,$00,$06,$80,$0D,$40
 $83F0 DEFB $1A,$A0,$3D,$50,$7A,$A8,$FD,$54

; Object 04 - The battery
;
; #OBJECTGFX(#PC)(object04)
b$83F8 DEFB $00,$00,$38,$1C,$39,$9C,$00,$00
 $8400 DEFB $BF,$FF,$BF,$FF,$00,$00,$7F,$FE
 $8408 DEFB $7D,$BE,$6F,$FE,$45,$A2,$6F,$FE
 $8410 DEFB $7D,$BE,$7F,$FE,$7D,$BE,$00,$00

; Object 05 - The letter K
;
; #OBJECTGFX(#PC)(object05)
b$8418 DEFB $7E,$7E,$3C,$38,$18,$70,$18,$E0
 $8420 DEFB $19,$C0,$1B,$80,$1F,$00,$1E,$00
 $8428 DEFB $1F,$00,$1B,$80,$19,$C0,$18,$E0
 $8430 DEFB $18,$70,$18,$38,$3C,$1C,$7E,$3F

; Object 06 - The cement
;
; #OBJECTGFX(#PC)(object06)
b$8438 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $8440 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $8448 DEFB $00,$00,$00,$E0,$03,$10,$04,$E8
 $8450 DEFB $0E,$D4,$17,$2A,$29,$F6,$76,$8D

; Object 07 - Book 3
;
; #OBJECTGFX(#PC)(object07)
b$8458 DEFB $6F,$EF,$6F,$F7,$2F,$FB,$2F,$FD
 $8460 DEFB $6E,$1E,$6C,$CF,$2F,$CF,$6F,$CF
 $8468 DEFB $6F,$1F,$6F,$CF,$6F,$CF,$2C,$CE
 $8470 DEFB $2E,$1D,$2F,$FB,$6F,$F7,$6F,$EF

; Object 08 - The trowel
;
; #OBJECTGFX(#PC)(object08)
b$8478 DEFB $00,$80,$00,$80,$01,$40,$01,$40
 $8480 DEFB $02,$E0,$02,$E0,$05,$F0,$05,$F0
 $8488 DEFB $0B,$78,$04,$B0,$02,$A0,$00,$80
 $8490 DEFB $01,$C0,$01,$C0,$01,$C0,$01,$C0

; Object 09 - The matches
;
; #OBJECTGFX(#PC)(object09)
b$8498 DEFB $1F,$FC,$10,$04,$15,$54,$15,$54
 $84A0 DEFB $15,$54,$10,$04,$1F,$FC,$18,$0C
 $84A8 DEFB $17,$F4,$17,$74,$16,$34,$16,$B4
 $84B0 DEFB $16,$B4,$17,$74,$18,$0C,$1F,$FC

; Object 0A - The cracked insulator
;
; #OBJECTGFX(#PC)(object0A)
b$84B8 DEFB $00,$00,$00,$00,$41,$04,$E3,$8E
 $84C0 DEFB $E3,$8A,$F3,$C7,$FB,$EF,$FB,$EF
 $84C8 DEFB $C1,$EF,$98,$E9,$32,$47,$63,$8E
 $84D0 DEFB $E3,$8E,$41,$04,$00,$00,$00,$00

; Object 0B - Book 1
;
; #OBJECTGFX(#PC)(object0B)
b$84D8 DEFB $6F,$EF,$6F,$F7,$2F,$FB,$2F,$FD
 $84E0 DEFB $6F,$9E,$6F,$1F,$2F,$9F,$6F,$9F
 $84E8 DEFB $6F,$9F,$6F,$9F,$6F,$9F,$2F,$0E
 $84F0 DEFB $2F,$FD,$2F,$FB,$6F,$F7,$6F,$EF

; Object 0C - The monkey nuts
;
; #OBJECTGFX(#PC)(object0C)
b$84F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $8500 DEFB $00,$00,$1C,$E0,$3F,$F0,$1C,$E2
 $8508 DEFB $00,$07,$0E,$E7,$1F,$F7,$0E,$E2
 $8510 DEFB $00,$07,$1D,$C7,$3F,$E7,$1D,$C2
 
; Object 0D - The money
;
; #OBJECTGFX(#PC)(object0D)
b$8518 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $8520 DEFB $00,$00,$FF,$FF,$FF,$D5,$FF,$85
 $8528 DEFB $DD,$D3,$A9,$83,$BD,$C3,$9D,$D7
 $8530 DEFB $BD,$B3,$88,$83,$FF,$FF,$00,$00

; Object 0E - Superglue
;
; #OBJECTGFX(#PC)(object0E)
b$8538 DEFB $00,$80,$00,$80,$00,$80,$00,$00
 $8540 DEFB $01,$C0,$01,$C0,$00,$00,$07,$F0
 $8548 DEFB $06,$30,$04,$90,$04,$F0,$06,$30
 $8550 DEFB $07,$90,$04,$90,$06,$30,$07,$F0

; Object 0F - Chewing gum
;
; #OBJECTGFX(#PC)(object0F)
b$8558 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $8560 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $8568 DEFB $FF,$DF,$FD,$C0,$FE,$D8,$80,$40
 $8570 DEFB $FE,$D8,$FD,$C0,$FF,$D8,$00,$00

; Object 10 - The bucket
;
; #OBJECTGFX(#PC)(object10)
b$8578 DEFB $00,$00,$5F,$FE,$5F,$FE,$00,$00
 $8580 DEFB $2B,$7C,$2B,$7C,$2C,$7C,$2E,$3C
 $8588 DEFB $17,$18,$17,$88,$17,$C0,$17,$E6
 $8590 DEFB $17,$F6,$00,$00,$17,$F8,$17,$F8

; Object 11 - The jump leads
;
; #OBJECTGFX(#PC)(object11)
b$8598 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $85A0 DEFB $00,$00,$00,$00,$03,$00,$44,$9C
 $85A8 DEFB $64,$A2,$38,$02,$FB,$FC,$00,$00
 $85B0 DEFB $44,$AC,$74,$A2,$18,$A2,$FB,$1C

; Object 12 - The bunsen burner
;
; #OBJECTGFX(#PC)(object12)
b$85B8 DEFB $00,$E0,$00,$A0,$00,$A0,$00,$A0
 $85C0 DEFB $00,$A0,$00,$A0,$00,$A0,$00,$E0
 $85C8 DEFB $00,$00,$00,$E0,$0E,$C0,$3E,$E0
 $85D0 DEFB $70,$00,$63,$F8,$C4,$FC,$D9,$FF

; Object 13 - The letter B
;
; #OBJECTGFX(#PC)(object13)
b$85D8 DEFB $7F,$F0,$3F,$F8,$18,$1C,$18,$0C
 $85E0 DEFB $18,$0C,$18,$0C,$18,$1C,$1F,$F8
 $85E8 DEFB $1F,$FC,$18,$0E,$18,$06,$18,$06
 $85F0 DEFB $18,$06,$18,$0E,$3F,$FC,$7F,$F8

; Object 14 - The gas mask
;
; #OBJECTGFX(#PC)(object14)
b$85F8 DEFB $00,$00,$00,$00,$00,$00,$1C,$1C
 $8600 DEFB $22,$22,$5D,$5D,$5D,$5D,$5D,$5D
 $8608 DEFB $2E,$3A,$2D,$DA,$53,$65,$56,$B5
 $8610 DEFB $05,$50,$06,$B0,$03,$60,$01,$C0

; Object 15 - The parcel
;
; #OBJECTGFX(#PC)(object15)
b$8618 DEFB $01,$40,$03,$60,$07,$F0,$01,$80
 $8620 DEFB $FE,$7F,$FE,$7F,$82,$41,$7E,$7E
 $8628 DEFB $AA,$55,$D6,$6B,$AA,$55,$01,$00
 $8630 DEFB $00,$80,$AA,$55,$D6,$6B,$FE,$7F

; Object 16 - The fuse
;
; #OBJECTGFX(#PC)(object16)
b$8638 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $8640 DEFB $00,$00,$00,$00,$00,$00,$E0,$07
 $8648 DEFB $0F,$F0,$E0,$07,$EF,$F7,$EF,$F7
 $8650 DEFB $E0,$07,$00,$00,$00,$00,$00,$00

; Object 17 - The meat
;
; #OBJECTGFX(#PC)(object17)
b$8658 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $8660 DEFB $00,$38,$1C,$C4,$23,$3A,$5C,$FD
 $8668 DEFB $5F,$FD,$B3,$FD,$B3,$FA,$BF,$F2
 $8670 DEFB $5F,$0C,$20,$F0,$1F,$00,$00,$00

; Object 18 - The monkey wrench
;
; #OBJECTGFX(#PC)(object18)
b$8678 DEFB $3F,$E0,$3F,$E0,$2A,$E0,$00,$E0
 $8680 DEFB $00,$E0,$2A,$00,$3F,$F0,$1F,$10
 $8688 DEFB $07,$B0,$03,$10,$03,$F0,$01,$F0
 $8690 DEFB $01,$F0,$00,$00,$00,$E0,$00,$E0

; Object 19 - Screwdriver
;
; #OBJECTGFX(#PC)(object19)
b$8698 DEFB $00,$00,$00,$02,$00,$07,$00,$06
 $86A0 DEFB $00,$08,$00,$30,$00,$70,$00,$E0
 $86A8 DEFB $07,$C0,$0A,$80,$14,$80,$29,$00
 $86B0 DEFB $52,$00,$74,$00,$58,$00,$30,$00

; Object 1A - The letter E
;
; #OBJECTGFX(#PC)(object1A)
b$86B8 DEFB $7F,$FE,$3F,$FE,$18,$06,$18,$02
 $86C0 DEFB $18,$00,$18,$20,$18,$60,$1F,$E0
 $86C8 DEFB $1F,$E0,$18,$60,$18,$20,$18,$00
 $86D0 DEFB $18,$02,$18,$06,$3F,$FE,$7F,$FE

; Object 1B - The hook
;
; #OBJECTGFX(#PC)(object1B)
b$86D8 DEFB $03,$C0,$00,$00,$01,$80,$01,$80
 $86E0 DEFB $01,$C0,$00,$E0,$00,$70,$08,$30
 $86E8 DEFB $18,$30,$18,$30,$1C,$70,$0F,$E0
 $86F0 DEFB $03,$80,$00,$00,$00,$00,$00,$00

; Object 1C - The patch
;
; #OBJECTGFX(#PC)(object1C)
b$86F8 DEFB $07,$C0,$1F,$F0,$3F,$F8,$7F,$FC
 $8700 DEFB $7D,$7C,$FA,$BE,$F5,$5E,$FA,$BE
 $8708 DEFB $F5,$5E,$FA,$BE,$7D,$7C,$7F,$FC
 $8710 DEFB $3F,$F8,$1F,$F0,$07,$C0,$00,$00

; Object 1D - The pipe
;
; #OBJECTGFX(#PC)(object1D)
b$8718 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $8720 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $8728 DEFB $00,$00,$7F,$F6,$80,$09,$FF,$E9
 $8730 DEFB $FF,$E9,$7F,$F6,$00,$00,$00,$00

; Object 1E - The letter R
;
; #OBJECTGFX(#PC)(object1E)
b$8738 DEFB $7F,$F0,$3F,$F8,$18,$1C,$18,$0C
 $8740 DEFB $18,$0C,$18,$0C,$18,$1C,$1F,$F8
 $8748 DEFB $1F,$F0,$18,$60,$18,$70,$18,$30
 $8750 DEFB $18,$38,$18,$18,$3C,$1C,$7E,$3F

; Object 1F - The oil can
;
; #OBJECTGFX(#PC)(object1F)
b$8758 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $8760 DEFB $00,$00,$00,$00,$00,$00,$78,$03
 $8768 DEFB $08,$0C,$3C,$30,$01,$E0,$DD,$80
 $8770 DEFB $BD,$00,$BE,$00,$BE,$00,$DE,$00

; Object 20 - The fuse wire
;
; #OBJECTGFX(#PC)(object20)
b$8778 DEFB $00,$00,$3F,$FC,$7F,$FE,$7F,$FE
 $8780 DEFB $3F,$FC,$20,$04,$1F,$F8,$20,$04
 $8788 DEFB $1F,$F8,$20,$04,$1F,$F8,$20,$04
 $8790 DEFB $1F,$F8,$7F,$FE,$7F,$FE,$3F,$FC

; Object 21 - The good insulator
;
; #OBJECTGFX(#PC)(object21)
b$8798 DEFB $00,$00,$00,$00,$41,$04,$E3,$8E
 $87A0 DEFB $E3,$8E,$F3,$CF,$FB,$EF,$FB,$EF
 $87A8 DEFB $FB,$EF,$FB,$EF,$F3,$CF,$E3,$8E
 $87B0 DEFB $E3,$8E,$41,$04,$00,$00,$00,$00

; Object 22 - The bottle
;
; #OBJECTGFX(#PC)(object22)
b$87B8 DEFB $01,$C0,$01,$C0,$00,$00,$01,$40
 $87C0 DEFB $01,$40,$01,$40,$02,$E0,$05,$F0
 $87C8 DEFB $05,$70,$05,$00,$05,$70,$05,$50
 $87D0 DEFB $05,$60,$05,$70,$05,$80,$07,$F0

; Object 23 - The red herring
;
; #OBJECTGFX(#PC)(object23)
b$87D8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $87E0 DEFB $00,$00,$00,$00,$00,$00,$0F,$80
 $87E8 DEFB $3F,$C1,$7F,$F3,$5E,$7E,$FD,$BE
 $87F0 DEFB $EF,$7E,$67,$F3,$1F,$81,$00,$00

; Object 24 - The test tube
;
; #OBJECTGFX(#PC)(object24)
b$87F8 DEFB $00,$00,$04,$10,$02,$20,$02,$20
 $8800 DEFB $02,$20,$02,$20,$03,$E0,$02,$E0
 $8808 DEFB $02,$E0,$02,$E0,$02,$E0,$02,$E0
 $8810 DEFB $02,$E0,$02,$E0,$02,$20,$01,$C0

; Object 25 - The can of beans
;
; #OBJECTGFX(#PC)(object25)
b$8818 DEFB $17,$FC,$00,$00,$17,$FC,$17,$FC
 $8820 DEFB $17,$00,$16,$FC,$16,$C4,$16,$D8
 $8828 DEFB $16,$C4,$16,$D8,$16,$C4,$16,$FC
 $8830 DEFB $17,$00,$17,$FC,$00,$00,$17,$FC

; Object 26 - The rubber stamp
;
; #OBJECTGFX(#PC)(object26)
b$8838 DEFB $00,$00,$01,$80,$02,$C0,$02,$C0
 $8840 DEFB $05,$E0,$05,$E0,$02,$C0,$02,$C0
 $8848 DEFB $02,$C0,$01,$80,$01,$80,$03,$C0
 $8850 DEFB $1F,$F8,$00,$00,$1F,$F8,$00,$00

; Object 27 - The pliers
;
; #OBJECTGFX(#PC)(object27)
b$8858 DEFB $01,$40,$01,$40,$01,$40,$03,$60
 $8860 DEFB $03,$60,$03,$60,$03,$A0,$01,$40
 $8868 DEFB $00,$C0,$03,$60,$02,$20,$06,$30
 $8870 DEFB $06,$30,$06,$30,$06,$30,$04,$10

; Object 28 - The whistle
;
; #OBJECTGFX(#PC)(object28)
b$8878 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $8880 DEFB $00,$00,$00,$00,$00,$00,$67,$F0
 $8888 DEFB $7F,$FC,$00,$5E,$00,$BE,$01,$7F
 $8890 DEFB $01,$7E,$00,$BE,$00,$7C,$00,$10

; Object 29 - 2A - Beer mug
;
; #OBJECTGFXM(#PC)(object29)
b$8898 DEFB $80,$03,$00,$00,$80,$03,$3F,$F8
 $88A0 DEFB $80,$03,$15,$50,$C0,$03,$17,$80
 $88A8 DEFB $C0,$01,$0B,$78,$E0,$01,$0B,$7C
 $88B0 DEFB $E0,$01,$0B,$8C,$E0,$01,$0B,$EC
 $88B8 DEFB $E0,$01,$0B,$EC,$C0,$01,$0B,$EC
 $88C0 DEFB $C0,$01,$17,$9C,$C0,$01,$17,$78
 $88C8 DEFB $80,$03,$17,$60,$80,$03,$35,$90
 $88D0 DEFB $80,$03,$3F,$F8,$80,$03,$00,$00

; Object 2B - Fork lift
;
; #OBJECTGFX(#PC)(object2b)
b$88D8 DEFB $00,$00,$00,$00,$C0,$00,$C0,$00
 $88E0 DEFB $40,$00,$40,$00,$C0,$00,$C0,$00
 $88E8 DEFB $C0,$00,$40,$00,$40,$00,$C0,$00
 $88F0 DEFB $C0,$00,$E0,$00,$E7,$F8,$7B,$FF

; Object 2C - 2D / 2E - 2F / 30 - 31 - Shark
;
; #OBJECTGFXM(#PC)(object2c)
b$88F8 DEFB $E0,$00,$0F,$FE,$E0,$00,$0F,$E6
 $8900 DEFB $E0,$00,$07,$E2,$F0,$08,$07,$C0
 $8908 DEFB $F0,$1F,$07,$C0,$F0,$1F,$03,$C0
 $8910 DEFB $F8,$1F,$03,$C0,$F8,$1F,$03,$C0
 $8918 DEFB $F8,$1F,$03,$C0,$F0,$0F,$03,$C0
 $8920 DEFB $F0,$0F,$07,$E0,$E0,$0F,$07,$60
 $8928 DEFB $C0,$07,$0E,$E0,$80,$07,$1E,$70
 $8930 DEFB $00,$03,$38,$30,$03,$83,$60,$18
; #OBJECTGFXM(#PC)(object2e)
*$8938 DEFB $E0,$00,$0F,$FE,$E0,$00,$0F,$EE
 $8940 DEFB $E0,$00,$07,$C6,$F0,$10,$07,$C2
 $8948 DEFB $F0,$18,$07,$C0,$F0,$1F,$07,$C0
 $8950 DEFB $F0,$1F,$03,$C0,$F8,$0F,$03,$C0
 $8958 DEFB $F8,$0F,$03,$E0,$F8,$0F,$03,$E0
 $8960 DEFB $F0,$0F,$02,$E0,$F0,$07,$06,$E0
 $8968 DEFB $E0,$03,$07,$70,$E0,$01,$0E,$38
 $8970 DEFB $C0,$80,$0C,$1C,$C1,$C0,$10,$06
; #OBJECTGFXM(#PC)(object30)
*$8978 DEFB $F1,$FF,$00,$00,$E0,$FF,$04,$00
 $8980 DEFB $E0,$3F,$0E,$00,$C0,$3F,$0F,$80
 $8988 DEFB $C0,$1F,$1F,$80,$80,$1F,$1F,$C0
 $8990 DEFB $80,$0F,$3F,$C0,$80,$0F,$3E,$60
 $8998 DEFB $80,$0F,$1F,$60,$C0,$0F,$0E,$60
 $89A0 DEFB $00,$0F,$07,$E0,$00,$07,$43,$E0
 $89A8 DEFB $00,$03,$70,$F0,$00,$01,$3F,$F8
 $89B0 DEFB $80,$00,$1F,$FC,$C0,$00,$0F,$FE

; Object 32 - Toast
;
; #OBJECTGFXM(#PC)(object32)
b$89B8 DEFB $F0,$1F,$00,$00,$E0,$03,$07,$C0
 $89C0 DEFB $C0,$01,$0D,$78,$80,$01,$1A,$AC
 $89C8 DEFB $80,$01,$35,$54,$80,$01,$3A,$AC
 $89D0 DEFB $80,$01,$15,$58,$C0,$03,$1A,$A8
 $89D8 DEFB $C0,$03,$0D,$58,$C0,$03,$1A,$B0
 $89E0 DEFB $C0,$03,$15,$58,$C0,$03,$1A,$A8
 $89E8 DEFB $C0,$03,$15,$58,$C0,$03,$1A,$A8
 $89F0 DEFB $C0,$03,$1F,$F8,$C0,$03,$00,$00

; Object 34 - Hammer
;
; #OBJECTGFXM(#PC)(object34)
b$89F8 DEFB $FE,$3F,$00,$00,$FC,$1F,$00,$80
 $8A00 DEFB $F8,$0F,$01,$40,$F0,$0F,$03,$A0
 $8A08 DEFB $E0,$0F,$07,$C0,$C0,$1F,$0E,$80
 $8A10 DEFB $80,$3F,$1D,$00,$00,$1F,$3B,$80
 $8A18 DEFB $00,$0F,$5D,$C0,$00,$07,$28,$E0
 $8A20 DEFB $82,$03,$10,$70,$C7,$01,$00,$38
 $8A28 DEFB $FF,$80,$00,$1C,$FF,$C0,$00,$0E
 $8A30 DEFB $FF,$E0,$00,$06,$FF,$F0,$00,$00

; Object 36 - Shopping trolley
;
; #OBJECTGFXM(#PC)(object36)
b$8A38 DEFB $00,$00,$00,$00,$00,$00,$FF,$FB
 $8A40 DEFB $00,$00,$AA,$AB,$00,$00,$55,$5A
 $8A48 DEFB $00,$00,$6A,$AC,$00,$01,$35,$54
 $8A50 DEFB $80,$01,$2A,$AC,$80,$01,$15,$54
 $8A58 DEFB $C0,$01,$1F,$FC,$C0,$01,$00,$0C
 $8A60 DEFB $C7,$81,$00,$1C,$C0,$01,$10,$38
 $8A68 DEFB $C0,$03,$0F,$F0,$80,$01,$10,$08
 $8A70 DEFB $83,$C1,$38,$1C,$83,$C1,$10,$08

; Object 38 - 3A - Lightning bolt
;
; #OBJECTGFXM(#PC)(object38)
b$8A78 DEFB $FE,$03,$00,$00,$FE,$03,$00,$F8
 $8A80 DEFB $FC,$03,$00,$F0,$FC,$07,$01,$F0
 $8A88 DEFB $F8,$07,$01,$E0,$F8,$01,$03,$E0
 $8A90 DEFB $F0,$01,$03,$CC,$F0,$01,$07,$F8
 $8A98 DEFB $E0,$03,$07,$F8,$E0,$03,$0C,$70
 $8AA0 DEFB $E0,$07,$00,$60,$FE,$0F,$00,$E0
 $8AA8 DEFB $FC,$0F,$00,$C0,$FC,$1F,$01,$80
 $8AB0 DEFB $FC,$3F,$01,$00,$FC,$7F,$00,$00
; #OBJECTGFXM(#PC)(object3a)
*$8AB8 DEFB $FE,$03,$00,$00,$FE,$03,$00,$F8
 $8AC0 DEFB $FC,$03,$00,$90,$FC,$07,$01,$10
 $8AC8 DEFB $F8,$07,$01,$20,$F8,$01,$02,$20
 $8AD0 DEFB $F0,$01,$02,$4C,$F0,$01,$04,$78
 $8AD8 DEFB $E0,$03,$07,$88,$E0,$03,$0C,$90
 $8AE0 DEFB $E0,$07,$00,$90,$FC,$07,$00,$A0
 $8AE8 DEFB $FC,$0F,$01,$40,$FC,$1F,$01,$80
 $8AF0 DEFB $FC,$3F,$01,$00,$FC,$7F,$00,$00

; Object 3C - 3E - Bird
;
; #OBJECTGFXM(#PC)(object3c)
b$8AF8 DEFB $FF,$FF,$00,$00,$FF,$FF,$00,$00
 $8B00 DEFB $FF,$FF,$00,$00,$FF,$FF,$00,$00
 $8B08 DEFB $FF,$FF,$00,$00,$00,$00,$00,$00
 $8B10 DEFB $00,$00,$72,$4E,$00,$00,$1B,$D8
 $8B18 DEFB $C0,$03,$0F,$F0,$E0,$07,$05,$A0
 $8B20 DEFB $F0,$0F,$03,$C0,$F8,$1F,$01,$80
 $8B28 DEFB $FC,$3F,$00,$00,$FF,$FF,$00,$00
 $8B30 DEFB $FF,$FF,$00,$00,$FF,$FF,$00,$00
; #OBJECTGFXM(#PC)(object3e)
*$8B38 DEFB $FF,$FF,$00,$00,$FF,$FF,$00,$00
 $8B40 DEFB $FF,$FF,$00,$00,$FF,$FF,$00,$00
 $8B48 DEFB $F8,$1F,$00,$00,$F8,$1F,$02,$40
 $8B50 DEFB $F0,$0F,$03,$C0,$C0,$03,$07,$E0
 $8B58 DEFB $80,$01,$1D,$B8,$00,$00,$33,$CC
 $8B60 DEFB $00,$00,$41,$82,$1C,$38,$00,$00
 $8B68 DEFB $FF,$FF,$00,$00,$FF,$FF,$00,$00
 $8B70 DEFB $FF,$FF,$00,$00,$FF,$FF,$00,$00

; Object 40 - 42 - Herbert R
;
; #OBJECTGFXM(#PC)(object40)
b$8B78 DEFB $FF,$F8,$00,$00,$FF,$80,$00,$02
 $8B80 DEFB $FF,$00,$00,$3D,$FE,$00,$00,$7A
 $8B88 DEFB $FE,$00,$00,$EE,$FE,$00,$00,$8C
 $8B90 DEFB $06,$00,$00,$DE,$00,$00,$70,$6F
 $8B98 DEFB $00,$00,$FB,$7E,$00,$00,$FB,$EC
 $8BA0 DEFB $00,$01,$FB,$E0,$00,$07,$F3,$E0
 $8BA8 DEFB $00,$07,$4B,$70,$00,$07,$38,$70
 $8BB0 DEFB $01,$01,$5C,$30,$01,$81,$7C,$3C
; #OBJECTGFXM(#PC)(object42)
 $8BB8 DEFB $FF,$FF,$00,$00,$FF,$F8,$00,$00
 $8BC0 DEFB $FF,$80,$00,$02,$FF,$00,$00,$3D
 $8BC8 DEFB $FE,$00,$00,$7A,$06,$00,$00,$EE
 $8BD0 DEFB $00,$00,$70,$8C,$00,$00,$FB,$DE
 $8BD8 DEFB $00,$00,$FB,$6F,$00,$00,$FB,$FE
 $8BE0 DEFB $00,$00,$FB,$EC,$00,$01,$73,$60
 $8BE8 DEFB $00,$0F,$4B,$60,$00,$0F,$38,$60
 $8BF0 DEFB $03,$07,$B8,$60,$03,$07,$F8,$30

; Object 44 - 46 - Herbert L
;
; #OBJECTGFXM(#PC)(object44)
b$8BF8 DEFB $1F,$FF,$00,$00,$01,$FF,$40,$00
 $8C00 DEFB $00,$FF,$BC,$00,$00,$7F,$5E,$00
 $8C08 DEFB $00,$7F,$77,$00,$00,$7F,$31,$00
 $8C10 DEFB $00,$60,$7B,$00,$00,$00,$F6,$0E
 $8C18 DEFB $00,$00,$7E,$DF,$00,$00,$37,$DF
 $8C20 DEFB $80,$00,$07,$DF,$E0,$00,$07,$CF
 $8C28 DEFB $E0,$00,$0E,$D2,$E0,$00,$0E,$1C
 $8C30 DEFB $80,$80,$0C,$3A,$81,$80,$3C,$3E
; #OBJECTGFXM(#PC)(object46)
 $8C38 DEFB $FF,$FF,$00,$00,$1F,$FF,$00,$00
 $8C40 DEFB $01,$FF,$40,$00,$00,$FF,$BC,$00
 $8C48 DEFB $00,$7F,$5E,$00,$00,$60,$77,$00
 $8C50 DEFB $00,$00,$31,$0E,$00,$00,$7B,$DF
 $8C58 DEFB $00,$00,$F6,$DF,$00,$00,$7F,$DF
 $8C60 DEFB $00,$00,$37,$DF,$80,$00,$06,$CE
 $8C68 DEFB $F0,$00,$06,$D2,$F0,$00,$06,$1C
 $8C70 DEFB $E0,$C0,$06,$1D,$E0,$C0,$0C,$1F

; Object 48 - 4A - Jumping jack
;
; #OBJECTGFXM(#PC)(object48)
b$8C78 DEFB $F0,$0F,$00,$00,$F0,$0F,$07,$E0
 $8C80 DEFB $F0,$0F,$01,$80,$FC,$3F,$01,$80
 $8C88 DEFB $F0,$0F,$01,$80,$E0,$07,$06,$E0
 $8C90 DEFB $E0,$07,$0B,$30,$E0,$07,$0A,$90
 $8C98 DEFB $E0,$07,$09,$D0,$E0,$07,$0D,$50
 $8CA0 DEFB $E0,$07,$07,$E0,$F0,$0F,$00,$00
 $8CA8 DEFB $FC,$3F,$01,$80,$F8,$1F,$01,$80
 $8CB0 DEFB $E0,$07,$02,$C0,$E0,$07,$0D,$F0
; #OBJECTGFXM(#PC)(object4a)
 $8CB8 DEFB $FF,$FF,$00,$00,$FF,$FF,$00,$00
 $8CC0 DEFB $F0,$0F,$00,$00,$F0,$0F,$07,$E0
 $8CC8 DEFB $F0,$0F,$01,$80,$F0,$0F,$01,$80
 $8CD0 DEFB $E0,$07,$06,$E0,$E0,$07,$0B,$30
 $8CD8 DEFB $E0,$07,$0A,$90,$E0,$07,$09,$D0
 $8CE0 DEFB $E0,$07,$0D,$50,$E0,$07,$07,$E0
 $8CE8 DEFB $F0,$0F,$00,$00,$F8,$1F,$01,$80
 $8CF0 DEFB $E0,$07,$02,$C0,$E0,$07,$0D,$F0

; Object 4C - 4F - Flame
;
; #OBJECTGFX(#PC)(object4c)
b$8CF8 DEFB $00,$00,$00,$00,$00,$00,$00,$80
 $8D00 DEFB $00,$80,$00,$80,$01,$C0,$01,$C0
 $8D08 DEFB $03,$E0,$03,$60,$07,$70,$06,$B0
 $8D10 DEFB $06,$B0,$03,$60,$01,$40,$01,$40
; #OBJECTGFX(#PC)(object4d)
 $8D18 DEFB $00,$00,$00,$00,$02,$00,$00,$00
 $8D20 DEFB $02,$00,$03,$00,$07,$80,$07,$C0
 $8D28 DEFB $07,$C0,$0E,$E0,$0E,$E0,$0D,$70
 $8D30 DEFB $0D,$B0,$06,$70,$03,$60,$01,$40
; #OBJECTGFX(#PC)(object4e)
 $8D38 DEFB $00,$80,$00,$00,$00,$80,$00,$80
 $8D40 DEFB $01,$C0,$01,$C0,$03,$E0,$03,$E0
 $8D48 DEFB $07,$F0,$07,$70,$0F,$78,$0E,$B8
 $8D50 DEFB $0E,$B8,$07,$70,$03,$60,$01,$40
; #OBJECTGFX(#PC)(object4f)
 $8D58 DEFB $00,$00,$00,$00,$00,$20,$00,$20
 $8D60 DEFB $00,$60,$00,$F0,$01,$F0,$03,$F0
 $8D68 DEFB $03,$F0,$07,$B8,$07,$78,$06,$B8
 $8D70 DEFB $06,$B0,$03,$70,$01,$40,$01,$40

; Object 50 - 52 - Fountain L
;
; #OBJECTGFX(#PC)(object50)
b$8D78 DEFB $C0,$00,$40,$00,$60,$00,$60,$00
 $8D80 DEFB $60,$00,$50,$00,$70,$00,$70,$00
 $8D88 DEFB $70,$00,$50,$00,$70,$00,$70,$00
 $8D90 DEFB $78,$00,$E8,$00,$B8,$00,$FC,$00
; #OBJECTGFX(#PC)(object51)
 $8D98 DEFB $C0,$00,$40,$00,$60,$00,$60,$00
 $8DA0 DEFB $60,$00,$70,$00,$70,$00,$70,$00
 $8DA8 DEFB $50,$00,$70,$00,$70,$00,$70,$00
 $8DB0 DEFB $7E,$00,$D9,$80,$FB,$80,$FE,$00
; #OBJECTGFX(#PC)(object52)
 $8DB8 DEFB $C0,$00,$40,$00,$60,$00,$40,$00
 $8DC0 DEFB $60,$00,$70,$00,$70,$00,$70,$00
 $8DC8 DEFB $70,$00,$70,$00,$70,$00,$70,$00
 $8DD0 DEFB $58,$00,$F8,$00,$F8,$C0,$B4,$20

; Object 53 - 55 - Fountain R
;
; #OBJECTGFX(#PC)(object53)
b$8DD8 DEFB $00,$03,$00,$02,$00,$06,$00,$06
 $8DE0 DEFB $00,$06,$00,$0A,$00,$0E,$00,$0E
 $8DE8 DEFB $00,$0E,$00,$0A,$00,$0E,$00,$0E
 $8DF0 DEFB $00,$1E,$00,$17,$00,$1D,$00,$3F
; #OBJECTGFX(#PC)(object54)
 $8DF8 DEFB $00,$03,$00,$02,$00,$06,$00,$06
 $8E00 DEFB $00,$06,$00,$0E,$00,$0E,$00,$0E
 $8E08 DEFB $00,$0A,$00,$0E,$00,$0E,$00,$0E
 $8E10 DEFB $00,$7E,$01,$9B,$01,$DF,$00,$7F
; #OBJECTGFX(#PC)(object55)
 $8E18 DEFB $00,$03,$00,$02,$00,$06,$00,$02
 $8E20 DEFB $00,$06,$00,$0E,$00,$0E,$00,$0E
 $8E28 DEFB $00,$0E,$00,$0E,$00,$0E,$00,$0E
 $8E30 DEFB $00,$1A,$00,$1F,$03,$1F,$04,$2D

; Object 56 - Light bulb
;
; #OBJECTGFX(#PC)(object56)
b$8E38 DEFB $00,$80,$00,$00,$01,$C0,$00,$00
 $8E40 DEFB $01,$C0,$00,$00,$01,$C0,$03,$E0
 $8E48 DEFB $02,$E0,$05,$F0,$05,$D0,$0B,$E8
 $8E50 DEFB $0B,$E8,$09,$E8,$04,$D0,$03,$E0

; Object 57 - 5A - School desk
;
; #OBJECTGFX(#PC)(object57)
b$8E58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $8E60 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $8E68 DEFB $FF,$FF,$FF,$FF,$00,$00,$FF,$F4
 $8E70 DEFB $FF,$F4,$FF,$EC,$00,$0C,$00,$0C
; #OBJECTGFX(#PC)(object58)
 $8E78 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $8E80 DEFB $00,$00,$00,$0E,$00,$FE,$1F,$F8
 $8E88 DEFB $FF,$80,$F0,$00,$00,$00,$FF,$F4
 $8E90 DEFB $FF,$F4,$FF,$EC,$00,$0C,$00,$0C
; #OBJECTGFX(#PC)(object59)
 $8E98 DEFB $00,$00,$00,$00,$00,$1C,$00,$7C
 $8EA0 DEFB $01,$F0,$07,$C0,$1F,$00,$7C,$00
 $8EA8 DEFB $F0,$00,$C0,$00,$00,$00,$FF,$F4
 $8EB0 DEFB $FF,$F4,$FF,$EC,$00,$0C,$00,$0C
; #OBJECTGFX(#PC)(object5a)
 $8EB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $8EC0 DEFB $00,$00,$00,$0E,$00,$FE,$1F,$F8
 $8EC8 DEFB $FF,$80,$F0,$00,$00,$00,$FF,$F4
 $8ED0 DEFB $FF,$F4,$FF,$EC,$00,$0C,$00,$0C

; Object 5B - Burger
;
; #OBJECTGFX(#PC)(object5b)
b$8ED8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $8EE0 DEFB $00,$00,$00,$00,$00,$00,$0B,$70
 $8EE8 DEFB $3F,$DC,$6E,$F6,$00,$00,$AA,$AA
 $8EF0 DEFB $55,$55,$00,$00,$7F,$FE,$3F,$FC

; Object 5C - Iced bun
;
; #OBJECTGFX(#PC)(object5c)
b$8EF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $8F00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $8F08 DEFB $00,$00,$7F,$FE,$FF,$FF,$79,$FE
 $8F10 DEFB $86,$3D,$EF,$43,$BD,$EF,$77,$7A

; Object 5D - Fiz
;
; #OBJECTGFX(#PC)(object5d)
b$8F18 DEFB $5F,$F0,$00,$00,$7F,$F0,$43,$30
 $8F20 DEFB $4F,$D0,$45,$D0,$4F,$F0,$49,$10
 $8F28 DEFB $49,$90,$79,$30,$79,$90,$5F,$90
 $8F30 DEFB $5E,$90,$5E,$30,$67,$F0,$3F,$E0

; Object 5E - Bottle
;
; #OBJECTGFX(#PC)(object5e)
b$8F38 DEFB $00,$00,$30,$00,$48,$00,$58,$00
 $8F40 DEFB $3C,$00,$0F,$00,$07,$E0,$03,$98
 $8F48 DEFB $03,$E6,$01,$FA,$01,$FD,$00,$FD
 $8F50 DEFB $00,$FD,$00,$7A,$00,$3E,$00,$00

; Object 5F - Pear
;
; #OBJECTGFX(#PC)(object5f)
b$8F58 DEFB $1C,$60,$16,$C0,$1A,$80,$0D,$80
 $8F60 DEFB $02,$00,$01,$C0,$01,$C0,$02,$E0
 $8F68 DEFB $02,$E0,$05,$F0,$05,$F0,$0B,$E8
 $8F70 DEFB $0B,$E8,$0B,$E8,$0D,$D8,$07,$70

; Object 60 - 63 - Monkey
;
; #OBJECTGFX(#PC)(object60)
b$8F78 DEFB $01,$C0,$03,$60,$06,$30,$06,$00
 $8F80 DEFB $06,$00,$E6,$00,$6F,$00,$6F,$80
 $8F88 DEFB $3F,$C0,$3D,$F0,$03,$F8,$03,$78
 $8F90 DEFB $06,$E8,$0C,$78,$06,$30,$03,$00
; #OBJECTGFX(#PC)(object61)
 $8F98 DEFB $01,$C0,$03,$60,$06,$30,$06,$00
 $8FA0 DEFB $06,$00,$07,$00,$EF,$80,$6F,$E0
 $8FA8 DEFB $3D,$F0,$1C,$FE,$00,$FE,$01,$9F
 $8FB0 DEFB $03,$1B,$01,$8E,$00,$C6,$00,$00
; #OBJECTGFX(#PC)(object62)
 $8FB8 DEFB $01,$F0,$03,$38,$06,$00,$06,$00
 $8FC0 DEFB $06,$00,$06,$00,$0F,$C0,$0F,$F8
 $8FC8 DEFB $7E,$FE,$DC,$FA,$80,$DE,$00,$CF
 $8FD0 DEFB $00,$62,$00,$30,$00,$18,$00,$00
; #OBJECTGFX(#PC)(object63)
 $8FD8 DEFB $01,$C0,$03,$60,$06,$20,$06,$00
 $8FE0 DEFB $06,$00,$07,$00,$6F,$80,$2F,$E0
 $8FE8 DEFB $3D,$F0,$1C,$FE,$08,$FE,$01,$9F
 $8FF0 DEFB $03,$1B,$01,$8E,$00,$C6,$00,$00

; Object 64 - Banana
;
; #OBJECTGFX(#PC)(object64)
b$8FF8 DEFB $00,$00,$00,$08,$00,$1C,$00,$1C
 $9000 DEFB $00,$3C,$0E,$38,$09,$78,$10,$F0
 $9008 DEFB $1E,$F0,$21,$64,$03,$9C,$0C,$C4
 $9010 DEFB $33,$84,$CE,$08,$78,$10,$00,$00

; Object 65 - Morning tea
;
; #OBJECTGFXM(#PC)(object65)
b$9018 DEFB $FF,$FF,$00,$00,$FC,$3F,$00,$00
 $9020 DEFB $FC,$3F,$01,$80,$E0,$07,$00,$00
 $9028 DEFB $20,$00,$0F,$F0,$00,$00,$80,$06
 $9030 DEFB $00,$00,$DF,$F9,$00,$00,$DB,$F9
 $9038 DEFB $00,$00,$57,$FD,$00,$00,$37,$FD
 $9040 DEFB $80,$00,$37,$FE,$80,$00,$1B,$F8
 $9048 DEFB $C0,$03,$1C,$F8,$C0,$03,$0F,$F0
 $9050 DEFB $E0,$07,$03,$C0,$F8,$1F,$00,$00

; Object 67 - Lunch
;
; #OBJECTGFXM(#PC)(object67)
b$9058 DEFB $FF,$8F,$00,$00,$C0,$81,$00,$20
 $9060 DEFB $C0,$81,$12,$24,$C0,$01,$12,$84
 $9068 DEFB $00,$01,$04,$88,$00,$01,$44,$28
 $9070 DEFB $00,$01,$48,$24,$00,$00,$21,$84
 $9078 DEFB $80,$00,$23,$42,$80,$00,$0E,$A0
 $9080 DEFB $C0,$03,$15,$58,$00,$00,$00,$00
 $9088 DEFB $00,$00,$7F,$FE,$00,$00,$0F,$F0
 $9090 DEFB $E0,$07,$00,$00,$FF,$FF,$00,$00

; Object 69 - Dinner
;
; #OBJECTGFXM(#PC)(object69)
b$9098 DEFB $FF,$0F,$00,$00,$FF,$03,$00,$60
 $90A0 DEFB $FE,$00,$00,$58,$FE,$00,$00,$D6
 $90A8 DEFB $C0,$00,$00,$B2,$80,$00,$19,$2C
 $90B0 DEFB $80,$01,$3D,$C4,$80,$01,$26,$68
 $90B8 DEFB $80,$03,$07,$18,$E0,$00,$0B,$D0
 $90C0 DEFB $C0,$00,$0D,$FE,$C0,$00,$1F,$D6
 $90C8 DEFB $C0,$00,$0F,$E2,$E0,$08,$03,$E0
 $90D0 DEFB $F8,$0F,$00,$C0,$FE,$1F,$00,$00


; Object 6B - Asteroids small lightning
;
; #OBJECTGFXM(#PC)(object6b)
b$90D8 DEFB $FF,$FF,$00,$00,$FF,$FF,$00,$00
 $90E0 DEFB $FE,$0F,$00,$00,$FC,$0F,$00,$E0
 $90E8 DEFB $F8,$0F,$01,$C0,$F0,$0F,$03,$80
 $90F0 DEFB $E0,$0F,$07,$E0,$E0,$0F,$0F,$C0
 $90F8 DEFB $E0,$1F,$01,$80,$F0,$3F,$03,$00
 $9100 DEFB $F0,$7F,$06,$00,$F0,$FF,$04,$00
 $9108 DEFB $F1,$FF,$00,$00,$FF,$FF,$00,$00
 $9110 DEFB $FF,$FF,$00,$00,$FF,$FF,$00,$00

; Object 6D - Asteroids missile
;
; #OBJECTGFX(#PC)(object6d)
b$9118 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9120 DEFB $00,$80,$02,$A0,$01,$40,$06,$B0
 $9128 DEFB $01,$40,$02,$A0,$00,$80,$00,$00
 $9130 DEFB $00,$00,$00,$00,$00,$00,$00,$00

; Object 6E - Asteroids ship 0
;
; #OBJECTGFX(#PC)(object6e)
b$9138 DEFB $00,$00,$01,$80,$01,$80,$02,$C0
 $9140 DEFB $03,$40,$02,$C0,$07,$60,$06,$E0
 $9148 DEFB $07,$60,$0F,$F0,$0E,$70,$1C,$38
 $9150 DEFB $18,$18,$00,$00,$00,$00,$00,$00

; Object 6F - Asteroids ship 1
;
; #OBJECTGFX(#PC)(object6f)
b$9158 DEFB $00,$00,$00,$00,$00,$0C,$00,$3C
 $9160 DEFB $00,$F8,$03,$D8,$0F,$B0,$3F,$70
 $9168 DEFB $7E,$E0,$7D,$E0,$07,$C0,$03,$C0
 $9170 DEFB $03,$80,$03,$80,$03,$00,$00,$00

; Object 70 - Asteroids ship 2
;
; #OBJECTGFX(#PC)(object70)
b$9178 DEFB $00,$00,$00,$00,$00,$00,$18,$00
 $9180 DEFB $1E,$00,$0F,$C0,$07,$F8,$03,$56
 $9188 DEFB $02,$AE,$07,$F8,$0F,$C0,$1E,$00
 $9190 DEFB $18,$00,$00,$00,$00,$00,$00,$00

; Object 71 - Asteroids ship 3
;
; #OBJECTGFX(#PC)(object71)
b$9198 DEFB $00,$00,$03,$00,$03,$80,$03,$80
 $91A0 DEFB $03,$C0,$07,$C0,$7D,$E0,$7E,$E0
 $91A8 DEFB $3F,$70,$0F,$B0,$03,$D8,$00,$F8
 $91B0 DEFB $00,$3C,$00,$0C,$00,$00,$00,$00

; Object 72 - Asteroids ship 4
;
; #OBJECTGFX(#PC)(object72)
b$91B8 DEFB $00,$00,$00,$00,$00,$00,$18,$18
 $91C0 DEFB $1C,$38,$0E,$70,$0F,$F0,$06,$E0
 $91C8 DEFB $07,$60,$06,$E0,$03,$40,$02,$C0
 $91D0 DEFB $03,$40,$01,$80,$01,$80,$00,$00

; Object 73 - Asteroids ship 5
;
; #OBJECTGFX(#PC)(object73)
b$91D8 DEFB $00,$00,$00,$C0,$01,$C0,$01,$C0
 $91E0 DEFB $03,$C0,$03,$E0,$07,$BE,$07,$7E
 $91E8 DEFB $0E,$FC,$0D,$F0,$1B,$C0,$1F,$00
 $91F0 DEFB $3C,$00,$30,$00,$00,$00,$00,$00

; Object 74 - Asteroids ship 6
;
; #OBJECTGFX(#PC)(object74)
b$91F8 DEFB $00,$00,$00,$00,$00,$00,$00,$18
 $9200 DEFB $00,$78,$03,$F0,$1F,$E0,$75,$40
 $9208 DEFB $6A,$C0,$1F,$E0,$03,$F0,$00,$78
 $9210 DEFB $00,$18,$00,$00,$00,$00,$00,$00

; Object 75 - Asteroids ship 7
;
; #OBJECTGFX(#PC)(object75)
b$9218 DEFB $00,$00,$00,$00,$30,$00,$3C,$00
 $9220 DEFB $1F,$00,$1B,$C0,$0D,$F0,$0E,$FC
 $9228 DEFB $07,$7E,$07,$BE,$03,$E0,$03,$C0
 $9230 DEFB $01,$C0,$01,$C0,$00,$C0,$00,$00

; Object 76 - Pound symbol
;
; #OBJECTGFXM(#PC)(object76)
b$9238 DEFB $F0,$07,$00,$00,$E0,$03,$07,$F0
 $9240 DEFB $E0,$03,$0F,$F8,$E0,$03,$0E,$38
 $9248 DEFB $E0,$83,$0E,$00,$E0,$FF,$0E,$00
 $9250 DEFB $00,$0F,$0E,$00,$00,$0F,$7F,$E0
 $9258 DEFB $00,$0F,$7F,$E0,$00,$0F,$0E,$00
 $9260 DEFB $80,$E3,$0E,$00,$00,$23,$3E,$08
 $9268 DEFB $00,$03,$7F,$88,$00,$03,$4F,$F8
 $9270 DEFB $00,$03,$39,$F0,$80,$07,$00,$00

; Object 78 - Life raft
;
; #OBJECTGFXM(#PC)(object78)
b$9278 DEFB $80,$01,$00,$00,$00,$00,$33,$CC
 $9280 DEFB $00,$00,$4F,$F2,$00,$00,$57,$FA
 $9288 DEFB $00,$00,$3B,$F4,$00,$00,$3C,$2C
 $9290 DEFB $00,$00,$7A,$5E,$00,$00,$78,$1E
 $9298 DEFB $00,$00,$78,$1E,$00,$00,$7A,$5E
 $92A0 DEFB $00,$00,$34,$3C,$00,$00,$2F,$DC
 $92A8 DEFB $00,$00,$5F,$EA,$00,$00,$4F,$F2
 $92B0 DEFB $00,$00,$33,$CC,$80,$01,$00,$00

; Object 7A - Stamp
;
; #OBJECTGFXM(#PC)(object7a)
b$92B8 DEFB $80,$01,$2A,$AA,$80,$01,$7E,$FC
 $92C0 DEFB $80,$01,$3D,$5E,$80,$01,$78,$8C
 $92C8 DEFB $80,$01,$3A,$56,$80,$01,$75,$2C
 $92D0 DEFB $80,$01,$2F,$AE,$80,$01,$77,$DC
 $92D8 DEFB $80,$01,$33,$BE,$80,$01,$7D,$BC
 $92E0 DEFB $80,$01,$3D,$5E,$80,$01,$7A,$EC
 $92E8 DEFB $80,$01,$33,$CE,$80,$01,$60,$04
 $92F0 DEFB $80,$01,$3F,$FE,$80,$01,$55,$54

; Object 7C - 80 - Gas
;
; #OBJECTGFXM(#PC)(object7c)
b$92F8 DEFB $FF,$FF,$00,$00,$FF,$FF,$00,$00
 $9300 DEFB $F1,$FF,$00,$00,$E0,$C7,$04,$00
 $9308 DEFB $E0,$C7,$0E,$10,$E0,$C7,$0E,$00
 $9310 DEFB $E0,$1F,$04,$00,$F0,$01,$00,$40
 $9318 DEFB $C6,$01,$00,$E4,$C6,$01,$10,$E0
 $9320 DEFB $C0,$01,$00,$40,$E0,$00,$04,$04
 $9328 DEFB $E0,$00,$0E,$0E,$E0,$00,$0E,$4E
 $9330 DEFB $E0,$00,$04,$04,$F1,$F1,$00,$00
; #OBJECTGFXM(#PC)(object7e)
 $9338 DEFB $FF,$FF,$00,$00,$FF,$C7,$00,$00
 $9340 DEFB $FF,$83,$00,$10,$F1,$83,$00,$38
 $9348 DEFB $E0,$83,$04,$38,$E0,$83,$0A,$10
 $9350 DEFB $E0,$00,$04,$04,$C0,$00,$00,$4E
 $9358 DEFB $82,$00,$10,$AE,$82,$00,$38,$44
 $9360 DEFB $83,$11,$38,$00,$80,$09,$10,$40
 $9368 DEFB $C0,$00,$04,$E4,$E0,$00,$0A,$EA 
 $9370 DEFB $E0,$00,$04,$44,$F1,$11,$00,$00
; #OBJECTGFXM(#PC)(object80)
 $9378 DEFB $FF,$FF,$00,$00,$FF,$C7,$00,$00
 $9380 DEFB $FF,$83,$00,$10,$FF,$83,$00,$28
 $9388 DEFB $F1,$83,$00,$10,$F1,$C1,$04,$00
 $9390 DEFB $F1,$E0,$00,$04,$C7,$00,$00,$0A
 $9398 DEFB $83,$00,$10,$44,$83,$11,$28,$00
 $93A0 DEFB $83,$FF,$10,$00,$C7,$1F,$00,$00
 $93A8 DEFB $F0,$01,$00,$40,$F0,$01,$04,$A4
 $93B0 DEFB $F0,$01,$00,$40,$FF,$1F,$00,$00

; Object 82 - Left arrow
;
; #OBJECTGFXM(#PC)(object82)
b$93B8 DEFB $FF,$FF,$00,$00,$FF,$FF,$00,$00
 $93C0 DEFB $F1,$FF,$00,$00,$E1,$FF,$04,$00
 $93C8 DEFB $C1,$FF,$0C,$00,$80,$00,$1C,$00
 $93D0 DEFB $00,$00,$3B,$FE,$00,$00,$77,$FE
 $93D8 DEFB $00,$00,$76,$02,$00,$00,$3B,$FE
 $93E0 DEFB $80,$00,$1C,$00,$C1,$FF,$0C,$00
 $93E8 DEFB $E1,$FF,$04,$00,$F1,$FF,$00,$00
 $93F0 DEFB $FF,$FF,$00,$00,$FF,$FF,$00,$00

; Object 84 - Right arrow
;
; #OBJECTGFXM(#PC)(object84)
b$93F8 DEFB $FF,$FF,$00,$00,$FF,$FF,$00,$00
 $9400 DEFB $FF,$8F,$00,$00,$FF,$87,$00,$20
 $9408 DEFB $FF,$83,$00,$30,$00,$01,$00,$38
 $9410 DEFB $00,$00,$7F,$DC,$00,$00,$7F,$EE
 $9418 DEFB $00,$00,$40,$6E,$00,$00,$7F,$DC
 $9420 DEFB $00,$01,$00,$38,$FF,$83,$00,$30
 $9428 DEFB $FF,$87,$00,$20,$FF,$8F,$00,$00
 $9430 DEFB $FF,$FF,$00,$00,$FF,$FF,$00,$00

; Wally
;
; #CALL:print_mask(#PC,$wallyM)
; #CALL:print_player(#PC,wally)
b$9438 DEFB $F0,$00,$00,$00,$E0,$00,$07,$3E
 $9440 DEFB $E0,$00,$0F,$FF,$80,$00,$07,$FE
 $9448 DEFB $80,$00,$3C,$3C,$80,$01,$01,$80
 $9450 DEFB $F0,$01,$06,$B4,$F0,$01,$07,$F4
 $9458 DEFB $F0,$01,$01,$FC,$FC,$01,$01,$F8
 $9460 DEFB $FC,$03,$00,$00,$F8,$01,$01,$F8
 $9468 DEFB $F0,$00,$03,$8C,$E0,$00,$07,$76
 $9470 DEFB $C0,$00,$0F,$76,$C0,$00,$1F,$8A
 $9478 DEFB $80,$00,$3F,$BA,$00,$00,$00,$5A
 $9480 DEFB $00,$00,$7F,$DA,$00,$00,$7F,$BC
 $9488 DEFB $00,$00,$7F,$A8,$00,$01,$3B,$D0
 $9490 DEFB $80,$03,$17,$F0,$C0,$03,$0F,$E8
 $9498 DEFB $E0,$03,$0F,$88,$E0,$03,$0F,$98
 $94A0 DEFB $E0,$03,$07,$D8,$F0,$01,$03,$38
 $94A8 DEFB $80,$01,$07,$BC,$00,$00,$20,$00
 $94B0 DEFB $00,$00,$77,$9E,$00,$00,$76,$9A
 $94B8 DEFB $E0,$00,$07,$3E,$E0,$00,$0F,$FF
 $94C0 DEFB $80,$00,$07,$FE,$80,$00,$3C,$1C
 $94C8 DEFB $80,$01,$01,$80,$F0,$01,$06,$B4
 $94D0 DEFB $F0,$01,$07,$F4,$F0,$01,$01,$FC
 $94D8 DEFB $FC,$01,$01,$F8,$FC,$03,$00,$00
 $94E0 DEFB $FC,$01,$01,$F8,$F8,$01,$01,$9C
 $94E8 DEFB $F0,$00,$03,$6C,$E0,$00,$06,$F6
 $94F0 DEFB $80,$00,$0F,$0E,$80,$00,$3F,$6E
 $94F8 DEFB $00,$00,$01,$68,$00,$00,$7F,$6E
 $9500 DEFB $00,$00,$7F,$6E,$00,$00,$7E,$F6
 $9508 DEFB $00,$00,$3E,$AC,$80,$01,$1F,$58
 $9510 DEFB $C0,$03,$0F,$F0,$E0,$07,$07,$F0
 $9518 DEFB $F0,$03,$07,$E0,$F0,$01,$03,$E8
 $9520 DEFB $F8,$01,$03,$EC,$F8,$01,$01,$DC
 $9528 DEFB $E0,$01,$03,$E8,$C0,$03,$08,$10
 $9530 DEFB $C0,$07,$1D,$E0,$C0,$0F,$1D,$A0
 $9538 DEFB $E0,$00,$07,$3E,$E0,$00,$0F,$FF
 $9540 DEFB $80,$00,$07,$FE,$80,$00,$3C,$1C
 $9548 DEFB $80,$01,$01,$80,$F0,$01,$06,$B4
 $9550 DEFB $F0,$01,$07,$F4,$F0,$01,$01,$FC
 $9558 DEFB $FC,$01,$01,$F8,$FC,$03,$00,$00
 $9560 DEFB $FC,$01,$01,$F8,$F8,$01,$01,$9C
 $9568 DEFB $F0,$00,$03,$6C,$E0,$00,$06,$F6
 $9570 DEFB $80,$00,$0E,$06,$80,$00,$3F,$6E
 $9578 DEFB $00,$00,$02,$D0,$00,$00,$7E,$DE
 $9580 DEFB $00,$00,$7E,$DE,$00,$00,$7D,$EE
 $9588 DEFB $00,$00,$3D,$5C,$80,$01,$1E,$B8
 $9590 DEFB $C0,$03,$0B,$F0,$C0,$07,$13,$F0
 $9598 DEFB $C0,$07,$1B,$F0,$C0,$03,$0D,$F0
 $95A0 DEFB $E0,$03,$02,$F8,$C0,$03,$0A,$70
 $95A8 DEFB $C0,$03,$1D,$78,$C0,$03,$1A,$00
 $95B0 DEFB $C0,$03,$07,$78,$F0,$03,$07,$68
 $95B8 DEFB $F0,$00,$00,$00,$E0,$00,$07,$3E
 $95C0 DEFB $E0,$00,$0F,$FF,$80,$00,$07,$FE
 $95C8 DEFB $80,$00,$3C,$1C,$80,$01,$01,$80
 $95D0 DEFB $F0,$01,$06,$B4,$F0,$01,$07,$F4
 $95D8 DEFB $F0,$01,$01,$FC,$FC,$01,$01,$F8
 $95E0 DEFB $FC,$03,$00,$00,$F8,$01,$01,$FC
 $95E8 DEFB $F0,$00,$03,$9C,$E0,$00,$07,$6E
 $95F0 DEFB $C0,$00,$0E,$F6,$C0,$00,$1F,$2E
 $95F8 DEFB $80,$00,$3E,$DE,$00,$00,$02,$D0
 $9600 DEFB $00,$00,$7D,$DE,$00,$00,$7B,$BE
 $9608 DEFB $00,$00,$7A,$BC,$00,$01,$3D,$78
 $9610 DEFB $80,$03,$1F,$F8,$C0,$03,$07,$F8
 $9618 DEFB $E0,$03,$0B,$F8,$E0,$03,$0D,$F8
 $9620 DEFB $E0,$03,$06,$F8,$F0,$01,$03,$78
 $9628 DEFB $80,$01,$07,$3C,$00,$00,$20,$80
 $9630 DEFB $00,$00,$75,$DE,$00,$00,$75,$DA
 $9638 DEFB $E0,$00,$07,$3E,$E0,$00,$0F,$FF
 $9640 DEFB $80,$00,$07,$FE,$80,$00,$3C,$1C
 $9648 DEFB $80,$01,$01,$80,$F0,$01,$06,$B4
 $9650 DEFB $F0,$01,$07,$F4,$F0,$01,$01,$FC
 $9658 DEFB $FC,$01,$01,$F8,$FC,$03,$00,$00
 $9660 DEFB $FC,$01,$01,$F8,$F8,$01,$01,$9C
 $9668 DEFB $F0,$00,$03,$6C,$E0,$00,$06,$F6
 $9670 DEFB $80,$00,$0E,$06,$80,$00,$3F,$6E
 $9678 DEFB $00,$00,$02,$D0,$00,$00,$7E,$DE
 $9680 DEFB $00,$00,$7E,$DE,$00,$00,$7D,$EE
 $9688 DEFB $00,$00,$3D,$5C,$80,$01,$1E,$B8
 $9690 DEFB $C0,$03,$0F,$F0,$E0,$07,$07,$80
 $9698 DEFB $F0,$03,$07,$A0,$F0,$01,$07,$E8
 $96A0 DEFB $F0,$01,$01,$EC,$F8,$01,$02,$1C
 $96A8 DEFB $E0,$01,$02,$D0,$C0,$07,$08,$E0
 $96B0 DEFB $C0,$0F,$1D,$00,$C0,$0F,$1D,$A0
 $96B8 DEFB $E0,$00,$07,$3E,$E0,$00,$0F,$FF
 $96C0 DEFB $80,$00,$07,$FE,$80,$00,$3C,$1C
 $96C8 DEFB $80,$01,$01,$80,$F0,$01,$06,$B4
 $96D0 DEFB $F0,$01,$07,$F4,$F0,$01,$01,$FC
 $96D8 DEFB $FC,$01,$01,$F8,$FC,$03,$00,$00
 $96E0 DEFB $FC,$01,$01,$F8,$F8,$01,$01,$9C
 $96E8 DEFB $F0,$00,$03,$6C,$E0,$00,$06,$F6
 $96F0 DEFB $80,$00,$0F,$0E,$80,$00,$3F,$6E
 $96F8 DEFB $00,$00,$01,$68,$00,$00,$7F,$6E
 $9700 DEFB $00,$00,$7E,$F6,$00,$00,$7E,$AC
 $9708 DEFB $00,$01,$37,$58,$80,$03,$17,$F0
 $9710 DEFB $C0,$03,$0F,$E0,$C0,$03,$1F,$88
 $9718 DEFB $C0,$03,$1F,$38,$C0,$03,$0F,$D8
 $9720 DEFB $E0,$03,$03,$E8,$C0,$03,$08,$18
 $9728 DEFB $C0,$03,$1D,$E8,$C0,$03,$1D,$A0
 $9730 DEFB $C0,$03,$02,$58,$F0,$03,$07,$68
 $9738 DEFB $F0,$00,$00,$00,$E0,$00,$07,$3E
 $9740 DEFB $E0,$00,$0F,$FF,$80,$00,$07,$FE
 $9748 DEFB $80,$00,$3C,$3C,$80,$01,$01,$80
 $9750 DEFB $F0,$01,$06,$B4,$F0,$01,$07,$F4
 $9758 DEFB $F0,$01,$01,$FC,$FC,$01,$01,$F8
 $9760 DEFB $FC,$03,$00,$00,$F8,$01,$01,$F8
 $9768 DEFB $F0,$00,$03,$8C,$E0,$00,$07,$76
 $9770 DEFB $C0,$00,$0F,$76,$C0,$00,$1E,$AE
 $9778 DEFB $80,$00,$39,$DE,$00,$00,$17,$A0
 $9780 DEFB $00,$00,$6F,$7E,$00,$00,$6C,$FC
 $9788 DEFB $00,$01,$73,$FC,$00,$01,$3F,$F8
 $9790 DEFB $80,$01,$17,$F4,$C0,$01,$0F,$EC
 $9798 DEFB $00,$00,$0F,$DC,$00,$00,$DF,$3A
 $97A0 DEFB $00,$00,$CE,$15,$00,$80,$AC,$0E
 $97A8 DEFB $01,$80,$70,$34,$03,$81,$28,$38
 $97B0 DEFB $83,$83,$10,$10,$C7,$C7,$00,$00
 $97B8 DEFB $F0,$00,$00,$00,$E0,$00,$07,$3E
 $97C0 DEFB $E0,$00,$0F,$FF,$80,$00,$07,$FE
 $97C8 DEFB $80,$00,$3C,$1C,$80,$01,$01,$80
 $97D0 DEFB $F0,$01,$06,$B4,$F0,$01,$07,$F4
 $97D8 DEFB $F0,$01,$01,$FC,$FC,$01,$01,$F8
 $97E0 DEFB $FC,$01,$00,$00,$F8,$01,$01,$FC
 $97E8 DEFB $80,$00,$02,$1C,$00,$00,$31,$EE
 $97F0 DEFB $00,$00,$6F,$F6,$00,$00,$6F,$EE
 $97F8 DEFB $80,$00,$00,$0E,$00,$00,$1F,$F0
 $9800 DEFB $00,$00,$7F,$FE,$00,$00,$7B,$FE
 $9808 DEFB $00,$00,$37,$FC,$00,$00,$17,$F8
 $9810 DEFB $00,$00,$CF,$E3,$00,$00,$EF,$DA
 $9818 DEFB $00,$00,$CF,$3B,$00,$00,$1E,$FB
 $9820 DEFB $00,$00,$DC,$18,$01,$C0,$D8,$03
 $9828 DEFB $03,$F0,$50,$07,$07,$F0,$C0,$03
 $9830 DEFB $1F,$F8,$00,$00,$FF,$FF,$00,$00

; Wilma
;
; #CALL:print_mask(#PC,wilmaM)
; #CALL:print_player(#PC,wilma)
b$9838 DEFB $E0,$0F,$07,$C0,$C0,$07,$0D,$60
 $9840 DEFB $C0,$07,$1F,$B0,$C0,$03,$19,$D0
 $9848 DEFB $C0,$03,$16,$F8,$C0,$03,$06,$D0
 $9850 DEFB $F0,$03,$02,$F8,$E0,$03,$02,$D0
 $9858 DEFB $E0,$07,$0E,$B0,$E0,$07,$06,$E0
 $9860 DEFB $F0,$07,$00,$E0,$F0,$07,$00,$70
 $9868 DEFB $E0,$07,$07,$60,$E0,$07,$0B,$70
 $9870 DEFB $E0,$03,$0B,$60,$E0,$03,$0B,$78
 $9878 DEFB $E0,$1F,$0B,$40,$E0,$1F,$07,$40
 $9880 DEFB $F0,$0F,$03,$40,$F8,$0F,$03,$60
 $9888 DEFB $F8,$0F,$03,$60,$F8,$0F,$02,$E0
 $9890 DEFB $F8,$07,$03,$60,$F8,$07,$02,$F0
 $9898 DEFB $F0,$03,$01,$F0,$F0,$03,$07,$F8
 $98A0 DEFB $F0,$03,$00,$00,$F0,$03,$07,$38
 $98A8 DEFB $F0,$03,$06,$18,$E0,$C1,$04,$08
 $98B0 DEFB $C1,$C1,$0C,$0C,$C1,$C1,$14,$14
 $98B8 DEFB $E0,$0F,$07,$C0,$C0,$07,$0E,$E0
 $98C0 DEFB $C0,$07,$1F,$F0,$C0,$07,$19,$D0
 $98C8 DEFB $C0,$03,$06,$F0,$F0,$03,$06,$F8
 $98D0 DEFB $F0,$03,$02,$F0,$E0,$07,$02,$D0
 $98D8 DEFB $E0,$07,$0E,$F0,$E0,$07,$06,$E0
 $98E0 DEFB $F0,$07,$00,$F0,$F0,$07,$00,$60
 $98E8 DEFB $E0,$07,$07,$70,$E0,$03,$0B,$60
 $98F0 DEFB $E0,$03,$0B,$78,$E0,$03,$0B,$00
 $98F8 DEFB $E0,$1F,$0B,$40,$E0,$1F,$07,$40
 $9900 DEFB $F0,$0F,$03,$40,$F8,$0F,$03,$60
 $9908 DEFB $F0,$0F,$03,$60,$F0,$0F,$06,$E0
 $9910 DEFB $F0,$0F,$06,$E0,$F0,$0F,$01,$C0
 $9918 DEFB $F0,$1F,$07,$C0,$F0,$1F,$00,$00
 $9920 DEFB $F0,$07,$06,$C0,$F0,$07,$02,$D0
 $9928 DEFB $F8,$07,$00,$D0,$FC,$07,$00,$A0
 $9930 DEFB $F8,$0F,$01,$A0,$F8,$0F,$02,$80
 $9938 DEFB $E0,$0F,$07,$C0,$C0,$07,$0D,$60
 $9940 DEFB $C0,$07,$1F,$B0,$C0,$03,$19,$D0
 $9948 DEFB $C0,$03,$06,$F8,$F0,$03,$06,$D0
 $9950 DEFB $F0,$03,$02,$F8,$E0,$03,$02,$D0
 $9958 DEFB $E0,$07,$0E,$B0,$E0,$07,$06,$E0
 $9960 DEFB $F0,$07,$00,$E0,$F0,$07,$00,$70
 $9968 DEFB $E0,$03,$07,$60,$E0,$03,$0B,$78
 $9970 DEFB $E0,$03,$0B,$00,$E0,$1F,$0B,$40
 $9978 DEFB $F0,$1F,$07,$40,$E0,$0F,$06,$C0
 $9980 DEFB $C0,$0F,$0E,$E0,$C0,$0F,$1D,$E0
 $9988 DEFB $C0,$0F,$1B,$E0,$C0,$0F,$03,$E0
 $9990 DEFB $F0,$0F,$07,$C0,$F0,$0F,$07,$C0
 $9998 DEFB $F0,$0F,$07,$E0,$F0,$0F,$00,$00
 $99A0 DEFB $F0,$0F,$06,$E0,$F0,$0F,$04,$60
 $99A8 DEFB $E0,$0F,$06,$60,$E0,$07,$0A,$20
 $99B0 DEFB $E0,$07,$00,$30,$FF,$07,$00,$50
 $99B8 DEFB $E0,$0F,$07,$C0,$C0,$07,$0D,$60
 $99C0 DEFB $C0,$07,$1F,$B0,$C0,$03,$19,$D0
 $99C8 DEFB $C0,$03,$06,$F8,$F0,$03,$06,$D0
 $99D0 DEFB $F0,$03,$02,$F8,$E0,$03,$02,$D0
 $99D8 DEFB $E0,$07,$0E,$B0,$E0,$07,$06,$E0
 $99E0 DEFB $F0,$07,$00,$E0,$F0,$07,$00,$70
 $99E8 DEFB $E0,$03,$07,$60,$E0,$03,$0B,$78
 $99F0 DEFB $E0,$03,$0B,$00,$E0,$1F,$0B,$40
 $99F8 DEFB $E0,$1F,$0B,$40,$C0,$0F,$07,$40
 $9A00 DEFB $C0,$0F,$1E,$E0,$C0,$0F,$19,$E0
 $9A08 DEFB $C0,$0F,$03,$E0,$F8,$0F,$03,$E0
 $9A10 DEFB $F8,$07,$03,$E0,$F0,$03,$03,$F0
 $9A18 DEFB $F0,$03,$07,$F8,$F0,$03,$00,$00
 $9A20 DEFB $F0,$03,$07,$38,$F0,$03,$06,$18
 $9A28 DEFB $F0,$C3,$06,$18,$E0,$C1,$04,$08
 $9A30 DEFB $C1,$C1,$0C,$0C,$C1,$C1,$14,$14
 $9A38 DEFB $E0,$0F,$07,$C0,$C0,$07,$0D,$60
 $9A40 DEFB $C0,$07,$1F,$B0,$C0,$03,$19,$D0
 $9A48 DEFB $C0,$03,$06,$F8,$F0,$03,$06,$D0
 $9A50 DEFB $F0,$03,$02,$F8,$E0,$03,$02,$D0
 $9A58 DEFB $E0,$07,$0E,$B0,$E0,$07,$06,$E0
 $9A60 DEFB $F0,$07,$00,$E0,$F0,$07,$00,$70
 $9A68 DEFB $E0,$03,$07,$60,$E0,$03,$0B,$78
 $9A70 DEFB $E0,$03,$0B,$00,$E0,$1F,$0B,$40
 $9A78 DEFB $F0,$1F,$07,$40,$F0,$1F,$06,$C0
 $9A80 DEFB $E0,$0F,$06,$C0,$E0,$0F,$0E,$E0
 $9A88 DEFB $C0,$0F,$0D,$E0,$C0,$0F,$1B,$E0
 $9A90 DEFB $C0,$0F,$1B,$E0,$C0,$0F,$07,$C0
 $9A98 DEFB $F0,$1F,$07,$C0,$F0,$1F,$00,$00
 $9AA0 DEFB $F0,$07,$07,$80,$F0,$07,$01,$F0
 $9AA8 DEFB $FC,$07,$00,$20,$FC,$0F,$00,$A0
 $9AB0 DEFB $F8,$0F,$01,$80,$F8,$3F,$02,$80
 $9AB8 DEFB $E0,$0F,$07,$C0,$C0,$07,$0E,$E0
 $9AC0 DEFB $C0,$07,$1F,$F0,$C0,$07,$19,$D0
 $9AC8 DEFB $C0,$03,$06,$F0,$F0,$03,$06,$F8
 $9AD0 DEFB $F0,$03,$02,$F0,$E0,$07,$02,$D0
 $9AD8 DEFB $E0,$07,$0E,$F0,$E0,$07,$06,$E0
 $9AE0 DEFB $F0,$07,$00,$F0,$F0,$07,$00,$60
 $9AE8 DEFB $E0,$07,$07,$70,$E0,$03,$0B,$60
 $9AF0 DEFB $E0,$03,$0B,$78,$E0,$03,$0B,$00
 $9AF8 DEFB $E0,$1F,$0B,$40,$E0,$1F,$07,$40
 $9B00 DEFB $F0,$0F,$03,$40,$F0,$0F,$06,$E0
 $9B08 DEFB $E0,$0F,$06,$E0,$E0,$0F,$0D,$E0
 $9B10 DEFB $E0,$0F,$0D,$C0,$E0,$0F,$03,$C0
 $9B18 DEFB $F0,$0F,$07,$E0,$F0,$0F,$00,$00
 $9B20 DEFB $F0,$0F,$06,$E0,$F0,$0F,$04,$60
 $9B28 DEFB $E0,$0F,$06,$60,$E0,$07,$0A,$20
 $9B30 DEFB $E0,$07,$00,$30,$FF,$07,$00,$50
 $9B38 DEFB $E0,$0F,$07,$C0,$C0,$07,$0D,$60
 $9B40 DEFB $C0,$07,$1F,$B0,$C0,$03,$19,$D0
 $9B48 DEFB $C0,$03,$16,$F8,$C0,$03,$06,$D0
 $9B50 DEFB $F0,$03,$02,$F8,$E0,$03,$02,$D0
 $9B58 DEFB $E0,$07,$0E,$B0,$E0,$07,$06,$E0
 $9B60 DEFB $F0,$07,$00,$E0,$F0,$07,$00,$70
 $9B68 DEFB $E0,$07,$07,$60,$E0,$07,$0B,$70
 $9B70 DEFB $E0,$03,$0B,$60,$E0,$03,$0B,$78
 $9B78 DEFB $E0,$1F,$0B,$40,$C0,$0F,$07,$40
 $9B80 DEFB $C0,$0F,$1E,$E0,$C0,$0F,$19,$E0
 $9B88 DEFB $C0,$0F,$03,$E0,$F0,$07,$03,$E0
 $9B90 DEFB $F0,$07,$07,$F0,$E0,$03,$07,$F0
 $9B98 DEFB $E0,$03,$0F,$F8,$C0,$03,$03,$C0
 $9BA0 DEFB $80,$01,$1C,$38,$01,$80,$38,$1C
 $9BA8 DEFB $03,$C0,$40,$02,$1F,$F8,$C0,$03
 $9BB0 DEFB $1F,$F8,$00,$00,$FF,$FF,$00,$00
 $9BB8 DEFB $E0,$0F,$07,$C0,$C0,$07,$0D,$60
 $9BC0 DEFB $C0,$07,$1F,$B0,$C0,$03,$19,$D0
 $9BC8 DEFB $C0,$03,$16,$F8,$C0,$03,$06,$D0
 $9BD0 DEFB $F0,$03,$02,$F8,$E0,$03,$02,$D0
 $9BD8 DEFB $E0,$07,$0E,$B0,$E0,$07,$06,$E0
 $9BE0 DEFB $F0,$07,$00,$F0,$F0,$07,$00,$60
 $9BE8 DEFB $E0,$07,$07,$70,$E0,$03,$0B,$60
 $9BF0 DEFB $E0,$03,$06,$78,$E0,$03,$0E,$80
 $9BF8 DEFB $80,$1F,$1D,$C0,$80,$1F,$3B,$C0
 $9C00 DEFB $80,$0F,$31,$C0,$80,$0F,$03,$E0
 $9C08 DEFB $F8,$07,$03,$E0,$F0,$07,$03,$F0
 $9C10 DEFB $E0,$03,$07,$F0,$E0,$00,$0F,$F8
 $9C18 DEFB $E0,$00,$08,$FA,$E0,$00,$06,$77
 $9C20 DEFB $F0,$00,$04,$00,$F0,$FF,$06,$00
 $9C28 DEFB $F0,$FF,$06,$00,$F0,$FF,$04,$00
 $9C30 DEFB $F1,$FF,$00,$00,$FF,$FF,$00,$00

; Tom
;
; #CALL:print_mask(#PC,tomM)
; #CALL:print_player(#PC,tom)
b$9C38 DEFB $01,$FF,$00,$00,$00,$FF,$54,$00
 $9C40 DEFB $00,$7F,$7E,$00,$00,$7F,$C3,$00
 $9C48 DEFB $00,$3F,$3D,$00,$00,$3F,$7E,$80
 $9C50 DEFB $00,$3F,$1A,$80,$00,$0F,$F6,$00
 $9C58 DEFB $00,$07,$3D,$E0,$80,$03,$1B,$30
 $9C60 DEFB $80,$03,$36,$D8,$80,$03,$05,$E8
 $9C68 DEFB $F0,$03,$05,$E8,$F0,$03,$05,$E8
 $9C70 DEFB $F0,$03,$05,$E8,$F0,$03,$04,$D8
 $9C78 DEFB $F8,$07,$02,$D0,$F8,$03,$00,$C0
 $9C80 DEFB $F0,$03,$02,$D8,$F0,$03,$06,$D8
 $9C88 DEFB $E0,$03,$05,$D0,$E0,$03,$0D,$C8
 $9C90 DEFB $E0,$03,$0E,$38,$E0,$83,$0C,$38
 $9C98 DEFB $E0,$83,$0E,$38,$C0,$81,$04,$08
 $9CA0 DEFB $C0,$81,$1E,$3C,$C0,$81,$04,$08
 $9CA8 DEFB $E1,$C3,$0C,$18,$80,$01,$0C,$18
 $9CB0 DEFB $80,$01,$2E,$5C,$80,$01,$32,$64
 $9CB8 DEFB $00,$FF,$54,$00,$00,$7F,$7E,$00
 $9CC0 DEFB $00,$7F,$C3,$00,$00,$3F,$3D,$00
 $9CC8 DEFB $00,$3F,$7E,$80,$00,$3F,$1A,$80
 $9CD0 DEFB $00,$0F,$F6,$00,$00,$07,$3D,$E0
 $9CD8 DEFB $80,$03,$1B,$30,$80,$03,$36,$D8
 $9CE0 DEFB $80,$03,$05,$E8,$F0,$03,$05,$E8
 $9CE8 DEFB $F0,$03,$05,$E8,$F0,$03,$05,$D8
 $9CF0 DEFB $F0,$03,$05,$D8,$F0,$03,$05,$D0
 $9CF8 DEFB $F0,$03,$03,$80,$F0,$03,$07,$78
 $9D00 DEFB $C0,$03,$06,$F8,$C0,$03,$1C,$F0
 $9D08 DEFB $C0,$07,$19,$E0,$C0,$0F,$03,$C0
 $9D10 DEFB $F8,$1F,$03,$80,$F8,$1F,$03,$C0
 $9D18 DEFB $F8,$07,$01,$C0,$F8,$07,$01,$B0
 $9D20 DEFB $F8,$07,$03,$D0,$F8,$01,$00,$B0
 $9D28 DEFB $FC,$01,$01,$9C,$E0,$01,$01,$9C
 $9D30 DEFB $E0,$01,$0B,$D8,$E0,$03,$0E,$50
 $9D38 DEFB $00,$FF,$54,$00,$00,$7F,$7E,$00
 $9D40 DEFB $00,$7F,$C3,$00,$00,$3F,$3D,$00
 $9D48 DEFB $00,$3F,$7E,$80,$00,$3F,$1A,$80
 $9D50 DEFB $00,$0F,$F6,$00,$00,$07,$3D,$E0
 $9D58 DEFB $80,$03,$1B,$30,$80,$03,$36,$D8
 $9D60 DEFB $80,$03,$05,$E8,$F0,$03,$05,$E8
 $9D68 DEFB $F0,$03,$03,$E8,$F0,$03,$03,$D8
 $9D70 DEFB $C0,$03,$07,$B8,$00,$03,$1F,$70
 $9D78 DEFB $00,$03,$FC,$00,$00,$03,$D1,$F8
 $9D80 DEFB $00,$03,$01,$F8,$F0,$03,$02,$F0
 $9D88 DEFB $F0,$07,$06,$F0,$E0,$07,$06,$E0
 $9D90 DEFB $E0,$0F,$0E,$E0,$E0,$0F,$0C,$C0
 $9D98 DEFB $E0,$0F,$06,$60,$F0,$03,$07,$60
 $9DA0 DEFB $C0,$03,$02,$F8,$C0,$03,$17,$10
 $9DA8 DEFB $C0,$07,$1D,$30,$C0,$03,$00,$30
 $9DB0 DEFB $FC,$03,$01,$78,$FC,$03,$01,$C8
 $9DB8 DEFB $01,$FF,$00,$00,$00,$FF,$54,$00
 $9DC0 DEFB $00,$7F,$7E,$00,$00,$7F,$C3,$00
 $9DC8 DEFB $00,$3F,$3D,$00,$00,$3F,$7E,$80
 $9DD0 DEFB $00,$3F,$1A,$80,$00,$0F,$F6,$00
 $9DD8 DEFB $00,$07,$3D,$E0,$80,$03,$1B,$30
 $9DE0 DEFB $80,$03,$36,$D8,$80,$03,$06,$E8
 $9DE8 DEFB $F0,$03,$05,$E8,$F0,$03,$03,$E8
 $9DF0 DEFB $F0,$03,$03,$D8,$00,$03,$07,$B8
 $9DF8 DEFB $00,$03,$DF,$70,$00,$03,$FE,$00
 $9E00 DEFB $00,$03,$00,$F8,$F0,$03,$03,$78
 $9E08 DEFB $F0,$03,$07,$78,$E0,$03,$07,$B8
 $9E10 DEFB $E0,$03,$0F,$38,$E0,$03,$0C,$38
 $9E18 DEFB $E0,$83,$0E,$38,$E0,$83,$04,$10
 $9E20 DEFB $E0,$83,$0E,$38,$E0,$83,$04,$10
 $9E28 DEFB $E1,$C3,$0C,$18,$80,$01,$0C,$18
 $9E30 DEFB $80,$01,$2E,$5C,$80,$01,$32,$64
 $9E38 DEFB $00,$FF,$54,$00,$00,$7F,$7E,$00
 $9E40 DEFB $00,$7F,$C3,$00,$00,$3F,$3D,$00
 $9E48 DEFB $00,$3F,$7E,$80,$00,$3F,$1A,$80
 $9E50 DEFB $00,$0F,$F6,$00,$00,$07,$3D,$E0
 $9E58 DEFB $80,$03,$1B,$30,$80,$03,$36,$D8
 $9E60 DEFB $80,$03,$05,$E8,$F0,$03,$05,$E8
 $9E68 DEFB $F0,$03,$05,$E8,$F0,$03,$05,$E8
 $9E70 DEFB $F0,$03,$03,$D8,$E0,$03,$07,$B0
 $9E78 DEFB $00,$03,$0F,$00,$00,$03,$7C,$F8
 $9E80 DEFB $00,$03,$71,$F0,$04,$07,$21,$E0
 $9E88 DEFB $88,$07,$01,$E0,$F8,$07,$02,$F0
 $9E90 DEFB $F8,$07,$03,$70,$F8,$03,$03,$70
 $9E98 DEFB $F8,$01,$03,$98,$F0,$01,$01,$BC
 $9EA0 DEFB $F0,$01,$07,$C8,$F0,$01,$00,$98
 $9EA8 DEFB $FC,$01,$01,$9C,$F0,$01,$01,$9C
 $9EB0 DEFB $F0,$01,$05,$98,$F0,$03,$06,$B0
 $9EB8 DEFB $00,$FF,$54,$00,$00,$7F,$7E,$00
 $9EC0 DEFB $00,$7F,$C3,$00,$00,$3F,$3D,$00
 $9EC8 DEFB $00,$3F,$7E,$80,$00,$3F,$1A,$80
 $9ED0 DEFB $00,$0F,$F6,$00,$00,$07,$3D,$E0
 $9ED8 DEFB $80,$03,$1B,$30,$80,$03,$36,$D8
 $9EE0 DEFB $80,$03,$05,$E8,$F0,$03,$05,$E8
 $9EE8 DEFB $F0,$03,$05,$E8,$F0,$03,$05,$E8
 $9EF0 DEFB $F0,$03,$05,$E8,$F0,$03,$05,$D0
 $9EF8 DEFB $F8,$03,$01,$C0,$F0,$03,$03,$B8
 $9F00 DEFB $E0,$03,$07,$78,$E0,$03,$0E,$F0
 $9F08 DEFB $E0,$07,$0D,$E0,$E0,$07,$03,$90
 $9F10 DEFB $E0,$07,$0E,$30,$E0,$07,$04,$70
 $9F18 DEFB $E0,$07,$0F,$70,$E0,$03,$02,$20
 $9F20 DEFB $C0,$03,$03,$78,$C0,$03,$17,$90
 $9F28 DEFB $C0,$07,$1C,$B0,$C0,$03,$00,$30
 $9F30 DEFB $FC,$03,$01,$78,$FC,$03,$01,$C8
 $9F38 DEFB $00,$FF,$54,$00,$00,$7F,$7E,$00
 $9F40 DEFB $00,$7F,$C3,$00,$00,$3F,$3D,$00
 $9F48 DEFB $00,$3F,$7E,$80,$00,$3F,$1A,$80
 $9F50 DEFB $00,$0F,$F6,$00,$00,$07,$3D,$E0
 $9F58 DEFB $80,$03,$1B,$30,$80,$03,$36,$D8
 $9F60 DEFB $80,$03,$05,$E8,$F0,$03,$05,$E8
 $9F68 DEFB $F0,$03,$03,$E8,$F0,$03,$03,$D8
 $9F70 DEFB $C0,$03,$07,$B8,$00,$03,$1F,$70
 $9F78 DEFB $00,$03,$FC,$00,$00,$03,$D1,$F8
 $9F80 DEFB $00,$03,$01,$F8,$E0,$03,$06,$F8
 $9F88 DEFB $E0,$03,$0E,$F0,$C0,$01,$0F,$78
 $9F90 DEFB $C0,$01,$16,$3C,$80,$81,$0C,$0C
 $9F98 DEFB $81,$C0,$30,$18,$03,$C0,$18,$06
 $9FA0 DEFB $03,$F0,$B0,$07,$03,$C0,$F8,$04
 $9FA8 DEFB $03,$C1,$08,$14,$E3,$C1,$00,$18
 $9FB0 DEFB $FF,$C3,$00,$00,$FF,$FF,$00,$00
 $9FB8 DEFB $00,$FF,$54,$00,$00,$7F,$7E,$00
 $9FC0 DEFB $00,$7F,$C3,$00,$00,$3F,$3D,$00
 $9FC8 DEFB $00,$3F,$7E,$80,$00,$3F,$1A,$80
 $9FD0 DEFB $00,$0F,$F6,$00,$00,$07,$3D,$E0
 $9FD8 DEFB $80,$03,$1B,$30,$00,$03,$34,$D8
 $9FE0 DEFB $00,$03,$C3,$E8,$00,$03,$FF,$E8
 $9FE8 DEFB $00,$03,$FF,$D8,$00,$03,$00,$38
 $9FF0 DEFB $F0,$03,$07,$F8,$F0,$03,$03,$F0
 $9FF8 DEFB $C0,$03,$00,$00,$80,$03,$1B,$F8
 $A000 DEFB $80,$03,$3D,$F8,$80,$03,$3D,$F0
 $A008 DEFB $80,$07,$35,$E0,$80,$07,$39,$E0
 $A010 DEFB $80,$00,$10,$F0,$00,$00,$18,$F3
 $A018 DEFB $00,$00,$BC,$7E,$01,$00,$E4,$16
 $A020 DEFB $01,$C0,$00,$03,$FF,$F8,$00,$01
 $A028 DEFB $FF,$F8,$00,$03,$FF,$F8,$00,$00
 $A030 DEFB $FF,$FF,$00,$00,$FF,$FF,$00,$00

; Dick
;
; #CALL:print_mask(#PC,dickM)
; #CALL:print_player(#PC,dick)
b$A038 DEFB $FC,$3F,$00,$00,$FC,$3F,$01,$80
 $A040 DEFB $F8,$0F,$00,$00,$F0,$07,$03,$E0
 $A048 DEFB $E0,$07,$04,$10,$E0,$07,$0F,$F0
 $A050 DEFB $E0,$07,$00,$00,$C0,$07,$09,$90
 $A058 DEFB $C0,$07,$1F,$10,$C0,$07,$07,$A0
 $A060 DEFB $E0,$0F,$0E,$E0,$E0,$01,$0D,$00
 $A068 DEFB $E0,$01,$03,$FC,$F0,$01,$07,$18
 $A070 DEFB $E0,$01,$06,$E8,$E0,$01,$0E,$EC
 $A078 DEFB $C0,$01,$1F,$74,$C0,$01,$00,$30
 $A080 DEFB $C0,$01,$1F,$B4,$C0,$01,$1F,$C0
 $A088 DEFB $C0,$03,$0F,$D8,$E0,$03,$07,$D8
 $A090 DEFB $F0,$03,$03,$E0,$F0,$03,$03,$F0
 $A098 DEFB $F0,$03,$07,$C8,$F0,$03,$07,$B8
 $A0A0 DEFB $F0,$03,$07,$38,$E0,$01,$00,$00
 $A0A8 DEFB $E0,$01,$0F,$3C,$E0,$01,$00,$00
 $A0B0 DEFB $80,$01,$0F,$3C,$80,$01,$3B,$6C
 $A0B8 DEFB $FF,$0F,$00,$60,$FC,$07,$00,$00
 $A0C0 DEFB $F8,$03,$01,$F0,$F0,$03,$02,$08
 $A0C8 DEFB $F0,$03,$07,$F8,$F0,$03,$00,$00
 $A0D0 DEFB $E0,$03,$04,$C8,$E0,$03,$0F,$88
 $A0D8 DEFB $E0,$03,$03,$D0,$F0,$01,$07,$70
 $A0E0 DEFB $F0,$01,$06,$8C,$F0,$01,$01,$F8
 $A0E8 DEFB $F0,$03,$03,$38,$E0,$01,$06,$D8
 $A0F0 DEFB $C0,$01,$0E,$EC,$C0,$01,$1E,$EC
 $A0F8 DEFB $C0,$01,$00,$E0,$C0,$01,$1F,$6C
 $A100 DEFB $C0,$01,$1F,$6C,$C0,$01,$1F,$9C
 $A108 DEFB $C0,$01,$0F,$6C,$E0,$01,$07,$68
 $A110 DEFB $F0,$03,$03,$90,$F8,$07,$03,$E0
 $A118 DEFB $F8,$0F,$03,$C0,$F8,$0F,$03,$80
 $A120 DEFB $F8,$0F,$03,$A0,$F8,$03,$00,$20
 $A128 DEFB $F8,$03,$03,$D8,$F0,$03,$00,$30
 $A130 DEFB $C0,$07,$07,$A0,$C0,$0F,$1D,$80
 $A138 DEFB $FF,$0F,$00,$60,$FC,$07,$00,$00
 $A140 DEFB $F8,$03,$01,$F0,$F0,$03,$02,$08
 $A148 DEFB $F0,$03,$07,$F8,$F0,$03,$00,$00
 $A150 DEFB $E0,$03,$04,$C8,$E0,$03,$0F,$88
 $A158 DEFB $E0,$03,$03,$D0,$F0,$01,$07,$70
 $A160 DEFB $F0,$01,$06,$8C,$F0,$01,$01,$F8
 $A168 DEFB $F0,$03,$03,$18,$E0,$01,$06,$E8
 $A170 DEFB $C0,$01,$0E,$EC,$C0,$01,$1E,$EC
 $A178 DEFB $C0,$01,$01,$C0,$C0,$01,$1D,$BC
 $A180 DEFB $C0,$01,$1D,$BC,$C0,$01,$0C,$7C
 $A188 DEFB $E0,$01,$03,$7C,$F0,$01,$03,$78
 $A190 DEFB $E0,$03,$04,$F8,$E0,$03,$0F,$78
 $A198 DEFB $E0,$03,$00,$78,$F0,$03,$07,$B8
 $A1A0 DEFB $E0,$03,$00,$38,$80,$03,$0F,$00
 $A1A8 DEFB $80,$03,$3B,$78,$80,$03,$00,$00
 $A1B0 DEFB $F8,$07,$00,$F0,$F8,$07,$03,$B0
 $A1B8 DEFB $FF,$0F,$00,$00,$FF,$0F,$00,$60
 $A1C0 DEFB $F8,$0F,$00,$00,$F0,$07,$03,$E0
 $A1C8 DEFB $E0,$07,$04,$10,$E0,$07,$0F,$F0
 $A1D0 DEFB $E0,$07,$00,$00,$C0,$07,$09,$90
 $A1D8 DEFB $C0,$07,$1F,$10,$C0,$07,$07,$A0
 $A1E0 DEFB $E0,$0F,$0E,$E0,$E0,$01,$0D,$00
 $A1E8 DEFB $E0,$01,$03,$FC,$F0,$01,$07,$18
 $A1F0 DEFB $E0,$01,$06,$E8,$E0,$01,$0E,$EC
 $A1F8 DEFB $C0,$01,$1E,$EC,$C0,$01,$00,$E0
 $A200 DEFB $C0,$01,$1E,$EC,$C0,$01,$1E,$EC
 $A208 DEFB $C0,$01,$0F,$1C,$E0,$01,$06,$DC
 $A210 DEFB $F0,$01,$02,$D8,$F8,$03,$01,$38
 $A218 DEFB $F0,$03,$02,$F8,$F0,$03,$07,$78
 $A220 DEFB $F0,$03,$07,$B8,$E0,$01,$00,$00
 $A228 DEFB $E0,$01,$0F,$3C,$E0,$01,$00,$00
 $A230 DEFB $80,$01,$0F,$3C,$80,$01,$3A,$EC
 $A238 DEFB $FF,$0F,$00,$60,$FC,$07,$00,$00
 $A240 DEFB $F8,$03,$01,$F0,$F0,$03,$02,$08
 $A248 DEFB $F0,$03,$07,$F8,$F0,$03,$00,$00
 $A250 DEFB $E0,$03,$04,$C8,$E0,$03,$0F,$88
 $A258 DEFB $E0,$03,$03,$D0,$F0,$01,$07,$70
 $A260 DEFB $F0,$01,$06,$8C,$F0,$01,$01,$F8
 $A268 DEFB $F0,$03,$03,$18,$E0,$01,$06,$E8
 $A270 DEFB $C0,$01,$0E,$F4,$C0,$01,$1E,$F4
 $A278 DEFB $C0,$01,$00,$70,$C0,$01,$1F,$74
 $A280 DEFB $C0,$01,$1F,$74,$C0,$01,$1F,$8C
 $A288 DEFB $C0,$01,$0F,$6C,$E0,$01,$07,$6C
 $A290 DEFB $F0,$01,$03,$98,$F8,$03,$01,$F0
 $A298 DEFB $F8,$07,$02,$E0,$F8,$07,$02,$E0
 $A2A0 DEFB $F8,$07,$03,$70,$F8,$03,$00,$40
 $A2A8 DEFB $F8,$03,$03,$B8,$F0,$03,$00,$30
 $A2B0 DEFB $C0,$07,$06,$E0,$C0,$0F,$1D,$00
 $A2B8 DEFB $FF,$0F,$00,$60,$FC,$07,$00,$00
 $A2C0 DEFB $F8,$03,$01,$F0,$F0,$03,$02,$08
 $A2C8 DEFB $F0,$03,$07,$F8,$F0,$03,$00,$00
 $A2D0 DEFB $E0,$03,$04,$C8,$E0,$03,$0F,$88
 $A2D8 DEFB $E0,$03,$03,$D0,$F0,$01,$07,$70
 $A2E0 DEFB $F0,$01,$06,$8C,$F0,$01,$01,$F8
 $A2E8 DEFB $F0,$03,$03,$18,$E0,$01,$06,$E8
 $A2F0 DEFB $C0,$01,$0E,$EC,$C0,$01,$1F,$74
 $A2F8 DEFB $C0,$01,$00,$70,$C0,$01,$1F,$74
 $A300 DEFB $C0,$01,$1F,$8C,$C0,$01,$0D,$B4
 $A308 DEFB $E0,$01,$03,$B4,$F0,$01,$03,$C8
 $A310 DEFB $E0,$03,$07,$D0,$E0,$03,$0F,$B8
 $A318 DEFB $E0,$03,$00,$78,$F0,$03,$07,$B8
 $A320 DEFB $F0,$03,$00,$38,$C0,$03,$07,$80
 $A328 DEFB $C0,$03,$1D,$B8,$C0,$03,$00,$00
 $A330 DEFB $FC,$03,$00,$78,$FC,$03,$01,$D8
 $A338 DEFB $FF,$0F,$00,$60,$FC,$07,$00,$00
 $A340 DEFB $F8,$03,$01,$F0,$F0,$03,$02,$08
 $A348 DEFB $F0,$03,$07,$F8,$F0,$03,$00,$00
 $A350 DEFB $E0,$03,$04,$C8,$E0,$03,$0F,$88
 $A358 DEFB $E0,$03,$03,$D0,$F0,$01,$07,$70
 $A360 DEFB $F0,$01,$06,$8C,$F0,$01,$01,$F8
 $A368 DEFB $F0,$03,$03,$18,$E0,$01,$06,$E8
 $A370 DEFB $C0,$01,$0E,$EC,$C0,$01,$1E,$EC
 $A378 DEFB $C0,$01,$1E,$EC,$C0,$01,$04,$C0
 $A380 DEFB $C0,$01,$1B,$3C,$C0,$01,$1B,$78
 $A388 DEFB $C0,$03,$0C,$F8,$E0,$03,$07,$F8
 $A390 DEFB $F0,$03,$03,$F0,$E0,$07,$07,$E0
 $A398 DEFB $00,$03,$0F,$D0,$00,$00,$B7,$B8
 $A3A0 DEFB $00,$00,$9A,$76,$00,$00,$E8,$2C
 $A3A8 DEFB $03,$80,$30,$06,$87,$F0,$30,$02
 $A3B0 DEFB $87,$F8,$00,$00,$FF,$FF,$00,$00
 $A3B8 DEFB $FF,$0F,$00,$60,$FC,$07,$00,$00
 $A3C0 DEFB $F8,$03,$01,$F0,$F0,$03,$02,$08
 $A3C8 DEFB $F0,$03,$07,$F8,$F0,$03,$00,$00
 $A3D0 DEFB $E0,$03,$04,$C8,$E0,$03,$0F,$88
 $A3D8 DEFB $E0,$03,$03,$D0,$F0,$01,$07,$F0
 $A3E0 DEFB $F0,$01,$07,$04,$00,$01,$00,$F8
 $A3E8 DEFB $00,$03,$6F,$F8,$00,$03,$6F,$F0
 $A3F0 DEFB $00,$03,$00,$08,$C0,$03,$1F,$F8
 $A3F8 DEFB $C0,$01,$00,$00,$C0,$01,$1F,$FC
 $A400 DEFB $C0,$01,$1F,$FC,$C0,$00,$1F,$FC
 $A408 DEFB $00,$00,$0C,$FB,$00,$00,$83,$FB
 $A410 DEFB $00,$00,$97,$F2,$00,$00,$D7,$CB
 $A418 DEFB $00,$00,$56,$01,$00,$FC,$D0,$01
 $A420 DEFB $07,$FC,$C0,$00,$1F,$FF,$00,$00
 $A428 DEFB $FF,$FF,$00,$00,$FF,$FF,$00,$00
 $A430 DEFB $FF,$FF,$00,$00,$FF,$FF,$00,$00

; Harry
;
; #CALL:print_mask(#PC,harryM)
; #CALL:print_player(#PC,harry)
b$A438 DEFB $FF,$FF,$00,$00,$FF,$FF,$00,$00
 $A440 DEFB $FF,$FF,$00,$00,$E0,$FF,$00,$00
 $A448 DEFB $C0,$7F,$0A,$00,$80,$3F,$15,$00
 $A450 DEFB $80,$3F,$2A,$80,$00,$3F,$15,$00
 $A458 DEFB $00,$1F,$CA,$80,$00,$0F,$75,$40
 $A460 DEFB $00,$0F,$6A,$A0,$00,$0F,$35,$40
 $A468 DEFB $80,$0F,$0A,$A0,$C0,$07,$15,$40
 $A470 DEFB $C0,$03,$0A,$10,$C0,$03,$14,$E8
 $A478 DEFB $F8,$03,$02,$E8,$F8,$03,$03,$68
 $A480 DEFB $F8,$03,$03,$68,$F8,$03,$00,$60
 $A488 DEFB $F8,$01,$03,$88,$F8,$01,$03,$B4
 $A490 DEFB $F8,$01,$03,$B4,$F0,$01,$03,$CC
 $A498 DEFB $F0,$01,$07,$FC,$F0,$01,$02,$A8
 $A4A0 DEFB $E0,$03,$05,$50,$E0,$07,$0D,$E0
 $A4A8 DEFB $E0,$0F,$0D,$C0,$E0,$07,$06,$E0
 $A4B0 DEFB $80,$03,$06,$30,$80,$03,$39,$D8
 $A4B8 DEFB $FF,$FF,$00,$00,$E0,$FF,$00,$00
 $A4C0 DEFB $C0,$7F,$0A,$00,$80,$3F,$15,$00
 $A4C8 DEFB $80,$3F,$2A,$80,$00,$3F,$15,$00
 $A4D0 DEFB $00,$1F,$CA,$80,$00,$1F,$75,$40
 $A4D8 DEFB $00,$1F,$6A,$80,$00,$0F,$35,$40
 $A4E0 DEFB $80,$0F,$0A,$A0,$C0,$0F,$15,$40
 $A4E8 DEFB $C0,$07,$0A,$E0,$C0,$03,$15,$10
 $A4F0 DEFB $C0,$03,$02,$E8,$F8,$03,$02,$E8
 $A4F8 DEFB $F8,$03,$02,$E8,$F8,$03,$03,$68
 $A500 DEFB $F8,$03,$00,$60,$F8,$01,$03,$98
 $A508 DEFB $F8,$01,$03,$6C,$F8,$01,$03,$6C
 $A510 DEFB $F0,$01,$03,$9C,$F0,$01,$07,$FC
 $A518 DEFB $F0,$01,$02,$A8,$F0,$03,$01,$50
 $A520 DEFB $F0,$07,$05,$E0,$F0,$0F,$05,$80
 $A528 DEFB $F0,$0F,$05,$C0,$F0,$07,$02,$E0
 $A530 DEFB $C0,$07,$00,$70,$C0,$07,$1B,$80
 $A538 DEFB $FF,$FF,$00,$00,$E0,$FF,$00,$00
 $A540 DEFB $C0,$7F,$0A,$00,$80,$3F,$15,$00
 $A548 DEFB $80,$3F,$2A,$80,$00,$3F,$15,$00
 $A550 DEFB $00,$1F,$CA,$80,$00,$1F,$75,$40
 $A558 DEFB $00,$1F,$6A,$80,$00,$0F,$35,$40
 $A560 DEFB $80,$0F,$0A,$A0,$C0,$0F,$15,$40
 $A568 DEFB $C0,$07,$0A,$E0,$C0,$03,$15,$10
 $A570 DEFB $C0,$03,$02,$E8,$F8,$03,$02,$E8
 $A578 DEFB $F8,$03,$02,$E8,$F8,$03,$02,$E8
 $A580 DEFB $F8,$03,$00,$C0,$F8,$01,$03,$38
 $A588 DEFB $F8,$01,$02,$DC,$F8,$01,$02,$DC
 $A590 DEFB $F0,$01,$03,$3C,$F0,$01,$07,$FC
 $A598 DEFB $F0,$01,$02,$A8,$F8,$03,$01,$50
 $A5A0 DEFB $F8,$07,$03,$D0,$F8,$07,$03,$B0
 $A5A8 DEFB $F8,$07,$01,$B0,$FC,$03,$01,$D0
 $A5B0 DEFB $F0,$03,$00,$E8,$F0,$03,$07,$70
 $A5B8 DEFB $FF,$FF,$00,$00,$FF,$FF,$00,$00
 $A5C0 DEFB $FF,$FF,$00,$00,$C1,$FF,$00,$00
 $A5C8 DEFB $80,$FF,$14,$00,$00,$7F,$2A,$00
 $A5D0 DEFB $00,$3F,$55,$00,$00,$3F,$0A,$80
 $A5D8 DEFB $00,$3F,$D5,$00,$00,$1F,$6A,$80
 $A5E0 DEFB $00,$0F,$35,$40,$80,$0F,$2A,$A0
 $A5E8 DEFB $80,$0F,$15,$40,$C0,$07,$0A,$E0
 $A5F0 DEFB $C0,$03,$15,$10,$C0,$03,$02,$E8
 $A5F8 DEFB $F8,$03,$02,$E8,$F8,$03,$02,$E8
 $A600 DEFB $F8,$03,$02,$E8,$F8,$03,$00,$C0
 $A608 DEFB $F8,$01,$02,$58,$F8,$01,$01,$BC
 $A610 DEFB $F8,$01,$01,$BC,$F0,$01,$02,$7C
 $A618 DEFB $F0,$01,$07,$FC,$F0,$01,$02,$A8
 $A620 DEFB $E0,$03,$05,$D0,$E0,$07,$0F,$20
 $A628 DEFB $E0,$0F,$0E,$E0,$E0,$0F,$07,$60
 $A630 DEFB $80,$07,$07,$60,$80,$07,$3B,$B0
 $A638 DEFB $FF,$FF,$00,$00,$E0,$FF,$00,$00
 $A640 DEFB $C0,$7F,$0A,$00,$80,$3F,$15,$00
 $A648 DEFB $80,$3F,$2A,$80,$00,$3F,$15,$00
 $A650 DEFB $00,$1F,$CA,$80,$00,$1F,$75,$40
 $A658 DEFB $00,$1F,$6A,$80,$00,$0F,$35,$40
 $A660 DEFB $80,$0F,$0A,$A0,$C0,$0F,$15,$40
 $A668 DEFB $C0,$07,$0A,$E0,$C0,$03,$15,$10
 $A670 DEFB $C0,$03,$02,$E8,$F8,$03,$02,$E8
 $A678 DEFB $F8,$03,$02,$E8,$F8,$03,$02,$E8
 $A680 DEFB $F8,$03,$00,$E0,$F8,$01,$03,$28
 $A688 DEFB $F8,$01,$02,$DC,$F8,$01,$02,$DC
 $A690 DEFB $F0,$01,$03,$3C,$F0,$01,$07,$FC
 $A698 DEFB $F0,$01,$02,$A8,$F8,$03,$01,$70
 $A6A0 DEFB $F0,$07,$03,$C0,$F0,$1F,$07,$80
 $A6A8 DEFB $F0,$0F,$07,$40,$F0,$07,$03,$A0
 $A6B0 DEFB $C0,$07,$03,$B0,$C0,$07,$1D,$C0
 $A6B8 DEFB $FF,$FF,$00,$00,$E0,$FF,$00,$00
 $A6C0 DEFB $C0,$7F,$0A,$00,$80,$3F,$15,$00
 $A6C8 DEFB $80,$3F,$2A,$80,$00,$3F,$15,$00
 $A6D0 DEFB $00,$1F,$CA,$80,$00,$1F,$75,$40
 $A6D8 DEFB $00,$1F,$6A,$80,$00,$0F,$35,$40
 $A6E0 DEFB $80,$0F,$0A,$A0,$C0,$0F,$15,$40
 $A6E8 DEFB $C0,$07,$0A,$E0,$C0,$03,$15,$10
 $A6F0 DEFB $C0,$03,$02,$E8,$F8,$03,$02,$E8
 $A6F8 DEFB $F8,$03,$02,$E8,$F8,$03,$03,$68
 $A700 DEFB $F8,$03,$00,$60,$F8,$01,$03,$48
 $A708 DEFB $F8,$01,$03,$B4,$F8,$01,$03,$B4
 $A710 DEFB $F0,$01,$03,$CC,$F0,$01,$07,$FC
 $A718 DEFB $F0,$01,$02,$A8,$F8,$03,$01,$50
 $A720 DEFB $F0,$07,$02,$E0,$F0,$0F,$05,$C0
 $A728 DEFB $F0,$0F,$05,$E0,$F0,$07,$02,$E0
 $A730 DEFB $C0,$03,$00,$70,$C0,$03,$1B,$B8
 $A738 DEFB $FF,$FF,$00,$00,$E0,$FF,$00,$00
 $A740 DEFB $C0,$7F,$0A,$00,$80,$3F,$15,$00
 $A748 DEFB $80,$3F,$2A,$80,$00,$3F,$15,$00
 $A750 DEFB $00,$1F,$CA,$80,$00,$1F,$75,$40
 $A758 DEFB $00,$1F,$6A,$80,$00,$0F,$35,$40
 $A760 DEFB $80,$0F,$0A,$A0,$C0,$0F,$15,$40
 $A768 DEFB $C0,$07,$0A,$E0,$C0,$03,$15,$10
 $A770 DEFB $C0,$03,$02,$E8,$F0,$03,$00,$E8
 $A778 DEFB $C0,$03,$1B,$E8,$C0,$03,$1B,$D8
 $A780 DEFB $C0,$03,$00,$00,$F0,$03,$03,$F8
 $A788 DEFB $F0,$01,$07,$F8,$C0,$01,$07,$FC
 $A790 DEFB $80,$01,$1B,$FC,$80,$00,$3B,$FC
 $A798 DEFB $80,$00,$33,$FD,$80,$00,$32,$AB
 $A7A0 DEFB $80,$00,$38,$16,$83,$80,$38,$3D
 $A7A8 DEFB $01,$80,$18,$1D,$01,$C0,$EC,$01
 $A7B0 DEFB $01,$FC,$00,$00,$FF,$FF,$00,$00
 $A7B8 DEFB $FF,$FF,$00,$00,$E0,$FF,$00,$00
 $A7C0 DEFB $C0,$7F,$0A,$00,$80,$3F,$15,$00
 $A7C8 DEFB $80,$3F,$2A,$80,$00,$3F,$15,$00
 $A7D0 DEFB $00,$1F,$CA,$80,$00,$1F,$75,$40
 $A7D8 DEFB $00,$1F,$6A,$80,$00,$0F,$35,$40
 $A7E0 DEFB $80,$0F,$0A,$A0,$C0,$0F,$15,$40
 $A7E8 DEFB $C0,$07,$0A,$20,$00,$03,$01,$D0
 $A7F0 DEFB $00,$03,$DF,$E8,$00,$03,$DF,$E8
 $A7F8 DEFB $00,$03,$00,$18,$F8,$03,$03,$F8
 $A800 DEFB $F8,$03,$00,$00,$F0,$03,$03,$F8
 $A808 DEFB $E0,$01,$07,$F8,$00,$01,$0B,$FC
 $A810 DEFB $00,$00,$9B,$FC,$00,$00,$BB,$FD
 $A818 DEFB $00,$00,$BA,$AB,$00,$00,$70,$16
 $A820 DEFB $07,$80,$E0,$3D,$0F,$80,$80,$1D
 $A828 DEFB $3F,$C0,$00,$01,$FF,$FC,$00,$00
 $A830 DEFB $FF,$FF,$00,$00,$FF,$FF,$00,$00

; Temporary co-ordinates for putting static objects on screen
;
; Used by the routine at #R$A83D.
g$A838 DEFB $00,$00

; Unused
s$A83A DEFS $01

; Temporary store for the stack pointer for putting static objects on screen
g$A83B DEFW $0000

; Put a static object in the sprite buffer, without a mask
;
; Used by the routines at #R$EEC1, #R$F334, #R$F43C, #R$F4D3, #R$F572, #R$F6EC,
; #R$F746, #R$F773, #R$F814, #R$F93A and #R$F9F5.
;
; A ID of the object to draw.
;
; The location of the object to draw is stored at #R$A838.
; 
; .
;
; This routine is a copy of code used in Pyjamarama, the previous game in the series.
c$A83D DI            ; Disable interrupts.
 $A83E EXX           ; Exchange all main registers.
 $A83F PUSH AF       ; Remember the object ID.
 $A840 LD ($A83B),SP ; Remember the current stack pointer in #R$A83B.
 $A844 LD L,A        ; { Put the object ID in #REGhl.
 $A845 LD H,$00      ; } 
 $A847 ADD HL,HL     ; { Multiply by 32 to get a suitable offset.
 $A848 ADD HL,HL     ;
 $A849 ADD HL,HL     ;
 $A84A ADD HL,HL     ;
 $A84B ADD HL,HL     ; }
 $A84C LD SP,$8378   ; Point the stack at the start of the graphics buffer. (#R$8378)
 $A84F ADD HL,SP     ; { Add the offset so the stack is at the start of the graphic data.
 $A850 LD SP,HL      ; }
 $A851 LD A,($A838)  ; Get the x co-ordinate.
 $A854 LD B,A        ; Set this in #REGb.
 $A855 AND $07       ; Get the bottom 3 bits, which are the frame ID.
 $A857 INC A         ; { Add 1 to this and modifiy #N$A87B, which is executed later.
 $A858 LD ($A87B),A  ; }
 $A85B LD A,B        ; { Get the top 5 bits of the x co-ordinate, which are the byte.
 $A85C AND $F8       ;
 $A85E RRCA          ;
 $A85F RRCA          ;
 $A860 RRCA          ; }
 $A861 LD ($EFAF),A  ; Change the routine at #R$EF91 to use a different pointer in the buffer.
 $A864 ADD A,$02     ; { Move forward two columns and store this in #REGe.
 $A866 LD E,A        ; }
 $A867 LD A,($A839)  ; Get the Y co-ordinate.
 $A86A SUB $40       ; Subtract #N$40 to get an offset on screen.
 $A86C LD L,A        ; { Put this in #REGhl.
 $A86D LD H,$00      ; }
 $A86F ADD HL,HL     ; { Multiply by 32 so it points at the start of a row.
 $A870 ADD HL,HL     ;
 $A871 ADD HL,HL     ;
 $A872 ADD HL,HL     ;
 $A873 ADD HL,HL     ; }
 $A874 LD D,$6B      ; Point the high byte of #REGde at the sprite buffer. (#R$6B00)
 $A876 ADD HL,DE     ; Add this to the offset so #REGhl points to the correct row.
 $A877 LD C,$10      ; 16 rows to copy.
*$A879 POP DE        ; Put the next graphic data in #REGde.
 $A87A LD B,$00      ; Skip a number of frames. (This code was modified earlier in the routine)
 $A87C DEC B         ; { If this is frame 0, it sits on a byte boundary and there is one less byte to update.
 $A87D JR Z,$A889    ; }
 $A87F XOR A         ; Start with a value of 0 ie: all bits off.
*$A880 SRL E         ; Shift #REGe, putting 0 in bit 7.
 $A882 RR D          ; Rotate #REGd, respecting carry.
 $A884 RRA           ; Rotate #REGa, respecting carry.
 $A885 DJNZ $A880    ; Loop until we get the right frame.
 $A887 OR (HL)       ; { Do a logical OR of the byte with the data in #REGa.
 $A888 LD (HL),A     ; }
*$A889 DEC HL        ; Move back a byte.
 $A88A LD A,(HL)     ; { Do a logical OR of the byte with the data in #REGd.
 $A88B OR D          ;
 $A88C LD (HL),A     ; }
 $A88D DEC HL        ; Move back a byte.
 $A88E LD A,(HL)     ; { Do a logical OR of the byte with the data in #REGd.
 $A88F OR E          ;
 $A890 LD (HL),A     ; }
 $A891 LD DE,$0022   ; { Move to the next row
 $A894 ADD HL,DE     ; }
 $A895 DEC C         ; Decrement the number of rows to copy.
 $A896 JP NZ,$A879   ; Loop while there is more to draw.
 $A899 LD SP,($A83B) ; Restore the stack pointer.
 $A89D POP AF        ; Restore the object ID in #REGa.
 $A89E EXX           ; { Swap back all main registers and return.
 $A89F RET           ; }

; Draw a masked object in the sprite buffer
;
; Used by the routines at #R$ED2A, #R$ED8A, #R$F057, #R$F10E, #R$F24B, #R$F277,
; #R$F309, #R$F37D, #R$F3AB, #R$F409, #R$F49D, #R$F503, #R$F5F1, #R$F674,
; #R$F6EC and #R$F8B9.
;
; A ID of the graphic to update
;
; .
; The co-ordinates to update are stored in #R$A838.
c$A8A0 EXX           ; Exchange main registers.
 $A8A1 PUSH AF       ; Remember #REGaf.
 $A8A2 LD ($A83B),SP ; Store the stack pointer in #R$A83B.
 $A8A6 LD SP,$8378   ; Set the stack pointer to the start of the object graphics. (#R$8378)
 $A8A9 LD L,A        ; { Put the sprite ID in #REGhl.
 $A8AA LD H,$00      ; }
 $A8AC ADD HL,HL     ; { Multiply by 32.
 $A8AD ADD HL,HL     ;
 $A8AE ADD HL,HL     ;
 $A8AF ADD HL,HL     ;
 $A8B0 ADD HL,HL     ; }
 $A8B1 ADD HL,SP     ; { Use this to set the stack pointer at the graphic data for this object.
 $A8B2 LD SP,HL      ; }
 $A8B3 LD A,($A838)  ; { Put the X co-ordinate in #REGb.
 $A8B6 LD B,A        ; }
 $A8B7 AND $07       ; Get the bottom 3 bytes, which represents the frame number.
 $A8B9 INC A         ; { Add 1, and set this in #N$A8E0 and #N$A8FC which modifies later routines.
 $A8BA LD ($A8E0),A  ;
 $A8BD LD ($A8FC),A  ; }
 $A8C0 LD A,B        ; { Put the bottom 5 bits, which represents the byte, in #N$EFAF.
 $A8C1 AND $F8       ; This changes the logic in the routine to draw the fountain in the
 $A8C3 RRCA          ; town square at #R$EF91.
 $A8C4 RRCA          ;
 $A8C5 RRCA          ;
 $A8C6 LD ($EFAF),A  ; }
 $A8C9 ADD A,$02     ; { Add 2 to the byte and store it in #REGe.
 $A8CB LD E,A        ; }
 $A8CC LD C,$10      ; #N$10 rows to update.
 $A8CE LD A,($A839)  ; Get the Y co-ordinate.
 $A8D1 SUB $40       ; Subtract #N$40 to get an offset in the sprite buffer.
 $A8D3 LD L,A        ; { Put this in #REGhl.
 $A8D4 LD H,$00      ; }
 $A8D6 ADD HL,HL     ; { Multiply by 32 to get a row offset.
 $A8D7 ADD HL,HL     ;
 $A8D8 ADD HL,HL     ;
 $A8D9 ADD HL,HL     ;
 $A8DA ADD HL,HL     ; }
 $A8DB LD D,$6B      ; Set the high byte of #REGde to an offset in the sprite buffer. (#R$6B00)
 $A8DD ADD HL,DE     ; Add this.
*$A8DE POP DE        ; Get the next value (the mask) in #REGde.
; If this is not frame 0, it doesn't sit on a byte boundary and bits need shifting forwards.
 $A8DF LD B,$00      ; Set #REGb to the number of frames to loop around. (This code is modified earlier)
 $A8E1 DEC B         ; { If this is frame 0, there is one less byte to update.
 $A8E2 JR Z,$A8F0    ; }
 $A8E4 SCF           ; Set the carry flag, to use in rotating bits.
 $A8E5 LD A,$FF      ; Start with a mask of #N$FF ie: all bits on.
*$A8E7 RR E          ; { Rotate #REGe and #REGd, respecting carry.
 $A8E9 RR D          ; }
 $A8EB RRA           ; Rotate #REGa, respecting carry.
 $A8EC DJNZ $A8E7    ; Loop until we get to the right frame number.
 $A8EE AND (HL)      ; { Do a logical AND of the mask in #REGa against the byte in the sprite buffer.
 $A8EF LD (HL),A     ; }
*$A8F0 DEC HL        ; Move back a byte.
 $A8F1 LD A,(HL)     ; { Do a logical AND of the mask in #REGd against the byte in the sprite buffer.
 $A8F2 AND D         ;
 $A8F3 LD (HL),A     ; }
 $A8F4 DEC HL        ; Move back a byte.
 $A8F5 LD A,(HL)     ; { Do a logical AND of the mask in #REGe against the byte in the sprite buffer.
 $A8F6 AND E         ;
 $A8F7 LD (HL),A     ; }
 $A8F8 INC HL        ; { Move forward to the next byte in the buffer.
 $A8F9 INC HL        ; }
 $A8FA POP DE        ; Get the next value (the data) in #REGde.
 $A8FB LD B,$00      ; Set #REGb to the number of frames to loop around. (This code is modified earlier)
 $A8FD DEC B         ; { If this is frame 0, there is one less byte to update.
 $A8FE JR Z,$A90A    ; }
 $A900 XOR A         ; Start with data of 0 ie: all bits off
*$A901 SRL E         ; Shift #REGe to the right, putting 0 on bit 7.
 $A903 RR D          ; Rotate #REGd respecting carry.
 $A905 RRA           ; Rotate #REGa repsecting carry.
 $A906 DJNZ $A901    ; Loop until we get to the right frame number.
 $A908 OR (HL)       ; { Do a logical OR of the data in #REGa against the byte in the sprite buffer.
 $A909 LD (HL),A     ; }
*$A90A DEC HL        ; Move back a byte.
 $A90B LD A,(HL)     ; { Do a logical OR of the data in #REGd against the byte in the sprite buffer.
 $A90C OR D          ;
 $A90D LD (HL),A     ; }
 $A90E DEC HL        ; Move back a byte.
 $A90F LD A,(HL)     ; { Do a logical OR of the data in #REGd against the byte in the sprite buffer.
 $A910 OR E          ;
 $A911 LD (HL),A     ; }
 $A912 LD DE,$0022   ; { Move forward a row and two columns.
 $A915 ADD HL,DE     ; }
 $A916 DEC C         ; Decrement the row count.
 $A917 JP NZ,$A8DE   ; Loop while there are more rows to draw.
 $A91A EXX           ; Restore main registers.
 $A91B LD SP,($A83B) ; Restore the stack pointer.
 $A91F POP AF        ; { Restore #REGaf and return.
 $A920 RET           ; }

; Set the zero flag if the player is the current one
;
; Used by the routines at #R$A92C, #R$AA30, #R$B288 and #R$E79B.
;
; IY Pointer to player buffer.
c$A921 PUSH IY       ; { Copy the pointer to #REGhl.
 $A923 POP HL        ; }
 $A924 LD DE,($B09D) ; { Subtract the current base pointer to the buffer.
 $A928 AND A         ; 
 $A929 SBC HL,DE     ; }
 $A92B RET           ; Return, with the zero flag set if the pointers match.

; Move the computer controlled characters
;
; Used by the routine at #R$81AE.
;
; IY - base address of character data (#R$BC67 = Wally - #N$BC6B = Harry)
c$A92C PUSH IY         ; Store #REGiy
 $A92E LD A,(IY+$0F)   ; Get the room for the current character in #REGa.
 $A931 LD ($B951),A    ; Store this. (#R$B951)
 $A934 LD IY,$BC67     ; Point #REGiy at the first character.
 $A938 LD A,($B55F)    ; Get the "computer controlled" player flag.
 $A93B ADD A,$04       ; Add 4 to give either 4 (normal) or 5 (demo) characters to move.
 $A93D LD B,A          ; Set this in #REGb to loop through the characters.
*$A93E PUSH BC         ; Remember the character count.
 $A93F LD A,($B55F)    ; { Is this player computer controlled?
 $A942 OR A            ; }
 $A943 JR NZ,$A94C     ; Jump forward if so.
; This character is being controlled by the player, so nothing to do
 $A945 CALL $A921      ; Check this character is player-controlled.
 $A948 JR NZ,$A94C     ; Jump forward if not. (Should never get here).
 $A94A INC IY          ; Otherwise jump to the next character.
; This is a computer controlled character, so move them.
*$A94C LD A,(IY+$0F)   ; Get the room for the current character.
 $A94F CP (IY+$5A)     ; Does it equal the target room?
 $A952 JR NZ,$A95B     ; Jump forward if it doesn't.
 $A954 LD A,(IY-$14)   ; { Is the character in the room it wants to get to? (#R$BC53)
 $A957 OR A            ; }
 $A958 JP NZ,$A991     ; Jump forward if not.
*$A95B CALL $AFC4      ; If the character is in mid-air, drop them to the ground or a platform.
 $A95E LD A,(IY+$46)   ; { Is the character in mid-jump?
 $A961 OR A            ; }
 $A962 JR Z,$A96A      ; If not, move forward to handle movement.
 $A964 CALL $B1B9      ; { Otherwise finish off the jump.
 $A967 JP $A989        ; }
*$A96A LD A,(IY+$37)   ; { Is the character falling?
 $A96D OR A            ; }
 $A96E JR Z,$A975      ; If not, move forward to handle movement.
 $A970 CALL $B197      ; { Otherwise, finish off the fall.
 $A973 JR $A989        ; }
; The computer character can move, so do so.
*$A975 LD A,(IY+$64)   ; Get the computer character's next movement table. (#R$BCCB)
 $A978 ADD A,A         ; Double it to get a word offset.
 $A979 LD E,A          ; { Put the value in #REGde.
 $A97A LD D,$00        ; }
 $A97C LD HL,$AAA0     ; { Add the base address for the movement tables. (#R$AAA0)
 $A97F ADD HL,DE       ; }
 $A980 LD E,(HL)       ; { Put the address found in #REGde.
 $A981 INC HL          ; 
 $A982 LD D,(HL)       ; }
 $A983 EX DE,HL        ; Swap #REGde and #REGhl.
 $A984 LD DE,$A989     ; { Set #R$A989 as a return address.
 $A987 PUSH DE         ; }
 $A988 JP (HL)         ; Execute the routine.
; Control returns from the routine to this point.
*$A989 POP BC          ; Restore the character count.
 $A98A INC IY          ; Move to the next character.
 $A98C DJNZ $A93E      ; Loop until all the characters have moved.
 $A98E POP IY          ; { Restore #REGiy and return.
 $A990 RET             ; }
*$A991 CALL $AFC4      ; If the character is in mid-air, drop them to the ground or a platform.
 $A994 LD A,(IY+$46)   ; { Is the character in mid-jump?
 $A997 OR A            ; }
 $A998 JR Z,$A9A0      ; If not, move forward to handle movement.
 $A99A CALL $B1B9      ; { Otherwise finish off the jump.
 $A99D JP $A989        ; }
*$A9A0 LD A,(IY+$37)   ; { Is the character falling?
 $A9A3 OR A            ; }
 $A9A4 JR Z,$A9AC      ; If not, move forward to handle movement.
 $A9A6 CALL $B197      ; { Otherwise, finish off the fall.
 $A9A9 JP $A989        ; }
; The character can move, so do so.
*$A9AC LD A,(IY+$0A)   ; Get the Y position.
 $A9AF CP $98          ; Is it on the ground?
 $A9B1 JR Z,$A9CA      ; Jump forward if it is.
 $A9B3 LD A,(IY+$05)   ; Get the X position.
 $A9B6 CP $78          ; Is it less than #N$78?
 $A9B8 JR NC,$A9C4     ; Jump forward if it is.
 $A9BA LD (IY+$3C),$01 ; Set the character as mid-air.
*$A9BE CALL $B288      ; Move a character.
 $A9C1 JP $A989        ; Jump back to finish off the routine.
; The character is standing next to the wall, and can be built (?)
*$A9C4 LD (IY+$3C),$FF ;
 $A9C8 JR $A9BE        ;
; The character is standing in a room with an item, move them towards sawpping it.
*$A9CA LD B,(IY-$0F)   ; Get the room object index for this character. (#R$BC58)
 $A9CD CALL $AA8C      ; Get the address of the room object.
 $A9D0 INC HL          ; Move to the next position.
 $A9D1 LD A,(HL)       ; Get the X co-ordinate.
 $A9D2 PUSH AF         ; Store #REGaf.
 $A9D3 LD A,(IY+$05)   ; Get the X co-ordinate.
 $A9D6 CP (HL)         ; Does it match that of the item?
 $A9D7 JR NC,$A9DF     ; Jump if it's less.
 $A9D9 LD (IY+$3C),$01 ; { Set the character to go right.
 $A9DD JR $A9E3        ; }
*$A9DF LD (IY+$3C),$FF ; Otherwise set them to go left.
*$A9E3 CALL $B288      ; Move the character.
 $A9E6 POP AF          ; Restore #REGa.
 $A9E7 CP (IY+$05)     ; Is the character's X co-ordinate now the same as the item's.
 $A9EA JP NZ,$A989     ; Jump back if it isn't.
 $A9ED LD B,(IY-$0F)   ; Otherwise get the ID of the object to swap with.
 $A9F0 CALL $AA30      ; Swap an item.
 $A9F3 LD (IY-$14),$00 ; Mark the character as not in the target room. (#R$BC53)
 $A9F7 LD E,(IY+$78)   ; { Put the address of the character's swap buffer in #REGde.
 $A9FA LD D,(IY+$7D)   ; }
 $A9FD LD H,$00        ; Set #REGh to 0.
 $A9FF INC (IY-$05)    ; Move to the next index in the buffer.
 $AA02 LD L,(IY-$05)   ; Put the index in #REGl.
 $AA05 ADD HL,DE       ; Add the value in #REGhl to the start of the buffer to get the right address.
 $AA06 LD A,(HL)       ; Get the next swap item.
 $AA07 CP $FF          ; Is it an end marker?
 $AA09 JR NZ,$AA10     ; Jump forward if it isn't.
 $AA0B EX DE,HL        ; { Otherwise, set the index back to 0.
 $AA0C LD (IY-$05),$00 ; }
*$AA10 LD E,(HL)       ; Get the object ID in the buffer.
 $AA11 CALL $AE8A      ; Get the address of the object in #REGhl.
 $AA14 LD A,B          ; { Is the object index 0?
 $AA15 OR A            ; }
 $AA16 JR NZ,$AA24     ; If so, jump forward.
*$AA18 CALL $AED7      ; Return the next room that the character should swap in.
 $AA1B LD C,$00        ;
 $AA1D LD D,A          ; Put this in #REGd.
 $AA1E LD A,D          ; { Is the next room the current one?
 $AA1F CP (IY+$0F)     ; }
 $AA22 JR Z,$AA18      ; Jump back until it isn't.
*$AA24 LD (IY+$5A),D   ; Set the next target room. (#R$BCC1)
 $AA27 LD (IY-$0F),C   ; Set the room object index. (0?)
 $AA2A CALL $ADBA      ; Update the character.
 $AA2D JP $A989        ; Jump back to finish off the routine.

; Swap an item when a character moves over it
;
; Used by the routines at #R$A92C and #R$EB01.
;
; IY The base address of the character buffer (#R$BC67 - #N$BC6B)
c$AA30 PUSH HL       ; Remember #REGhl.
 $AA31 CALL $AA8C    ; Get the static object buffer for this room.
 $AA34 INC HL        ; { Move to the flags and put them in #REGa.
 $AA35 INC HL        ;
 $AA36 INC HL        ;
 $AA37 LD A,(HL)     ; }
 $AA38 AND (IY-$28)  ; Is the current character allowed to pick it up?
 $AA3B JR Z,$AA74    ; Jump foward if they aren't.
; The object the player is standing next to can be picked up, so do it.
 $AA3D LD A,(HL)     ; Get the flag again.
 $AA3E AND $80       ; Is bit 7 set?
 $AA40 JR Z,$AA49    ; Jump if it isn't.
 $AA42 PUSH HL       ; { Is the buffer at iy pointing to the current character?
 $AA43 CALL $A921    ;
 $AA46 POP HL        ; }
 $AA47 JR NZ,$AA74   ; Jump forward if it isn't.
; The object can only be collected by this player, and can be done.
*$AA49 LD A,(HL)     ; Put the flags in #REGa.
 $AA4A RES 7,A       ; Turn off bit 7.
 $AA4C LD D,A        ; Store this in #REGd.
 $AA4D LD A,(HL)     ; Put the flags in #REGa.
 $AA4E AND $80       ; Turn off bit 7.
 $AA50 OR (IY-$32)   ; Merge it with the flags at #R$BC35.
 $AA53 LD (HL),A     ; Set this as the new value to use.
 $AA54 LD A,(IY-$37) ; { Swap these flags with the values starting at #R$BC3A.
 $AA57 LD (IY-$32),A ; 
 $AA5A LD (IY-$37),D ; }
 $AA5D LD A,(IY+$55) ; Set #REGa to the second item held by this player.
 $AA60 DEC HL        ; { Move back to the start of the object buffer.
 $AA61 DEC HL        ;
 $AA62 DEC HL        ; }
 $AA63 LD E,(HL)     ; Put the old object ID in #REGe.
 $AA64 LD (HL),A     ; Replace it with this one.
 $AA65 LD A,(IY+$50) ; Set #REGa to the first item held by this player.
 $AA68 LD (IY+$55),A ; Set it at the second item.
 $AA6B LD (IY+$50),E ; Set the item that was in the room as the second item.
 $AA6E CALL $A921    ; Is the buffer at #REGiy pointing to the current character?
 $AA71 CALL Z,$E41D  ; If so, need to update the inventory.
*$AA74 LD A,($B951)  ; { Is the player in the current room?
 $AA77 CP (IY+$0F)   ; }
 $AA7A CALL Z,$AA7F  ; If so, play the "item swapped" sound.
 $AA7D POP HL        ; { Restore #REGhl and return.
 $AA7E RET           ; }

; Generate an "item swapped" sound effect
;
; Used by the routines at #R$AA30 and #R$EB0F.
c$AA7F LD BC,$FF0A   ; Set the pitch and "descending" times.
 $AA82 LD DE,$0114   ; Set the "static" and "ascending" times.
 $AA85 LD HL,$1401   ; Set the "descending" and "ascending" level.
 $AA88 CALL $E3D3    ; { Play the sound and return.
 $AA8B RET           ; }

; Get address of the item object buffer given its ID
;
; Used by the routines at #R$A92C, #R$AA30, #R$EB0F, #R$EB55, #R$EB95, #R$EC3D
; and #R$EEC1.
;
; B ID of the object to get data for.
; HL On exit, points to its data buffer.
c$AA8C LD A,(IY+$0F) ; Get the current room.
 $AA8F LD HL,$BCE9   ; Point #REGhl at the start of the object buffer data. (#R$BCE9)
 $AA92 CALL $AC6C    ; Get the address for this room's data.
 $AA95 LD A,B        ; { Is the object ID 0?
 $AA96 OR A          ; }
 $AA97 JR Z,$AA9F    ; Return if it is, it's already pointing to the right place.
; If the object ID is not zero, move to the right one.
*$AA99 INC HL        ; { Move forward four bytes to the next entry.
 $AA9A INC HL        ;
 $AA9B INC HL        ;
 $AA9C INC HL        ; }
 $AA9D DJNZ $AA99    ; Loop for 'n' number of times.
*$AA9F RET           ; Return.

; Jump table of movement actions
;
; Used by the routine at #R$A92C.
;
; .
;
; These entries are analagous to the co-ordinate table at #R$AF10, and show how
; a computer controlled character can get to a target co-ordinate.
w$AAA0 DEFW $AAB2   ; 0 : Far left of a room
 $AAA2 DEFW $AADD   ; 1 : Far right of a room
 $AAA4 DEFW $AB09   ; 2 : #N$78 , #N$98
 $AAA6 DEFW $AB26   ; 3 : #N$30 , #N$98
 $AAA8 DEFW $AB43   ; 4 : #N$C0 , #N$98
 $AAAA DEFW $AB60   ; 5 : #N$00 , #N$58 (The sewer, L)
 $AAAC DEFW $AB9B   ; 6 : #N$F0 , #N$58 (The sewer, R)
 $AAAE DEFW $AADD   ; 7 : Far right of a room (duplicate of 1)
 $AAB0 DEFW $AAB2   ; 8 : Far left of a room (duplicate of 0)

; Movement routine 0. Check a character can be moved left, and do so if
; possible
;
; Used by the routine at #R$A92C.
c$AAB2 LD A,(IY+$0A)   ; Get the Y co-ordinate.
 $AAB5 CP $98          ; Is it the floor?
 $AAB7 JR Z,$AACE      ; Jump forward if so.
 $AAB9 LD A,(IY+$0F)   ; Get the room number.
 $AABC CP $1F          ; Is it the sewer?
 $AABE JR NZ,$AACE     ; Jump forward if not.
 ; The sewer requires additional logic with computer characters.
 $AAC0 LD A,(IY+$05)   ; Get the X co-ordinate.
 $AAC3 CP $78          ; Is it less than #N$78?
 $AAC5 JR NC,$AACE     ; Jump forward if so.
 $AAC7 LD (IY+$3C),$01 ; Set to move right.
 $AACB JP $B288        ; Move the character.
*$AACE LD (IY+$3C),$FF ; Set to move left.
 $AAD2 CALL $B288      ; Move the character.
 $AAD5 LD A,(IY+$05)   ; Get the X co-ordinate.
 $AAD8 OR A            ; Is it zero?
 $AAD9 JP Z,$AE5D      ; If so, signal this is the end of the room.
 $AADC RET             ; Otherwise return.

; Movement routine 1. Check a character can be moved right, and do so if
; possible
;
; Used by the routine at #R$A92C.
c$AADD LD A,(IY+$0A)   ; Get the Y co-ordinate.
 $AAE0 CP $98          ; Is it the floor?
 $AAE2 JR Z,$AAF9      ; Jump forward if so.
 $AAE4 LD A,(IY+$0F)   ; Get the room number.
 $AAE7 CP $1F          ; Is it the sewer?
 $AAE9 JR NZ,$AAF9     ; Jump forward if not.
 ; The sewer requires additional logic with computer characters.
 $AAEB LD A,(IY+$05)   ; Get the X co-ordinate.
 $AAEE CP $78          ; Is it greater than #N$78?
 $AAF0 JR C,$AAF9      ; Jump forward if so.
 $AAF2 LD (IY+$3C),$FF ; Set to move left.
 $AAF6 JP $B288        ; Move the character
*$AAF9 LD (IY+$3C),$01 ; Set to move right.
 $AAFD CALL $B288      ; Move the character
 $AB00 LD A,(IY+$05)   ; Get the X co-ordinate.
 $AB03 CP $F0          ; Is it at the right edge?
 $AB05 JP Z,$AE5D      ; If so, signal this is the end of the room.
 $AB08 RET             ; Otherwise return.

; Movement routine 2. Move to #N$78 , #N$98
;
; Used by the routine at #R$A92C.
c$AB09 LD A,(IY+$05)   ; Get the X co-ordinate.
 $AB0C CP $78          ; { If it less than #N$78, move left, otherwise move right.
 $AB0E JR NC,$AB16     ; 
 $AB10 LD (IY+$3C),$01 ;
 $AB14 JR $AB1A        ;
*$AB16 LD (IY+$3C),$FF ; }
*$AB1A CALL $B288      ; Move the character.
 $AB1D LD A,(IY+$05)   ; Get the X co-ordinate.
 $AB20 CP $78          ; Is it now #N$78?
 $AB22 JP Z,$AE5D      ; If so, move to the next room.
 $AB25 RET             ; Otherwise return.

; Movement routine 3. Move to #N$30 , #N$98
;
; Used by the routine at #R$A92C.
c$AB26 LD A,(IY+$05)   ; Get the X co-ordinate.
 $AB29 CP $30          ; { If it less than #N$30, move left, otherwise move right.
 $AB2B JR NC,$AB33     ;
 $AB2D LD (IY+$3C),$01 ;
 $AB31 JR $AB37        ;
*$AB33 LD (IY+$3C),$FF ; }
*$AB37 CALL $B288      ; Move the character.
 $AB3A LD A,(IY+$05)   ; Get the X co-ordinate.
 $AB3D CP $30          ; Is it now #N$30?
 $AB3F JP Z,$AE5D      ; If so, move to the next room.
 $AB42 RET             ; Otherwise return.

; Movement routine 4. Move to #N$C0 , #N$98
;
; Used by the routine at #R$A92C.
c$AB43 LD A,(IY+$05)   ; Get the X co-ordinate.
 $AB46 CP $C0          ; { If it less than #N$C0, move left, otherwise move right.
 $AB48 JR NC,$AB50     ;
 $AB4A LD (IY+$3C),$01 ;
 $AB4E JR $AB54        ;
*$AB50 LD (IY+$3C),$FF ; }
*$AB54 CALL $B288      ; Move the character.
 $AB57 LD A,(IY+$05)   ; Get the X co-ordinate.
 $AB5A CP $C0          ; Is it now #N$C0?
 $AB5C JP Z,$AE5D      ; If so, move to the next room.
 $AB5F RET             ; Otherwise return.

; Movement routine 5. Move to 00, #N$58 (Sewer left)
;
; Used by the routine at #R$A92C.
c$AB60 LD A,(IY+$0A)   ; Get the Y co-ordinate.
 $AB63 CP $98          ; Is it #N$98 (ie: floor level).
 $AB65 JR NZ,$AB88     ; Jump forward if it isn't.
 $AB67 LD A,(IY+$05)   ; Get the X co-ordinate.
 $AB6A CP $66          ; { If it less than #N$66, move left, otherwise move right.
 $AB6C JR NC,$AB74     ;
 $AB6E LD (IY+$3C),$01 ;
 $AB72 JR $AB78        ;
*$AB74 LD (IY+$3C),$FF ; }
*$AB78 CALL $B288      ; Move the character.
 $AB7B LD A,(IY+$05)   ; Get the X co-ordinate.
 $AB7E CP $66          ; Is it now #N$66?
 $AB80 RET NZ          ; Return if it isn't.
*$AB81 LD (IY+$3C),$FF ; Otherwise set to move left.
 $AB85 JP $B1A6        ; Make the character jump.
; The character is not at ground level.
*$AB88 CP $58          ; Is the Y co-ordinate now #N$58?
 $AB8A JR NZ,$AB81     ; Move back if it isn't, to jump.
 $AB8C LD (IY+$3C),$FF ; Otherwise set to move left.
 $AB90 CALL $B288      ; Move the character.
 $AB93 LD A,(IY+$05)   ; Get the X co-ordinate.
 $AB96 OR A            ; Is it 0?
 $AB97 JP Z,$AE5D      ; If it is, move to a new room.
 $AB9A RET             ; Otherwise return.

; Movement routine 6. Move to #N$F0 , #N$58 (Sewer right)
;
; Used by the routine at #R$A92C.
c$AB9B LD A,(IY+$0A)   ; Get the Y co-ordinate.
 $AB9E CP $98          ; Is it #N$98 (ie: floor level).
 $ABA0 JR NZ,$ABC3     ; Jump forward if it isn't.
 $ABA2 LD A,(IY+$05)   ; Get the X co-ordinate.
 $ABA5 CP $8A          ; { If it less than #N$8A, move left, otherwise move right.
 $ABA7 JR NC,$ABAF     ;
 $ABA9 LD (IY+$3C),$01 ;
 $ABAD JR $ABB3        ;
*$ABAF LD (IY+$3C),$FF ; }
*$ABB3 CALL $B288      ; Move the charcter.
 $ABB6 LD A,(IY+$05)   ; Get the X co-ordinate.
 $ABB9 CP $8A          ; Is it now #N$8A?
 $ABBB RET NZ          ; Return if it isn't.
*$ABBC LD (IY+$3C),$01 ; Otherwise set to move right.
 $ABC0 JP $B1A6        ; Make the character jump.
; The character is not at ground level.
*$ABC3 CP $58          ; Is the Y co-ordinate now #N$58?
 $ABC5 JR NZ,$ABBC     ; Move back if it isn't, to jump.
 $ABC7 LD (IY+$3C),$01 ; Otherwise set to move right.
 $ABCB CALL $B288      ; Move the character.
 $ABCE LD A,(IY+$05)   ; Get the X co-ordinate.
 $ABD1 CP $F0          ; Is it #N$F0?
 $ABD3 JP Z,$AE5D      ; If it is, move to a new room.
 $ABD6 RET             ; Otherwise return.

; See if the 'in' key was pressed and set A to 1 if it was
;
; Used by the routines at #R$AC06, #R$ED2A and #R$F93A.
c$ABD7 LD A,($B2DB)  ; Get the current control mechanism. (#R$B2DB)
 $ABDA OR A          ; Is it 0? (Keyboard)
 $ABDB JR Z,$ABEA    ; Jump forward if it is.
 $ABDD CP $01        ; Is it 1? (Kempston)
 $ABDF JR NZ,$ABFC   ; Jump forward if it is.
; Handle Kempston input.
 $ABE1 IN A,($1F)    ; Read the Kempston interface.
 $ABE3 BIT 3,A       ; Was "up" pressed?
 $ABE5 JR Z,$AC04    ; Jump to set "no input" if it wasn't.
*$ABE7 LD A,$01      ; Other set "in pressed" and return.
 $ABE9 RET           ;
; Handle keyboard input.
*$ABEA LD A,$FD      ;
 $ABEC IN A,($FE)    ;
 $ABEE LD B,A        ;
 $ABEF LD A,$BF      ;
 $ABF1 IN A,($FE)    ;
 $ABF3 AND B         ;
 $ABF4 OR $E0        ;
 $ABF6 CP $FF        ;
 $ABF8 JR NZ,$ABE7   ;
 $ABFA JR $AC04      ;
; Handle Sinclair input.
*$ABFC LD A,$EF      ;
 $ABFE IN A,($FE)    ;
 $AC00 BIT 1,A       ;
 $AC02 JR Z,$ABE7    ;
; 'in' wasn't pressed, so reset the flag.
*$AC04 XOR A         ; { Set result as 0 and return.
 $AC05 RET           ; }

; New room check
;
; Used by the routine at #R$8184.
;
; IY Pointer to current character data (#R$BC67 - #N$BC6B)
;
; This routine sees if the character is at the left or right of
; the screen, or 'in' was pressed, and switches rooms if appropriate.
c$AC06 LD A,(IY+$05) ; Get the current player's x co-ordinate. (#R$BC6C)
 $AC09 OR A          ; Is it zero? (far left)
 $AC0A JR Z,$AC15    ; Jump forward if it is.
 $AC0C CP $F0        ; Is it #N$F0? (far right)
 $AC0E JR Z,$AC15    ; Jump forward if it is.
 $AC10 CALL $ABD7    ; { Was the 'in' key pressed?
 $AC13 OR A          ; }
 $AC14 RET Z         ; Return if not.
; Player has moved off screen, so do something.
*$AC15 LD A,(IY+$0F) ; Put the current room in #REGa.
 $AC18 CALL $AC69    ; Get the "next rooms" table for this room.
 $AC1B EX DE,HL      ; Swap #REGde and #REGhl, so the "next rooms" table is in #REGde.
; Loop through the entries in the room, seeing what can be done.
*$AC1C LD A,(DE)     ; Get the next entry.
 $AC1D CP $FF        ; Is this an 'end' marker?
 $AC1F RET Z         ; Return if it is.
 $AC20 LD B,A        ; Otherwise put the new room in #REGb.
 $AC21 INC DE        ; { Put the co-ordinate table in #REGa.
 $AC22 LD A,(DE)     ; }
 $AC23 INC DE        ;
 $AC24 INC DE        ;
 $AC25 CALL $AC5F    ; Get the co-ordinate table for this index.
 $AC28 LD A,(HL)     ; Get the X co-ordinate.
 $AC29 SUB (IY+$05)  ; { Is it close enough to the current X co-ordinate?
 $AC2C SUB $08       ;
 $AC2E CP $F0        ; }
 $AC30 JR C,$AC1C    ; Jump back if not.
; The X co-ordinate is in range.
 $AC32 INC HL        ; Get the Y co-ordinate.
 $AC33 LD A,(HL)     ; { Does it match the player's?
 $AC34 CP (IY+$0A)   ; }
 $AC37 JR NZ,$AC1C   ; Jump back if it doesn't.
 $AC39 DEC DE        ; Jump back to the X co-ordinate placeholder.
 $AC3A LD (IY+$0F),B ; Set the new room to #REGb.
 $AC3D LD A,(DE)     ;
 $AC3E CALL $AC5F    ; Get the co-ordinate table for this index.
 $AC41 LD A,(HL)     ; Get the X co-ordinate.
 $AC42 OR A          ; Is it zero?
 $AC43 JR NZ,$AC47   ; No, must have not come in from the left.
 $AC45 LD A,$02      ; Otherwise set the co-ordinate to be far left.
*$AC47 CP $F0        ; Is it far right?
 $AC49 JR NZ,$AC4D   ; No, must have come in from elsewhere.
 $AC4B LD A,$EE      ; Otherwise set the co-ordinates to be far right.
*$AC4D LD (IY+$05),A ; Write new X co-ordinate to memory.
 $AC50 INC HL        ; { Get the Y co-ordinate.
 $AC51 LD A,(HL)     ; }
 $AC52 LD (IY+$0A),A ; Set the new Y co-ordinate.
 $AC55 CALL $B952    ; Draw the room.
*$AC58 CALL $ABD7    ; { Wait until the 'in' key is released
 $AC5B OR A          ; before continuing.
 $AC5C JR NZ,$AC58   ; }
 $AC5E RET           ; Return.

; Get the address for the co-ordinate table of a room
;
; Used by the routines at #R$AC06, #R$AE5D and #R$F277.
;
; A The co-ordinate table index
; HL On exit, holds the address of the co-ordinate table to use
c$AC5F ADD A,A       ; Double the co-ordinate index to get a word offset.
 $AC60 LD HL,$AF10   ; Point #REGhl at the start of the co-ordinate tables. (#R$AF10)
 $AC63 ADD A,L       ; Add the offset to get the correct address.
 $AC64 JR NC,$AC67   ; { Increment the high byte if there was an overflow,
 $AC66 INC H         ; which shouldn't happen unless there's a bug. }
*$AC67 LD L,A        ; { Set the correct address and return.
 $AC68 RET           ; }

; Get the address of the next room table for this room and put it in HL
;
; Used by the routines at #R$AC06, #R$ADBA, #R$E79B and #R$F277.
c$AC69 LD HL,$AC7F   ; Start at the "next rooms" buffer (#R$AC7F).
                     ; Control continues to #R$AC6C.

; Search for #N$FF a number of times and return a pointer to the next entry after it
;
; Used by the routines at #R$AA8C, #R$BA6E and #R$EABF.
;
; HL The base address of item data. On return, points to the correct place for the room data.
; A The current room number
; B On return, holds the number of entries for this room
c$AC6C OR A          ; Is the current room 0?
 $AC6D RET Z         ; Return if it is, something's gone wrong.
; Looks like a valid room, so work out the address to return by
; counting the number of END (#N$FF) characters.
 $AC6E PUSH BC       ; { Remember #REGbc and #REGde.
 $AC6F PUSH DE       ; }
 $AC70 LD E,A        ; Put the room number in #REGe as the number
                     ; of matches to find.
 $AC71 LD A,$FF      ; Search for #N$FF.
 $AC73 LD BC,$0000   ; Search the entire memory.
*$AC76 CPIR          ; Look for it.
 $AC78 DEC E         ; Reduce the number of matches to find.
 $AC79 JP NZ,$AC76   ; Jump back if there are more entries to look for.
 $AC7C POP DE        ; { Restore #REGde and #REGbc and return.
 $AC7D POP BC        ; 
 $AC7E RET           ; }

; Next rooms : The Town Square
;
; #CALL:print_next_rooms(#PC)
b$AC7F DEFB $01,$01,$00,$18,$00,$01,$FF

; Next rooms : Stamp Street
;
; #CALL:print_next_rooms(#PC)
b$AC86 DEFB $03,$04,$01,$0D,$01,$00,$00,$00
 $AC8E DEFB $01,$02,$03,$01,$FF

; Next rooms : The Post Office
;
; #CALL:print_next_rooms(#PC)
b$AC93 DEFB $01,$01,$03,$FF

; Next rooms : Market Street
;
; #CALL:print_next_rooms(#PC)
b$AC97 DEFB $05,$00,$01,$04,$02,$00,$01,$01
 $AC9F DEFB $04,$FF

; Next rooms : The Super Market
;
; #CALL:print_next_rooms(#PC)
b$ACA1 DEFB $03,$00,$02,$FF

; Next rooms : The Park
;
; #CALL:print_next_rooms(#PC)
b$ACA5 DEFB $06,$00,$03,$03,$01,$00,$1F,$03
 $ACAD DEFB $05,$FF

; Next rooms : Wobbly Walk
;
; #CALL:print_next_rooms(#PC)
b$ACAF DEFB $07,$00,$03,$05,$03,$00,$10,$01
 $ACB7 DEFB $00,$0F,$04,$00,$FF

; Next rooms : Rubble Road
;
; #CALL:print_next_rooms(#PC)
b$ACBC DEFB $08,$01,$00,$0B,$00,$01,$06,$03
 $ACC4 DEFB $00,$0A,$04,$01,$FF

; Next rooms : Wall Street
;
; #CALL:print_next_rooms(#PC)
b$ACC9 DEFB $09,$01,$00,$07,$00,$01,$FF

; Next rooms : Pete Street
;
; #CALL:print_next_rooms(#PC)
b$ACD0 DEFB $0A,$04,$03,$08,$00,$01,$FF

; Next rooms : The Work Shed
;
; #CALL:print_next_rooms(#PC)
b$ACD7 DEFB $07,$01,$04,$09,$03,$04,$FF

; Next rooms : School Lane
;
; #CALL:print_next_rooms(#PC)
b$ACDE DEFB $0D,$00,$04,$0C,$02,$01,$07,$01
 $ACE6 DEFB $00,$FF

; Next rooms : The School
;
; #CALL:print_next_rooms(#PC)
b$ACE8 DEFB $0B,$01,$02,$FF

; Next rooms : Baker Street
;
; #CALL:print_next_rooms(#PC)
b$ACEC DEFB $01,$00,$01,$0E,$02,$01,$0B,$04
 $ACF4 DEFB $00,$FF

; Next rooms : The Bakers
;
; #CALL:print_next_rooms(#PC)
b$ACF6 DEFB $0D,$01,$02,$FF

; Next rooms : The Pub
;
; #CALL:print_next_rooms(#PC)
b$ACFA DEFB $06,$00,$04,$FF

; Next rooms : Motor Way
;
; #CALL:print_next_rooms(#PC)
b$ACFE DEFB $13,$01,$03,$06,$00,$01,$11,$03
 $AD06 DEFB $03,$12,$04,$00,$FF

; Next rooms : The Laboratory
;
; #CALL:print_next_rooms(#PC)
b$AD0B DEFB $10,$03,$03,$FF

; Next rooms : The Garage
;
; #CALL:print_next_rooms(#PC)
b$AD0F DEFB $10,$00,$04,$FF

; Next rooms : Reference Road
;
; #CALL:print_next_rooms(#PC)
b$AD13 DEFB $15,$01,$00,$14,$02,$00,$10,$03
 $AD1B DEFB $01,$FF

; Next rooms : The Library
;
; #CALL:print_next_rooms(#PC)
b$AD1D DEFB $13,$00,$02,$FF

; Next rooms : Penny Lane
;
; #CALL:print_next_rooms(#PC)
b$AD21 DEFB $13,$00,$01,$18,$01,$04,$16,$03
 $AD29 DEFB $00,$17,$04,$01,$FF

; Next rooms : The Bank
;
; #CALL:print_next_rooms(#PC)
b$AD2E DEFB $15,$00,$03,$FF

; Next rooms : Wally's House
;
; #CALL:print_next_rooms(#PC)
b$AD32 DEFB $15,$01,$04,$FF

; Next rooms : Meat Street
;
; #CALL:print_next_rooms(#PC)
b$AD36 DEFB $1A,$00,$01,$19,$03,$01,$00,$01
 $AD3E DEFB $00,$15,$04,$01,$FF

; Next rooms : The Butchers
;
; #CALL:print_next_rooms(#PC)
b$AD43 DEFB $18,$01,$03,$FF

; Next rooms : Trunk Road
;
; #CALL:print_next_rooms(#PC)
b$AD47 DEFB $1C,$04,$01,$1B,$03,$01,$18,$01
 $AD4F DEFB $00,$FF

; Next rooms : The Zoo
;
; #CALL:print_next_rooms(#PC)
b$AD51 DEFB $1A,$01,$03,$FF

; Next rooms : Rail Road
;
; #CALL:print_next_rooms(#PC)
b$AD55 DEFB $1E,$00,$01,$1D,$02,$01,$1A,$01
 $AD5D DEFB $04,$FF

; Next rooms : The Station
;
; #CALL:print_next_rooms(#PC)
b$AD5F DEFB $1C,$01,$02,$FF

; Next rooms : The Docks
;
; #CALL:print_next_rooms(#PC)
b$AD63 DEFB $1F,$02,$06,$1C,$01,$00,$FF

; Next rooms : The Sewer
;
; #CALL:print_next_rooms(#PC)
b$AD6A DEFB $05,$05,$03,$1E,$06,$02,$20,$00
 $AD72 DEFB $01,$FF

; Next rooms : The Cave
;
; #CALL:print_next_rooms(#PC)
b$AD74 DEFB $1F,$01,$00,$FF

; Table for next room to visit by a computer player
;
; Used by the routine in #R$ADBA.
b$AD78 DEFB $0C,$10     ; 00 : The Town Square
 $AD7A DEFB $0E,$10     ; 01 : Stamp Street
 $AD7C DEFB $0E,$11     ; 02 : Post Office
 $AD7E DEFB $10,$10     ; 03 : Market Street
 $AD80 DEFB $11,$10     ; 04 : The Super Market
 $AD82 DEFB $12,$0F     ; 05 : The Park
 $AD84 DEFB $13,$0D     ; 06 : Wobbly Walk
 $AD86 DEFB $14,$0B     ; 07 : Rubble Road
 $AD88 DEFB $15,$09     ; 08 : Wall Street
 $AD8A DEFB $17,$09     ; 09 : Pete Street
 $AD8C DEFB $16,$0B     ; 0A : The Work Shed
 $AD8E DEFB $14,$0E     ; 0B : School Lane
 $AD90 DEFB $15,$0F     ; 0C : The School
 $AD92 DEFB $10,$11     ; 0D : Baker Street
 $AD94 DEFB $10,$12     ; 0E : The Bakers
 $AD96 DEFB $14,$0D     ; 0F : The Pub
 $AD98 DEFB $11,$0C     ; 10 : Motor Way
 $AD9A DEFB $12,$0C     ; 11 : The Laboratory
 $AD9C DEFB $11,$0B     ; 12 : The Garage
 $AD9E DEFB $0F,$0C     ; 13 : Reference Road
 $ADA0 DEFB $0F,$0B     ; 14 : The Library
 $ADA2 DEFB $0D,$0D     ; 15 : Penny Lane
 $ADA4 DEFB $0C,$0D     ; 16 : The Bank
 $ADA6 DEFB $0D,$0C     ; 17 : Wally's House
 $ADA8 DEFB $0C,$0F     ; 18 : Meat Street
 $ADAA DEFB $0B,$0F     ; 19 : The Butcher's
 $ADAC DEFB $0A,$10     ; 1A : Trunk Road
 $ADAE DEFB $0A,$11     ; 1B : The Zoo
 $ADB0 DEFB $08,$11     ; 1C : Rail Road
 $ADB2 DEFB $08,$12     ; 1D : The Station
 $ADB4 DEFB $06,$12     ; 1E : The Docks
 $ADB6 DEFB $04,$13     ; 1F : The Sewer
 $ADB8 DEFB $05,$14     ; 20 : The Cave

; Move a computer-controlled character between rooms.
;
; Used by the routines at #R$A92C and #R$AE5D.
c$ADBA LD A,(IY+$0F)   ; Get the current room.
 $ADBD CP (IY+$5A)     ; Does it equal the target room? (#R$BCC1)
 $ADC0 JR NZ,$ADC7     ; Jump forward if not.
 $ADC2 LD (IY-$14),$01 ; { Otherwise signal character is in the target room and return.
 $ADC6 RET             ; }
; Move the character towards the target room.
*$ADC7 LD D,$FF        ; Set D as "no match".
 $ADC9 CALL $AC69      ; Get the "next rooms" table for this room in #REGhl.
 $ADCC LD A,(IY+$0F)   ; Put the character's current room in #REGa.
 $ADCF CALL $AE30      ; { Can the room only be accessed via the 'in' key?
 $ADD2 OR A            ; }
 $ADD3 JR Z,$AE18      ; Jump forward if not.
; Process a "next rooms" entry.
*$ADD5 LD A,(HL)       ; Get the next room to move to.
 $ADD6 CP $FF          ; Is it a terminating character (#N$FF) instead?
 $ADD8 JR Z,$AE26      ; Jump forward if so, the #REGb, #REGc and #REGd registers
                       ; contain the best target room and co-ordinates.
; Look at the "next rooms" entry to work out how to get there.
 $ADDA CALL $AE30      ; { Can the room only be accessed via the 'in' key?
 $ADDD CP $01          ; }
 $ADDF JR Z,$ADEA      ; Jump forward if so.
 $ADE1 LD A,(HL)       ; Get the room ID.
 $ADE2 CP (IY+$5A)     ; Is it the target room?
 $ADE5 JR NZ,$AE20     ; Jump forward if not to look at the next entry.
 $ADE7 XOR A           ; { Signal 0 (character will walk the whole room) and jump forward
 $ADE8 JR $AE18        ; to set it. }
*$ADEA LD A,(HL)       ; Get the target room ID.
 $ADEB CP (IY+$6E)     ; Is it the previously visited room? (#R$BCD5)
 $ADEE JR Z,$AE20      ; Jump forward if it is, we've just been here.
; Work out where to move the character.
 $ADF0 EXX             ; Swap main registers.
 $ADF1 ADD A,A         ; Double the ID to get a two byte offset.
 $ADF2 LD D,$00        ; { Put this in #REGde.
 $ADF4 LD E,A          ; }
 $ADF5 LD HL,$AD78     ; { Add the base offset for the movement table. (#R$AD78)
 $ADF8 ADD HL,DE       ; }
 $ADF9 LD C,(HL)       ; Put the first value in #REGc.
 $ADFA INC HL          ; { Put the second value in #REGb.
 $ADFB LD B,(HL)       ; }
 $ADFC LD A,(IY+$5A)   ; Get the movement ID of the target room.
 $ADFF ADD A,A         ; Double the ID to get a two byte offset.
 $AE00 LD E,A          ; Put this in #REGde.
 $AE01 LD HL,$AD78     ; { Add the base offset for the movement table. (#R$AD78)
 $AE04 ADD HL,DE       ; }
 $AE05 LD A,C          ; { Make #REGc the difference between the two values.
 $AE06 SUB (HL)        ;
 $AE07 JR NC,$AE0B     ;
 $AE09 NEG             ;
*$AE0B LD C,A          ; }
 $AE0C LD A,B          ; { Add the difference in the two values in #REGb to #REGa
 $AE0D INC HL          ; to give us a "score" for this room.
 $AE0E SUB (HL)        ;
 $AE0F JR NC,$AE13     ;
 $AE11 NEG             ;
*$AE13 ADD A,C         ; }
 $AE14 EXX             ; Swap main registers.
 $AE15 CP D            ; Compare with the current match.
 $AE16 JR NC,$AE20     ; If this difference is greater, don't use the entry and skip forward.
; A room to move to has been found that's better than any others yet looked at, so use it.
*$AE18 LD D,A          ; Set #REGd to the current best "score" for the next room.
 $AE19 LD B,(HL)       ; Put the desination room in #REGb.
 $AE1A INC HL          ; { Put the target co-ordinate to move to that room in #REGc.
 $AE1B LD C,(HL)       ; }
 $AE1C INC HL          ; { Put the new co-ordinate in the destination room in #REGe.
 $AE1D LD E,(HL)       ; }
 $AE1E JR $AE22        ; { Skip the next bit of code. }
; Didn't find the target to move to, so skip to the next one.
*$AE20 INC HL          ; { Move to the next entry.
 $AE21 INC HL          ; }
*$AE22 INC HL          ; Ensure #REGhl is pointing to the next place in the buffer.
 $AE23 JP $ADD5        ; Jump back to handle movement.
; Found the target room and co-ordinates to use for the next room, so set them.
*$AE26 LD (IY+$64),C   ; { Set the next room, target co-ordinates and new co-ordinates
 $AE29 LD (IY+$69),B   ; for this character. (#R$BCCB / #R$BCD0) / #R$BCDA)
 $AE2C LD (IY+$73),E   ; }
 $AE2F RET             ; Return.

; Get a flag to specify if a room can only be reached via the "in" key
;
; Used by the routine at #R$ADBA.
;
; A Holds the room number, returns with the appropriate flag
c$AE30 EXX           ; Swap general registers.
 $AE31 LD HL,$AE3C   ; Point #REGhl at the start of the flags. (#R$AE3C)
 $AE34 ADD A,L       ; Add the room number.
 $AE35 JR NC,$AE38   ; Move forward if there is no overflow (shouldn't be).
 $AE37 INC H         ; Otherwise increment #REGh to allow for carry.
*$AE38 LD L,A        ; Set the low byte to give the correct address.
 $AE39 LD A,(HL)     ; Put the flag for this room in #REGa.
 $AE3A EXX           ; { Swap back general registers and return.
 $AE3B RET           ; }

; Table of room flags.
;
; Used by the routine at #R$AE30.
;
; .
; 
; If the value is 1, the room can be accessed by moving of the edge of another room.
;
; .
;
; If the value is 0, the room can only be accessed using the 'in' key, or will not
; be visited by computer players.
b$AE3C DEFB $01     ; The Town Square
 $AE3D DEFB $01     ; Stamp Street
 $AE3E DEFB $00     ; The Post Office
 $AE3F DEFB $01     ; Market Street
 $AE40 DEFB $00     ; The Super Market
 $AE41 DEFB $01     ; The Park
 $AE42 DEFB $01     ; Wobbly Walk
 $AE43 DEFB $01     ; Rubble Road
 $AE44 DEFB $01     ; Wall Street
 $AE45 DEFB $01     ; Pete Street
 $AE46 DEFB $01     ; The Work Shed
 $AE47 DEFB $01     ; School Lane
 $AE48 DEFB $00     ; The School
 $AE49 DEFB $01     ; Baker Street
 $AE4A DEFB $00     ; The Bakers
 $AE4B DEFB $00     ; The Pub
 $AE4C DEFB $01     ; Motor Way
 $AE4D DEFB $00     ; The Laboratory
 $AE4E DEFB $00     ; The Garage
 $AE4F DEFB $01     ; Reference Road
 $AE50 DEFB $00     ; The Library
 $AE51 DEFB $01     ; Penny Lane
 $AE52 DEFB $00     ; The Bank
 $AE53 DEFB $00     ; Wally's House
 $AE54 DEFB $01     ; Meat Street
 $AE55 DEFB $00     ; The Butchers
 $AE56 DEFB $01     ; Trunk Road
 $AE57 DEFB $00     ; The Zoo
 $AE58 DEFB $01     ; Rail Road
 $AE59 DEFB $00     ; The Station
 $AE5A DEFB $01     ; The Docks
 $AE5B DEFB $01     ; The Sewer
 $AE5C DEFB $00     ; The Cave

; Get the new room and co-ordinates for a computer controlled player.
;
; Used by the routines at #R$AAB2, #R$AADD, #R$AB09, #R$AB26, #R$AB43, #R$AB60
; and #R$AB9B.
c$AE5D LD A,(IY+$0F) ; { Set the current room to the most recently visited room. 
 $AE60 LD (IY+$6E),A ; }
 $AE63 LD A,(IY+$69) ; { Set the target room as the current room.
 $AE66 LD (IY+$0F),A ; }
 $AE69 LD A,(IY+$73) ; Get the index of next co-ordinates to use. (#R$BCDA)
 $AE6C CALL $AC5F    ; Point #REGhl at the co-ordinate table to use.
 $AE6F LD A,(HL)     ; { Set the new x co-ordinate.
 $AE70 LD (IY+$05),A ; }
 $AE73 INC HL        ; { Set the new y co-ordinate.
 $AE74 LD A,(HL)     ;
 $AE75 LD (IY+$0A),A ; }
 $AE78 XOR A         ; { Set the current frame to 0.
 $AE79 LD (IY+$00),A ; }
 $AE7C CALL $ADBA    ; Update the character.
 $AE7F XOR A         ; Set #REGa to 0 to set some flags.
 $AE80 LD (IY+$37),A ; Set the character as on the ground (ie: not falling)
 $AE83 LD (IY+$3C),A ; Set the character to not jumping.
 $AE86 LD (IY+$46),A ; Set the character to not jumping in any direction.
 $AE89 RET           ; Return.

; Find the address of an item with the specified index
;
; Used by the routine at #R$A92C.
;
; E The item index
; HL On exit, holds of the address of the item data currently at that location
c$AE8A LD D,$00      ; Start at room 0.
 $AE8C LD BC,$21FF   ; Set #REGb to #N$21 (number of rooms) and #REGc to #N$FF (default index)
 $AE8F LD HL,$BCE9   ; Point #REGhl at the start of the object data. (#R$BCE9)
*$AE92 LD A,(HL)     ; Get the next ID.
 $AE93 CP $FF        ; Is this an end marker?
 $AE95 JR Z,$AEA0    ; Jump forward if it is.
 $AE97 INC HL        ; { Move to the next entry.
 $AE98 INC HL        ;
 $AE99 INC HL        ;
 $AE9A INC HL        ; }
 $AE9B INC C         ; Increment the index count.
 $AE9C CP E          ; Does this match the index?
 $AE9D JR NZ,$AE92   ; Jump back to look at more data if so.
 $AE9F RET           ; Otherwise return, #REGhl is now pointing at the data for this item.
; There is no object data here.
*$AEA0 LD C,$FF      ; Set C to "no item found".
 $AEA2 INC HL        ; Move to the next entry in the object buffer.
 $AEA3 INC D         ; Increment the room count.
 $AEA4 DJNZ $AE92    ; Loop while there are more rooms to look at.
 $AEA6 RET           ; Otherwise return.

; nth item swap list : Wally
b$AEA7 DEFB $1A,$1D,$00,$0F,$1C,$18,$23,$14
 $AEAF DEFB $FF

; nth item swap list : Wilma
b$AEB0 DEFB $01,$21,$04,$20,$11,$16,$19,$24
 $AEB8 DEFB $FF

; nth item swap list : Tom
b$AEB9 DEFB $0B,$15,$02,$13,$07,$28,$17,$25
 $AEC1 DEFB $FF

; nth item swap list : Dick
b$AEC2 DEFB $0D,$27,$12,$1F,$09,$22,$1E,$0A
 $AECA DEFB $FF

; nth item swap list : Harry
b$AECB DEFB $10,$03,$0E,$05,$1B,$06,$08,$26
 $AED3 DEFB $14,$FF

; The next room a computer character should swap
g$AED5 DEFW $AEEA

; Get the next room that a computer controlled character should swap items
;
; Used by the routine at #R$A92C.
;
; A On return, holds the room number
c$AED7 PUSH HL       ; Remember #REGhl.
 $AED8 LD HL,($AED5) ; Get the current pointer to the swap list. (#R$AED5)
 $AEDB LD A,(HL)     ; Get the next room.
 $AEDC CP $FF        ; Is it an end marker?
 $AEDE JR NZ,$AEE4   ; Jump forward if it isn't.
 $AEE0 LD HL,$AEEA   ; { Otherwise move back to the start of the list.
 $AEE3 LD A,(HL)     ; and get that item. }
*$AEE4 INC HL        ; { Move to the next position in the table
 $AEE5 LD ($AED5),HL ; and store it. }
 $AEE8 POP HL        ; { Restore #REGhl and return.
 $AEE9 RET           ; }

; List of rooms a computer player can swap items in. Terminated by FF.
;
; #CALL:print_next_room_table(#PC)
b$AEEA DEFB $02,$04,$05,$08,$09,$0A,$0B,$0C
 $AEF2 DEFB $0E,$0F,$11,$12,$14,$16,$17,$19
 $AEFA DEFB $1B,$1D,$1E,$1F,$20,$FF

; The next room for the jumping jack or Herbert to appear in
b$AF00 DEFB $0F

; Set the next room for the jumping jack or Herbert to appear in
;
; Used by the routines at #R$F10E and #R$F277.
c$AF01 LD A,($AF00)  ; Get the current room. (#R$AF00)
 $AF04 INC A         ; Move to the next one along.
 $AF05 CP $20        ; Have we reached room #N$20?
                     ; (Herbert doesn't appear in the sewer or the cave.)
 $AF07 JR NZ,$AF0A   ; Jump forward if not.
 $AF09 XOR A         ; Otherwise reset to room 0 (Town Square).
*$AF0A LD ($AF00),A  ; Set the new value.
 $AF0D XOR $15       ; { Flip bits 0, 3 and 5 and return.
 $AF0F RET           ; }

; Co-ordinate table
;
; Used by the routine at #R$AC5F.
;
; .
;
; This table contains the x and y co-ordinates for the entries in the
; 'next' room table. If the co-ordinates match and / or 'in' is pressed,
; the room should be switched.
b$AF10 DEFB $00,$98     ; 0 : Far left of a room.
 $AF12 DEFB $F0,$98     ; 1 : Far right of a room.
 $AF14 DEFB $78,$98     ; 2
 $AF16 DEFB $30,$98     ; 3
 $AF18 DEFB $C0,$98     ; 4
 $AF1A DEFB $00,$58     ; 5 : The sewer (left)
 $AF1C DEFB $F0,$58     ; 6 : The sewer (right)
 $AF1E DEFB $F0,$98     ; 7
 $AF20 DEFB $00,$98     ; 8

; Platform table 0 (most rooms)
b$AF22 DEFB $FF

; Platform table 1 (The Sewer)
;
; #CALL:print_platforms(#PC,$D17D,platforms_1)
b$AF23 DEFB $78,$00,$05,$80,$05,$06,$88,$06
 $AF2B DEFB $07,$90,$07,$08,$98,$08,$09,$A0
 $AF33 DEFB $09,$0A,$A8,$0A,$0B,$B0,$0B,$0C
 $AF3B DEFB $78,$1B,$20,$80,$1A,$1B,$88,$19
 $AF43 DEFB $1A,$90,$18,$19,$98,$17,$18,$A0
 $AF4B DEFB $16,$17,$A8,$15,$16,$B0,$14,$15
 $AF53 DEFB $FF

; Platform table 2 (The School)
;
; #CALL:print_platforms(#PC,$CF29,platforms_2)
b$AF54 DEFB $A0,$06,$09,$A0,$0B,$0E,$A0,$10
 $AF5C DEFB $13,$A0,$15,$18,$A0,$1A,$1D,$FF

; Platform table 3 (The Station)
;
; #CALL:print_platforms(#PC,$D153,platforms_3)
b$AF64 DEFB $A0,$13,$1B,$FF

; Platform table 4 (School Lane)
;
; #CALL:print_platforms(#PC,$CF09,platforms_4)
b$AF68 DEFB $A8,$02,$0A,$90,$03,$09,$78,$04
 $AF70 DEFB $08,$FF

; Platform table 5 (The Town Square)
;
; #CALL:print_platforms(#PC,$CDF7,platforms_5)
b$AF72 DEFB $A8,$03,$11,$98,$05,$0F,$80,$09
 $AF7A DEFB $0B,$FF

; Platform table 6 (unused)
b$AF7C DEFB $FF

; Platform table 7 (The Super Market)
;
; #CALL:print_platforms(#PC,$CE69,platforms_7)
b$AF7D DEFB $98,$01,$09,$FF,$00,$20,$FF

; Platform table 8 (The Pub)
;
; #CALL:print_platforms(#PC,$CF97,platforms_8)
b$AF84 DEFB $A0,$04,$1D,$FF

; Platform table 9 (Wall Street)
;
; #CALL:print_platforms(#PC,$CEC9,platforms_9)
b$AF88 DEFB $B8,$08,$0A,$78,$0C,$1C,$FF

; The address table for appropriate above-floor platforms in a room
;
; Each table contains three byte entries in the format
; y co-ordinate, leftmost co-ordinate, rightmost co-ordinate
; and is terminated by FF
w$AF8F DEFW $AF22
 $AF91 DEFW $AF23
 $AF93 DEFW $AF54
 $AF95 DEFW $AF64
 $AF97 DEFW $AF68
 $AF99 DEFW $AF72
 $AF9B DEFW $AF7C
 $AF9D DEFW $AF7D
 $AF9F DEFW $AF84
 $AFA1 DEFW $AF88

; Table containing the platform layout ID (see jump table in AF8F) for each
; room
b$AFA3 DEFB $05,$00,$00,$00,$07,$00,$00,$00
 $AFAB DEFB $09,$00,$00,$04,$02,$00,$00,$08
 $AFB3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $AFBB DEFB $00,$00,$00,$00,$00,$03,$00,$01
 $AFC3 DEFB $00

; See if a player is in mid-air, and drop them on a platform or ground
;
; Used by the routines at #R$A92C and #R$B09F.
c$AFC4 LD (IY+$37),$01 ; Set that the character is mid-air.
 $AFC8 LD A,(IY+$0F)   ; Get the current room.
 $AFCB LD E,A          ; { Put it in #REGde.
 $AFCC LD D,$00        ; }
 $AFCE LD HL,$AFA3     ; { Add the basic address for the room platform IDs. (#R$AFA3)
 $AFD1 ADD HL,DE       ; }
 $AFD2 LD A,(HL)       ; Get the platform ID.
 $AFD3 ADD A,A         ; Double it to get a word offset.
 $AFD4 LD E,A          ; Put this in #REGe. (#REGd already is 0)
 $AFD5 LD HL,$AF8F     ; { Add the basic address for the platform table.
 $AFD8 ADD HL,DE       ; }
 $AFD9 LD E,(HL)       ; { Put the actual address in #REGde.
 $AFDA INC HL          ;
 $AFDB LD D,(HL)       ; }
 $AFDC EX DE,HL        ; Exhange #REGde and #REGhl.
 $AFDD LD A,(IY+$0A)   ; Get the current Y co-ordinate.
 $AFE0 CP $98          ; Is it the floor?
 $AFE2 JR Z,$B006      ; Jump forward if so, nowhere to fall.
; The player is in mid-air. Can they land on a platform?
 $AFE4 ADD A,$20       ; Drop down a row.
 $AFE6 LD B,A          ; Put this in #REGb.
*$AFE7 LD A,(HL)       ; Get the Y co-ordinate.
 $AFE8 CP $FF          ; Is it an end-marker instead.
 $AFEA RET Z           ; Return if it is, nothing to do here.
; There are platforms in the room, is the player near any?
 $AFEB CP B            ; Does the Y co-ordinate match?
 $AFEC JR Z,$AFF3      ; Jump forward if it does.
 $AFEE INC HL          ; { Move to the next entry and try it.
*$AFEF INC HL          ;
*$AFF0 INC HL          ;
 $AFF1 JR $AFE7        ; }
; The player is on the right Y axis for a platform, what about the X axis?
*$AFF3 INC HL          ; Move to the leftmost co-ordinate.
 $AFF4 LD A,(IY+$05)   ; Get the X co-ordinate.
 $AFF7 ADD A,$08       ; { Reduce it to an offset between 00 and #N$1F.
 $AFF9 SRL A           ;
 $AFFB SRL A           ;
 $AFFD SRL A           ; }
 $AFFF CP (HL)         ; Is the current X co-ordinate greater or equal than
                       ; the one in this table?
 $B000 JR C,$AFEF      ; No, so loop back and try the next one.
 $B002 INC HL          ; Point #REGhl to the rightmost co-ordinate.
 $B003 CP (HL)         ; Is the current X co-ordinate less or equal than
                       ; the one in this table?
 $B004 JR NC,$AFF0     ; No, so loop back and try the next one.
; At this point, the player has either landed on the ground or a platform.
*$B006 LD (IY+$37),$00 ; { Reset the "mid-air" flag and return.
 $B00A RET             ; }

; Check that 'right' has been pressed, and set A to 1 if it has
;
; Used by the routines at #R$B09F, #R$F0C0 and #R$F93A.
c$B00B LD A,($B2DB)  ; Get the input mechanism. (#R$B2DB)
 $B00E OR A          ; Is it 0?
 $B00F JR Z,$B028    ; Jump forward if it is.
 $B011 CP $01        ; Is it 1?
 $B013 JR NZ,$B01D   ; Jump forward if it is.
; Use Kempston input
 $B015 IN A,($1F)    ; Read the Kempston interface.
 $B017 BIT 0,A       ; Was 'right' pressed?
 $B019 JR NZ,$B025   ; If so, jump forward to signal success.
 $B01B JR $B03A      ; Otherwise, jump forward to indicate nothing read.
; Use Sinclair input
*$B01D LD A,$EF      ;
 $B01F IN A,($FE)    ;
 $B021 BIT 3,A       ;
 $B023 JR NZ,$B03A   ;
; 'Left' was pressed, so indicate this.
*$B025 LD A,$01      ; { Return #REGa with 1 to mark success.
 $B027 RET           ; }
; Use keyboard input.
*$B028 LD A,$FB      ;
 $B02A IN A,($FE)    ;
 $B02C OR $F5        ;
 $B02E LD B,A        ;
 $B02F LD A,$DF      ;
 $B031 IN A,($FE)    ;
 $B033 OR $EA        ;
 $B035 AND B         ;
 $B036 CP $FF        ;
 $B038 JR NZ,$B025   ;
; 'Left' wasn't pressed, so indicate this.
*$B03A XOR A         ; { Return #REGa with 0.
 $B03B RET           ; }

; Check that 'left' has been pressed, and set A to 1 if it has
;
; Used by the routines at #R$B09F, #R$F0C0 and #R$F93A.
c$B03C LD A,($B2DB)  ; Get the input mechanism. (#R$B2DB)
 $B03F OR A          ; Is it 0?
 $B040 JR Z,$B059    ; Jump forward if it is.
 $B042 CP $01        ; Is it 1?
 $B044 JR NZ,$B04E   ; Jump forward if it is.
; Use Kempston input
 $B046 IN A,($1F)    ; Read the Kempston interface.
 $B048 BIT 1,A       ; Was 'left' pressed?
 $B04A JR NZ,$B056   ; If so, jump forward to signal success.
 $B04C JR $B06B      ; Otherwise, jump forward to indicate nothing read.
; Use Sinclair input
*$B04E LD A,$EF      ;
 $B050 IN A,($FE)    ;
 $B052 BIT 4,A       ;
 $B054 JR NZ,$B06B   ;
; 'Right' was pressed, so indicate this.
*$B056 LD A,$01      ; { Return #REGa with 1 to mark success.
 $B058 RET           ; }
; Use keyboard input.
*$B059 LD A,$FB      ;
 $B05B IN A,($FE)    ;
 $B05D OR $EA        ;
 $B05F LD B,A        ;
 $B060 LD A,$DF      ;
 $B062 IN A,($FE)    ;
 $B064 OR $F5        ;
 $B066 AND B         ;
 $B067 CP $FF        ;
 $B069 JR NZ,$B056   ;
; 'Right' wasn't pressed, so indicate this.
*$B06B XOR A         ; { Return #REGa with 0.
 $B06C RET           ; }

; Check that 'jump' has been pressed, and set A to 1 if it has
;
; Used by the routines at #R$B09F and #R$F9F5.
c$B06D LD A,($B2DB)  ; Get the input mechanism. (#R$B2DB)
 $B070 OR A          ; Is it 0?
 $B071 JR Z,$B08A    ; Jump forward if it is.
 $B073 CP $01        ; Is it 1?
 $B075 JR NZ,$B080   ; Jump forward if it is.
; Use Kempston input.
 $B077 IN A,($1F)    ; Read the Kempston interface.
 $B079 BIT 4,A       ; Was 'fire' pressed?
 $B07B JR Z,$B09B    ; If not, jump forward to indicate nothing read.
; 'Jump' / 'Fire' was pressed, so indicate this.
*$B07D LD A,$01      ; { Return #REGa with 1 to mark success.
 $B07F RET           ; }
; Use Sinclair input.
*$B080 LD A,$EF      ;
 $B082 IN A,($FE)    ;
 $B084 BIT 0,A       ;
 $B086 JR Z,$B07D    ;
 $B088 JR $B09B      ;
; Use keyboard input.
*$B08A LD A,$FE      ;
 $B08C IN A,($FE)    ;
 $B08E LD B,A        ;
 $B08F LD A,$7F      ;
 $B091 IN A,($FE)    ;
 $B093 AND B         ;
 $B094 OR $E0        ;
 $B096 CP $FF        ;
 $B098 JP NZ,$B07D   ;
; 'Jump' / 'Fire' wasn't pressed, so indicate this.
*$B09B XOR A         ; { Return #REGa with 0.
 $B09C RET           ; }

; Buffer for the current player
;
; During the game, the value of #REGiy is set to this value and used to access
; other character specific flags, such as endurance and items held.
;
; .
;
; #R$BC67 - Wally #N$BC68 - Wilma #N$BC69 - Tom #N$BC6A - Dick #N$BC6B - Harry
g$B09D DEFW $0000

; Check for user input and act on it
;
; Used by the routines at #R$8184 and #R$F177.
c$B09F LD IY,($B09D)   ; Point #REGiy at the current player buffer.
 $B0A3 LD A,(IY+$0F)   ; { Mark the current player's room as the current one. (#R$B951).
 $B0A6 LD ($B951),A    ; }
 $B0A9 CALL $AFC4      ; Drop the player to ground if they are in mid-air.
 $B0AC LD A,(IY+$46)   ; Set flag (?) to 0. (#R$BCAD)
 $B0AF OR A            ;
 $B0B0 JP NZ,$B1B9     ; If not zero, make the character jump.
 $B0B3 LD A,(IY+$37)   ; { Is the character on the ground? (???)
 $B0B6 OR A            ; }
 $B0B7 JP NZ,$B197     ; If not, make them fall one level.
 $B0BA CALL $B06D      ; { Was 'jump' pressed?
 $B0BD OR A            ; }
 $B0BE JP NZ,$B1A6     ; If it was, make the character jump.
 $B0C1 LD (IY+$3C),$00 ;
 $B0C5 CALL $B00B      ; { Was 'right' pressed?
 $B0C8 OR A            ; }
 $B0C9 JR Z,$B0D6      ; Jump forward if it wasn't.
 $B0CB LD (IY+$3C),$01 ; { Set the direction to "right".
 $B0CF LD (IY+$41),$01 ; }
 $B0D3 JP $B288        ; Move the character.
*$B0D6 CALL $B03C      ; { Was 'left' pressed?
 $B0D9 OR A            ; }
 $B0DA RET Z           ; Return if it wasn't, no input made.
 $B0DB LD (IY+$3C),$FF ; { Set the direction to "left".
 $B0DF LD (IY+$41),$FF ; }
 $B0E3 JP $B288        ; Move the character.

; Put a character into the sprite buffer
;
; Used by the routines at #R$B9D6, #R$EFC7 and #R$F177.
;
; IY The base address of the character buffer (BC67 - BC6B)
;
; . 
; This routine was copied from a similar one in Pyjamarama.
c$B0E6 EXX           ; Exchange main registers.
 $B0E7 LD E,(IY+$23) ; { Put the graphic address in #REGde. (#R$BC8A / #R$BC8F)
 $B0EA LD D,(IY+$28) ; }
 $B0ED LD ($A83B),SP ; Store a copy of the stack pointer. (#R$A83B)
 $B0F1 LD H,(IY+$00) ; { Put the frame number in #REGhl.
 $B0F4 LD L,$00      ; }
 $B0F6 SRL H         ; { Halve it to get the correct offset.
 $B0F8 RR L          ; }
 $B0FA ADD HL,DE     ; Add the base address.
 $B0FB LD SP,HL      ; Point the stack at the graphic to draw.
 $B0FC LD A,(IY+$05) ; Get the X co-ordinate.
 $B0FF LD B,A        ; Store this in #REGb.
 $B100 AND $07       ; { Put the bottom 3 bits (as the frame number) in #N$B189, 
 $B102 LD ($B189),A  ; which modifies later code. }
 $B105 INC A         ; {Add 1 and store in #N$B129 and #N$B145, which
 $B106 LD ($B129),A  ; modifies later code.
 $B109 LD ($B145),A  ; }
 $B10C LD A,B        ; { Put the top 5 bits (as the byte) as a value
 $B10D AND $F8       ; in #N$B17B, which modifies later code.
 $B10F RRCA          ;
 $B110 RRCA          ;
 $B111 RRCA          ;
 $B112 LD ($B17B),A  ; }
 $B115 ADD A,$02     ; { Add 2 and put this in #REGe. 
 $B117 LD E,A        ; }
 $B118 LD C,$20      ; #N20 rows to draw.
 $B11A LD L,(IY+$0A) ; { Put the Y co-ordinate in #REGhl.
 $B11D LD H,$00      ; }
 $B11F ADD HL,HL     ; { Multiply by 16 to get a suitable offset.
 $B120 ADD HL,HL     ;
 $B121 ADD HL,HL     ;
 $B122 ADD HL,HL     ;
 $B123 ADD HL,HL     ; }
 $B124 LD D,$63      ; Set the high byte of #REGde to the sprite buffer.
 $B126 ADD HL,DE     ; Add the offset.
*$B127 POP DE        ; Put the next byte (mask) in #REGde.
 $B128 LD B,$00      ; { Set #REGb to the number of times to loop.
                     ; (was modified earlier in the code) }
 $B12A DEC B         ; { If this is frame 0, nothing else is needed here,
 $B12B JR Z,$B139    ; and only two bytes need updating instead of three. }
; If this isn't frame 0, everything needs shifting to the right to be in sync.
 $B12D SCF           ; Set the carry flag, so the following RR instructions
                     ; put it in bit 7.
 $B12E LD A,$FF      ; Set the initial mask as #N$FF (all bits).
*$B130 RR E          ; { Rotate the mask in #REGe, then through #REGd,
 $B132 RR D          ; taking the carry flag through each time. }
 $B134 RRA           ; Shift the mask by one pixel.
 $B135 DJNZ $B130    ; Loop while there is more to do.
; At this point, #REGhl points to the address in the sprite buffer to update.
 $B137 AND (HL)      ; { Do a logical AND of the byte against the mask in #REGa.
 $B138 LD (HL),A     ; }
*$B139 DEC HL        ; Move back an entry in the sprite buffer.
 $B13A LD A,(HL)     ; { Do a logical AND of the byte against the mask in #REGd.
 $B13B AND D         ; 
 $B13C LD (HL),A     ; }
 $B13D DEC HL        ; Move back an entry in the sprite buffer.
 $B13E LD A,(HL)     ; { Do a logical AND of the byte against the mask in #REGe.
 $B13F AND E         ;
 $B140 LD (HL),A     ; }
 $B141 INC HL        ; { Move forward to the next position in the buffer.
 $B142 INC HL        ; }
 $B143 POP DE        ; Put the next byte (data) in #REGde.
 $B144 LD B,$00      ; { Set #REGb to the number of times to loop.
                     ; (Was modified in earlier code) }
 $B146 DEC B         ; { If this is frame 0, nothing else is needed here,
 $B147 JR Z,$B153    ; and two bytes need updating instead of three. }
 ; If this isn't frame 0, everything needs shifting to the right to be in sync.
 $B149 XOR A         ; Set the initial data as 0 (no bits).
*$B14A SRL E         ; Rotate the byte in #REGe, putting 0 in bit 7.
 $B14C RR D          ; Rotate the byte in #REGd, using the carry.
 $B14E RRA           ; Shift the data by one pixel.
 $B14F DJNZ $B14A    ; Loop while there is more to do.
 $B151 OR (HL)       ; { Do a logical OR of the byte against the data in #REGa.
 $B152 LD (HL),A     ; }
*$B153 DEC HL        ; Move back an entry in the sprite buffer.
 $B154 LD A,(HL)     ; { Do a logical OR of the byte against the data in #REGd.
 $B155 OR D          ; 
 $B156 LD (HL),A     ; }
 $B157 DEC HL        ; Move back an entry in the sprite buffer.
 $B158 LD A,(HL)     ; { Do a logical OR of the byte against the data in #REGe.
 $B159 OR E          ;
 $B15A LD (HL),A     ; }
 $B15B LD DE,$0022   ; { Move to the next row.
 $B15E ADD HL,DE     ; }
 $B15F DEC C         ; Decrement the number of rows left.
 $B160 JP NZ,$B127   ; Jump back if there are more rows to draw. 
; Now handle the attributes.
 $B163 LD A,(IY+$0A) ; { Get the bottom 3 bits of the Y co-ordinate, as the sub-component.
 $B166 AND $07       ; }
 $B168 JR Z,$B16E    ; { If this equals 0, set 4 rows to draw, otherwise 45.
 $B16A LD B,$05      ; 
 $B16C JR $B170      ;
*$B16E LD B,$04      ; }
*$B170 LD A,(IY+$0A) ; { Get the top 5 bits of the Y co-ordinate, as the byte.
 $B173 AND $F8       ; }
 $B175 LD H,$00      ; { Put this in #REGhl.
 $B177 LD L,A        ; }
 $B178 ADD HL,HL     ; { Multiply by 4.
 $B179 ADD HL,HL     ; }
 $B17A LD DE,$FB00   ; { Add the base address to get a location in the attribute buffer. (#R$FC00)
 $B17D ADD HL,DE     ; }
 $B17E LD DE,$001E   ; Set #REGde as the offset to move between rows.
 $B181 LD C,(IY+$1E) ; Put the attribute to use in #REGc. (#R$BC85)
*$B184 LD (HL),C     ; { Set the attribute for the next two bytes.
 $B185 INC HL        ;
 $B186 LD (HL),C     ;
 $B187 INC HL        ; }
 $B188 LD A,$FF      ; Put the X offset in #REGa. (This is modified by earlier code)
 $B18A OR A          ; Is the offset zero?
 $B18B JR Z,$B18E    ; If it is, jump forward, no more calculations needed.
 $B18D LD (HL),C     ; Otherwise set the attribute for the third byte.
                     ; which is needed on frames other than 0 that span a byte boundary.
*$B18E ADD HL,DE     ; Move forward a row and back two columns.
 $B18F DJNZ $B184    ; Loop while there is more to draw.
 $B191 EXX           ; Exchange main registers.
 $B192 LD SP,($A83B) ; { Restore the stack and return.
 $B196 RET           ; }

; Drop the current character's height down one notch up to floor level
;
; Used by the routines at #R$A92C and #R$B09F.
c$B197 LD A,(IY+$0A) ; Get the Y co-ordinate.
 $B19A ADD A,$04     ; Add 4 to it to drop down one level.
 $B19C CP $98        ; { Set the maximum Y co-ordinate to #N$98
 $B19E JR C,$B1A2    ; so they can't drop below floor level.
 $B1A0 LD A,$98      ; }
*$B1A2 LD (IY+$0A),A ; { Store the new Y co-ordinate and return.
 $B1A5 RET           ; }

; Make the current character jump
;
; Used by the routines at #R$AB60, #R$AB9B and #R$B09F.
c$B1A6 LD A,(IY+$3C)   ; { Is the character moving? (#R$BCA3)
 $B1A9 OR A            ; }
 $B1AA JR NZ,$B1B2     ; Move forward if they are.
 $B1AC LD A,(IY+$41)   ; { Copy the current direction (#R$BCA8)
 $B1AF LD (IY+$3C),A   ; to the movement flag. }
*$B1B2 LD (IY+$46),A   ; Copy this to the jump flag. #R$BCAD
 $B1B5 LD (IY+$4B),$00 ; Set the jump table index to 0. #R$BCB2
; This entry point is used by the routines at #R$A92C and #R$B09F.
*$B1B9 LD A,(IY+$3C)   ; Get the direction.
 $B1BC CP $01          ; Is the character facing right?
 $B1BE JR Z,$B21C      ; Move to handle that if so.
; Character is jumping left.
 $B1C0 LD A,(IY+$4B)   ; Get the jump table index.
 $B1C3 LD E,A          ; { Multiply by 3 and store in #REGde.
 $B1C4 ADD A,A         ;
 $B1C5 ADD A,E         ;
 $B1C6 LD E,A          ; 
 $B1C7 LD D,$00        ; }
 $B1C9 LD HL,$B264     ; { Add the base address of the jump table (#R$B264)
 $B1CC ADD HL,DE       ; to get an offset. }
 $B1CD LD E,(HL)       ; Put the X offset in #REGe.
 $B1CE INC HL          ; { Put the Y offset in #REGd.
 $B1CF LD D,(HL)       ; }
 $B1D0 INC HL          ; { Put the graphic frame number in #REGb.
 $B1D1 LD B,(HL)       ; }
 $B1D2 LD A,D          ;
 $B1D3 DEC A           ;
 $B1D4 BIT 7,A         ;
 $B1D6 JR NZ,$B1ED     ;
 $B1D8 LD A,(IY+$37)   ;
 $B1DB OR A            ;
 $B1DC JR NZ,$B1ED     ;
 $B1DE LD A,(IY+$0A)   ;
 $B1E1 AND $07         ;
 $B1E3 JR NZ,$B1ED     ;
 $B1E5 LD (IY+$4B),$0B ;
 $B1E9 LD B,$00        ;
 $B1EB JR $B205        ;
*$B1ED LD A,(IY-$3C)   ;
 $B1F0 OR A            ;
 $B1F1 CALL NZ,$81D4   ; If not, need to change direction.
 $B1F4 LD A,(IY+$0A)   ;
 $B1F7 ADD A,D         ;
 $B1F8 LD (IY+$0A),A   ;
 $B1FB LD A,(IY+$05)   ; Get the X co-ordinate.
 $B1FE SUB E           ;
 $B1FF JR NC,$B202     ;
 $B201 XOR A           ;
; Common exit point for jumping left and right.
*$B202 LD (IY+$05),A   ; Set the current X co-ordinate (#R$BC6C) to #REGa.
*$B205 LD (IY+$00),B   ; Set the current frame number (#R$BC67) to #REGb.
 $B208 INC (IY+$4B)    ; Increment the jump table index.
 $B20B LD A,(IY+$4B)   ; { Have we reached the end of the table?
 $B20E CP $0C          ; }
 $B210 RET NZ          ; Return if not.
 $B211 LD (IY+$3C),$00 ; { Set flags as "not jumping"
 $B215 LD (IY+$46),$00 ; }
 $B219 JP $E315        ; Play a landing footstep sound and return.
; Character is jumping right.
*$B21C LD A,(IY+$4B)   ; Get the jump frame number.
 $B21F LD E,A          ; { Multiply by 3 and store in #REGde.
 $B220 ADD A,A         ;
 $B221 ADD A,E         ;
 $B222 LD E,A          ;
 $B223 LD D,$00        ; }
 $B225 LD HL,$B264     ; { Add the base address of the jump table (#R$B264)
 $B228 ADD HL,DE       ; to get an offset. }
 $B229 LD E,(HL)       ; Put the X offset in #REGe.
 $B22A INC HL          ; { Put the Y offset in #REGd.
 $B22B LD D,(HL)       ; }
 $B22C INC HL          ; { Put the graphic frame number in #REGb.
 $B22D LD B,(HL)       ; }
 $B22E LD A,D          ;
 $B22F DEC A           ;
 $B230 BIT 7,A         ;
 $B232 JR NZ,$B249     ;
 $B234 LD A,(IY+$37)   ;
 $B237 OR A            ;
 $B238 JR NZ,$B249     ;
 $B23A LD A,(IY+$0A)   ;
 $B23D AND $07         ;
 $B23F JR NZ,$B249     ;
 $B241 LD (IY+$4B),$0B ;
 $B245 LD B,$00        ; Set the frame number to 0.
 $B247 JR $B205        ; Jump back to update the sequence.
*$B249 LD A,(IY-$3C)   ;
 $B24C OR A            ;
 $B24D CALL Z,$81D4    ; If so, need to change direction.
 $B250 LD A,(IY+$0A)   ;
 $B253 ADD A,D         ;
 $B254 LD (IY+$0A),A   ;
 $B257 LD A,(IY+$05)   ; Get the X co-ordinate.
 $B25A ADD A,E         ;
 $B25B CP $F0          ;
 $B25D JR C,$B202      ;
 $B25F LD A,$F0        ;
 $B261 JP $B202        ; Jump back and continue.

; Jump movement table
;
; Each entry in the table is executed during a jump, and holds three bytes.
; The format for each entry is :
; #TABLE(map)
; { 0 | X position to increment by }
; { 1 | Y position to increment by (can be negative) }
; { 2 | Frame number to use during the jump (6 or 7) }
; TABLE#
b$B264 DEFB $02,$FC,$06
 $B267 DEFB $02,$FC,$06
 $B26A DEFB $02,$FC,$06
 $B26D DEFB $02,$FC,$06
 $B270 DEFB $02,$FC,$07
 $B273 DEFB $02,$FC,$07
 $B276 DEFB $02,$04,$07
 $B279 DEFB $02,$04,$07
 $B27C DEFB $02,$04,$06
 $B27F DEFB $02,$04,$06
 $B282 DEFB $02,$04,$06
 $B285 DEFB $02,$04,$00

; Move a character left or right
;
; Used by the routines at #R$A92C, #R$AAB2, #R$AADD, #R$AB09, #R$AB26, #R$AB43,
; #R$AB60, #R$AB9B, #R$B09F, #R$B3C3 and #R$F0C0.
;
; IY Current character buffer (#R$B067 - #N$B0CB)
c$B288 CALL $A921    ; Is this character the active one?
 $B28B JR Z,$B29E    ; Jump forward if it is.
 $B28D LD A,($B951)  ; Get the current room number.
 $B290 CP (IY+$0F)   ; Is the player in this room?
 $B293 JR Z,$B29E    ; Jump forward if they are.
 $B295 LD A,(IY+$5F) ; { Flip the movement flag. (#R$BCC6)
 $B298 XOR $01       ;
 $B29A LD (IY+$5F),A ; }
 $B29D RET Z         ; Return if this is zero.
; Update the frame number.
*$B29E LD A,(IY+$00) ; { Get the frame number and increment it.
 $B2A1 INC A         ; }
 $B2A2 CP $06        ; { If the frame is greater than 5, reset it to 0.
 $B2A4 JR C,$B2A7    ;
 $B2A6 XOR A         ; }
*$B2A7 LD (IY+$00),A ; Store the new frame number.
; Check for any movement.
 $B2AA LD A,(IY+$3C) ; Get the movement flag. (#R$BCA3)
 $B2AD CP $01        ; Is the character facing right?
 $B2AF JR NZ,$B2C6   ; Move forward if not.
; Move right.
 $B2B1 LD A,(IY-$3C) ; Get the current direction of the sprite.
 $B2B4 OR A          ; Is it 0 (left)?
 $B2B5 CALL Z,$81D4  ; If so, need to change direction.
 $B2B8 LD A,(IY+$05) ; Get the X co-ordinate.
 $B2BB ADD A,$02     ; Add 2.
 $B2BD CP $F0        ; { If it's greater than #N$F0, set it to that.
 $B2BF JR C,$B2D5    ; 
 $B2C1 LD A,$F0      ; 
 $B2C3 JP $B2D5      ; }
; Move left.
*$B2C6 LD A,(IY-$3C) ; Get the direction flag. (#R$BCA3)
 $B2C9 OR A          ; Is it 0?
 $B2CA CALL NZ,$81D4 ; If it isn't, it must be facing left, so change direction.
 $B2CD LD A,(IY+$05) ; Get the X co-ordinate.
 $B2D0 SUB $02       ; Subtract 2.
 $B2D2 JR NC,$B2D5   ; { If it's less than 0, set it to that.
 $B2D4 XOR A         ; }
*$B2D5 LD (IY+$05),A ; Set the new X co-ordinate
 $B2D8 JP $E2FC      ; Play a footstep and return.

; The current control mechanism (0 - Keyboard, 1 - Kempston, 2 - Sinclair)
b$B2DB DEFB $00

; Select Sinclair control
;
; Used by the routine at #R$80E5.
c$B2DC LD A,$02      ; { Set 2 to the control mechanism byte.
 $B2DE LD ($B2DB),A  ;
 $B2E1 RET           ; }

; Select Kempston control
;
; Used by the routine at #R$80E5.
c$B2E2 LD A,$01      ; { Set 1 to the control mechanism byte.
 $B2E4 LD ($B2DB),A  ;
 $B2E7 RET           ; }

; Select Keyboard control
;
; Used by the routine at #R$80E5.
c$B2E8 XOR A         ; { Set 0 to the control mechanism byte.
 $B2E9 LD ($B2DB),A  ;
 $B2EC RET           ; }

; Temporary space to calculate individual earnings
b$B2ED DEFB $00,$00

; Final total of money earned
b$B2EF DEFB $00,$00

; Print a breakdown of who earned what
;
; Used by the routines at #R$B3C3 and #R$B451.
;
; IY Pointer to character data (#R$BC67 - #N$BC6E)
c$B2F1 CALL $B8ED      ; Clear the screen.
 $B2F4 LD DE,$010A     ; Set the position.
 $B2F7 LD HL,$7C1B     ; Point #REGhl at the earning text. (#R$7C1B)
 $B2FA CALL $B8C4      ; Print it.
 $B2FD PUSH IY         ; Remember the current pointer.
 $B2FF LD DE,$0513     ;
 $B302 LD BC,$0545     ;
 $B305 LD HL,$B2ED     ; Point #REGhl at the scratch buffer for earnings. (#R$B2ED)
 $B308 LD IY,$BC67     ; Point #REGiy to the first character buffer.
 $B30C LD IX,$B2ED     ; Point #REGhl at the scratch buffer for earnings.
 $B310 LD (IX+$02),$00 ;
 $B314 LD (IX+$03),$00 ;
*$B318 LD A,(IY-$0A)   ;
 $B31B LD (IX+$01),A   ;
 $B31E ADD A,(IX+$03)  ;
 $B321 DAA             ;
 $B322 LD (IX+$03),A   ;
 $B325 LD A,(IY-$1E)   ;
 $B328 LD (IX+$00),A   ;
 $B32B ADC A,(IX+$02)  ;
 $B32E DAA             ;
 $B32F LD (IX+$02),A   ;
 $B332 CALL $B34C      ; Print the money.
 $B335 INC D           ; { Move down three rows.
 $B336 INC D           ;
 $B337 INC D           ; }
 $B338 INC IY          ; Move to the next player.
 $B33A DJNZ $B318      ;
 $B33C POP IY          ; Restore the original pointer in #REGiy.
 $B33E LD D,$15        ; Print at row #N$15.
 $B340 LD HL,$B2EF     ; Point #REGhl at the final sum earned.
 $B343 LD E,$11        ; Print at column #N$11.
 $B345 CALL $B34C      ; Print the money.
 $B348 JP $B3AB        ; Wait for a keypress and return.

; The current money digit being drawn.
;
; Used by the routine in #R$B34C
;
; .
;
; 0 - hundreds, 1 - tens
g$B34B DEFB $00

; Print a monetary value on screen
;
; Used by the routines at #R$B2F1 and #R$B451.
;
; HL Pointer to the money
; DE The screen position
c$B34C PUSH HL       ; { Store main registers.
 $B34D PUSH BC       ;
 $B34E PUSH DE       ; }
 $B34F LD A,$3D      ; { Print an equals sign.
 $B351 CALL $B715    ; }
 $B354 INC E         ; Move to the next column.
 $B355 LD C,$42      ; Set bright red on black.
 $B357 LD A,$26      ; { Print a pound symbol.
 $B359 CALL $B715    ; }
 $B35C INC E         ; Move to the next column.
 $B35D XOR A         ; { Set to drawing the hundreds.
 $B35E LD ($B34B),A  ; }
 $B361 LD C,$45      ; Get bright cyan on black.
 $B363 LD B,$02      ; 2 digits to draw.
*$B365 LD A,(HL)     ; Get the value.
 $B366 SRL A         ; { Use the top four bits only.
 $B368 SRL A         ;
 $B36A SRL A         ;
 $B36C SRL A         ; }
 $B36E ADD A,$30     ; Add to ASCII '0' to get the appropriate number graphic.
 $B370 CP $30        ; Is it zero?
 $B372 JR NZ,$B37C   ; Jump forward if it isn't.
 $B374 LD A,($B34B)  ; { Are the hundreds being drawn?
 $B377 OR A          ; }
 $B378 JR Z,$B384    ; Jump forward if so.
 $B37A LD A,$30      ; { Print '0'.
*$B37C CALL $B715    ; }
 $B37F LD A,$01      ; { Signal that the tens should be drawn next.
 $B381 LD ($B34B),A  ; }
*$B384 INC E         ; Move to the next character.
 $B385 LD A,(HL)     ; Get the value.
 $B386 AND $0F       ; Get the bottom four bits only.
 $B388 ADD A,$30     ; Add to ASCII '0' to get the appropriate number graphic.
 $B38A CP $30        ; Is it zero?
 $B38C JR NZ,$B39B   ; Jump forward if it isn't.
 $B38E LD A,B        ; { Is this the "tens" digit?
 $B38F CP $01        ; }
 $B391 JR Z,$B399    ; Jump forward if it is.
 $B393 LD A,($B34B)  ; { Are the hunderds being drawn?
 $B396 OR A          ; }
 $B397 JR Z,$B3A3    ; Jump forward if not.
*$B399 LD A,$30      ; Add to ASCII '0' to get the appropriate number graphic.
*$B39B CALL $B715    ; Print the digit.
 $B39E LD A,$01      ; { Move from tens to hundreds.
 $B3A0 LD ($B34B),A  ; }
*$B3A3 INC E         ; Move to the next character.
 $B3A4 INC HL        ; Move to the next position in the buffer.
 $B3A5 DJNZ $B365    ; Loop until all digits are accounted for.
 $B3A7 POP DE        ; { Restore main registers and return.
 $B3A8 POP BC        ;
 $B3A9 POP HL        ;
 $B3AA RET           ; }

; Wait for a keypress and return it in A
;
; Used by the routines at #R$B2F1, #R$B3C3 and #R$B451.
c$B3AB XOR A         ; { Read all rows of the keyboard, if any are pressed,
                     ; then the relevant bit 0 - 5 will be reset.
 $B3AC IN A,($FE)    ; Although this makes it impossible to determine
                     ; what key is pressed, that doesn't matter here. }
 $B3AE OR $E0        ; Switch on bits 5-7, which are not used.
 $B3B0 CP $FF        ; Were any keys pressed?
 $B3B2 JR NZ,$B3AB   ; Loop back while there aren't.
; A key is pressed. Make sure it's released before continuing.
*$B3B4 XOR A         ; { Read all keys again.
 $B3B5 IN A,($FE)    ; }
 $B3B7 OR $E0        ; Switch on bits 5-7.
 $B3B9 CP $FF        ; Were any keys pressed?
 $B3BB JR Z,$B3B4    ; Loop back while there still are.
 $B3BD RET           ; Otherwise return.

; The offsets on screen to put everyone for the final safe cracking sequence
b$B3BE DEFB $B0,$88,$60,$38,$10

; The safe has been cracked! Get everyone together and print earnings.
;
; Used by the routine at #R$EDC6.
c$B3C3 LD DE,$131C     ;
 $B3C6 LD HL,$CCF2     ;
 $B3C9 CALL $B82B      ;
*$B3CC LD IY,$BC67     ; Point #REGiy towards the first character buffer.
 $B3D0 LD HL,$B3BE     ;
 $B3D3 LD B,$05        ;
*$B3D5 PUSH BC         ;
 $B3D6 LD (IY+$0A),$98 ;
 $B3DA LD A,(IY+$05)   ; Get the X co-ordinate.
 $B3DD CP (HL)         ;
 $B3DE JR Z,$B41D      ;
*$B3E0 PUSH AF         ;
 $B3E1 LD A,(IY+$0F)   ;
 $B3E4 CP $16          ;
 $B3E6 JR Z,$B3F3      ;
 $B3E8 LD (IY+$0F),$16 ;
 $B3EC LD (IY+$05),$00 ;
 $B3F0 POP AF          ;
 $B3F1 SCF             ;
 $B3F2 PUSH AF         ;
*$B3F3 POP AF          ;
 $B3F4 PUSH HL         ;
 $B3F5 JR NC,$B404     ;
 $B3F7 LD (IY+$3C),$01 ;
 $B3FB LD (IY+$41),$01 ;
 $B3FF CALL $B288      ;
 $B402 JR $B40F        ;
*$B404 LD (IY+$3C),$FF ;
 $B408 LD (IY+$41),$FF ;
 $B40C CALL $B288      ;
*$B40F POP HL          ;
 $B410 POP BC          ;
*$B411 LD IY,$BC67     ; Point #REGiy towards the first character buffer.
 $B415 CALL $EEC1      ;
 $B418 CALL $B9D6      ;
 $B41B JR $B3CC        ;
*$B41D LD A,(IY+$0F)   ;
 $B420 CP $16          ;
 $B422 JR NZ,$B3E0     ;
 $B424 POP BC          ;
 $B425 INC HL          ;
 $B426 INC IY          ;
 $B428 DJNZ $B3D5      ;
 $B42A LD A,($F6DB)    ;
 $B42D OR A            ;
 $B42E JR Z,$B411      ;
 $B430 LD DE,$0400     ;
 $B433 LD HL,$7E68     ;
 $B436 CALL $B84B      ;
 $B439 CALL $B3AB      ; Wait for a keypress.
 $B43C CALL $B8ED      ; Clear the screen.
 $B43F LD DE,$0002     ; Set the position to draw the text.
 $B442 LD HL,$7C76     ; Point #REGhl at the completed game text. (#R$7C76)
 $B445 CALL $B8C4      ; Print it.
 $B448 CALL $B3AB      ; Wait for a keypress.
 $B44B CALL $B2F1      ; Print who earned what.
 $B44E JP $8184        ; Restart the game.

; The game has ended. Print the final score.
;
; Used by the routine at #R$E33F.
c$B451 CALL $B8ED    ; Clear the screen.
 $B454 LD HL,$ECFE   ; Point #REGhl at the total money earned.
 $B457 LD DE,$080A   ; Set the position to draw this.
 $B45A LD C,$00      ; 
 $B45C CALL $B34C    ; Draw it.
 $B45F LD HL,$7D48   ; Point #REGhl at the game over text. (#R$7D48)
 $B462 LD DE,$0504   ; Set the position to draw the text.
 $B465 CALL $B8C4    ; Print it.
 $B468 CALL $B3AB    ; Wait for a keypress.
 $B46B CALL $B2F1    ; Print who earned what.
 $B46E JP $8184      ; Restart the game.

; Initialize the theme tune data
;
; Used by the routine at #R$80E5.
c$B471 DI            ; Disable interrupts
 $B472 LD HL,$B560   ; Point #REGhl at the start of the theme tune. (#R$B560)
 $B475 LD ($B4E7),HL ; Set this as the next address to look at. (#R$B4E7)
 $B478 LD A,$FF      ; { Set to no key pressed.
 $B47A LD ($B4E9),A  ; }
 $B47D INC A         ; { Set tune to index 0 and return.
 $B47E LD ($B55F),A  ; }
 $B481 RET           ;

; Play the next note of the theme tune and get a keypress
;
; Used by the routine at #R$80E5.
c$B482 LD HL,($B4E7) ; Point #REGhl towards the next note in the tune.
 $B485 LD A,(HL)     ; { Is the next byte zero?
 $B486 OR A          ; }
 $B487 JR NZ,$B494   ; Jump forward if it isn't.
 $B489 LD A,$01      ; { Set tune back to index 1.
 $B48B LD ($B55F),A  ; }
 $B48E LD A,$FF      ; { Set no keys pressed and return.
 $B490 LD ($B4E9),A  ; 
 $B493 RET           ; }
; There is more of the tune to play, so do it.
; First, work out if the type of sound wave needs changing.
*$B494 INC HL        ; Point #REGhl at the next note.
 $B495 CP $FE        ; Is it a control character #N$FE?
 $B497 JR NZ,$B4A2   ; Jump forward if it isn't.
 $B499 XOR A         ; { Switch to sawtooth wave.
*$B49A LD ($B4EA),A  ; }
 $B49D LD ($B4E7),HL ; Set the next address of the tune to play. (#R$B4E7)
 $B4A0 JR $B482      ; Jump forward to play the note.
*$B4A2 CP $FF        ; Is it a control character #N$FF?
 $B4A4 JR NZ,$B4AA   ; Jump forward if not.
 $B4A6 LD A,$01      ; { Switch to square wave and jump back to set this.
 $B4A8 JR $B49A      ; }
; Now play the note.
*$B4AA PUSH AF       ; Store #REGaf.
 $B4AB LD A,(HL)     ; Get the current note.
 $B4AC INC HL        ; { Point #REGhl at the next note to play.
 $B4AD LD ($B4E7),HL ; }
 $B4B0 OR A          ; Is it zero?
 $B4B1 JR Z,$B4DB    ; If so, jump forward.
 $B4B3 LD L,A        ; { Put the note in #REGhl.
 $B4B4 LD H,$00      ; }
 $B4B6 ADD HL,HL     ; Double it to get a word offset.
 $B4B7 LD DE,$B537   ; { Add the base address for the note frequencies. (#R$B537)
 $B4BA ADD HL,DE     ; }
 $B4BB LD C,(HL)     ; { Get the frequency and put it in #REGbc.
 $B4BC LD B,$00      ; }
 $B4BE INC HL        ; { Get the length and put it in #REGde.
 $B4BF LD E,(HL)     ;
 $B4C0 LD D,B        ; }
 $B4C1 POP AF        ; Restore #REGaf.
 $B4C2 LD HL,$0000   ; { Multiply #REGde with the note value to get the length.
*$B4C5 ADD HL,DE     ;
 $B4C6 DEC A         ;
 $B4C7 JR NZ,$B4C5   ; }
 $B4C9 EX DE,HL      ; Swap #REGde and #REGhl.
 $B4CA CALL $B505    ; Play the note.
 $B4CD LD A,($B4E9)  ; { Was a key pressed?
 $B4D0 CP $FF        ; }
 $B4D2 RET NZ        ; Return if it was.
*$B4D3 LD BC,$0320   ; {
 $B4D6 CALL $B4EB    ; Pause and get a keypress. }
 $B4D9 JR $B482      ; Jump back and play more of the tune.
*$B4DB LD BC,$19C8   ;
 $B4DE POP AF        ; Restore #REGaf.
*$B4DF CALL $B4EB    ; Pause and get a keypress.
 $B4E2 DEC A         ; { Was a key pressed?
 $B4E3 JR NZ,$B4DF   ; Loop while there was. }
 $B4E5 JR $B4D3      ; Otherwise jump back to play more of the tune.

; The address of the next note in the theme tune to play
g$B4E7 DEFW $B571

; The last key (0 - 4) pressed
;
; If any bits are reset, that key was pressed.
; If all bits are set (ie: #N$FF), no keys were pressed.
g$B4E9 DEFB $FF

; The wave to play the next note, 0 = sawtooth, 1 = square
g$B4EA DEFB $01

; Pause and collect a keypress from 1 - 4
;
; Used by the routines at #R$B482 and #R$B505.
;
; BC The time to pause
c$B4EB PUSH AF       ; { Store the main registers.
 $B4EC PUSH BC       ;
 $B4ED PUSH DE       ; }
*$B4EE DEC BC        ; Decrement the tick count used to pause.
 $B4EF LD A,B        ; { Is it zero?
 $B4F0 OR C          ; }
 $B4F1 JR NZ,$B4EE   ; Jump forward if it isn't.
 $B4F3 LD A,$F7      ; { Collect a keypress from 0-4.
 $B4F5 IN A,($FE)    ; }
 $B4F7 OR $F0        ; { Set the top 4 bits and put the result in #REGe.
 $B4F9 LD E,A        ; }
 $B4FA LD A,($B4E9)  ; Get the last keypress.
 $B4FD AND E         ; { Merge the two bitfields together and store as the new result.
 $B4FE LD ($B4E9),A  ; }
 $B501 POP DE        ; { Restore main registers and return.
 $B502 POP BC        ;
 $B503 POP AF        ;
 $B504 RET           ; }

; Play a note in the theme tune
;
; Used by the routine at #R$B482.
;
; BC The pitch 
; DE The length 
c$B505 LD A,($B4EA)  ; Get the sound type.
 $B508 OR A          ; Is it 0 (sawtooth)?
 $B509 JR Z,$B50F    ; Jump forward if it is.
; Play a square wave.
 $B50B LD H,B        ; { Copy the pitch from #REGbc to #REGhl.
 $B50C LD L,C        ; }
 $B50D JR $B520      ; Jump forward to play the note.
; Play a sawtooth wave.
*$B50F LD H,B        ; { Copy the pitch from #REGbc to #REGhl.
 $B510 LD L,C        ; }
 $B511 SRA B         ; { Add three quarters of the pitch (?)
 $B513 RR C          ;
 $B515 ADD HL,BC     ;
 $B516 SRA B         ;
 $B518 RR C          ;
 $B51A ADD HL,BC     ;
 $B51B SRA B         ;
 $B51D RR C          ;
 $B51F ADD HL,BC     ; }
; Now play the note.
*$B520 LD A,$10      ; { Switch the speaker on.
 $B522 OUT ($FE),A   ; }
 $B524 CALL $B4EB    ; Pause and collect a keypress.
 $B527 XOR A         ; { Switch the speaker off.
 $B528 OUT ($FE),A   ; }
 $B52A PUSH BC       ; Store #REGbc.
 $B52B LD B,H        ; { Restore the value that was previously copied to #REGhl.
 $B52C LD C,L        ; }
 $B52D CALL $B4EB    ; Pause and collect a keypress.
 $B530 POP BC        ; Restore #REGbc.
 $B531 DEC DE        ; Decrease the length.
 $B532 LD A,D        ; { Loop while there is more to play.
 $B533 OR E          ; 
 $B534 JR NZ,$B520   ; }
 $B536 RET           ; Otherwise return.

; Theme tune pitch / timing constants
b$B537 DEFB $00,$00     ; 00
 $B539 DEFB $EC,$1C     ; 01
 $B53B DEFB $DF,$1C     ; 02
 $B53D DEFB $D3,$1E     ; 03
 $B53F DEFB $C7,$20     ; 04
 $B541 DEFB $BB,$24     ; 05
 $B543 DEFB $B1,$25     ; 06
 $B545 DEFB $A7,$27     ; 07
 $B547 DEFB $9D,$2A     ; 08
 $B549 DEFB $94,$2C     ; 09
 $B54B DEFB $8A,$2D     ; 0A
 $B54D DEFB $83,$31     ; 0B
 $B54F DEFB $7C,$36     ; 0C
 $B551 DEFB $73,$3A     ; 0D
 $B553 DEFB $6E,$3C     ; 0E
 $B555 DEFB $67,$40     ; 0F
 $B557 DEFB $62,$42     ; 10
 $B559 DEFB $5C,$48     ; 11
 $B55B DEFB $56,$4C     ; 12
 $B55D DEFB $51,$52     ; 13

; Set to '1' if the current character is computer controlled
;
; During the intro screen, this byte is used as an 
; index to the current theme tune note.
g$B55F DEFB $00

; Theme tune
b$B560 DEFB $FF,$03,$07,$03,$07,$02,$07,$01
 $B568 DEFB $04,$02,$07,$0D,$0C,$03,$0E,$03
 $B570 DEFB $0E,$02,$0E,$01,$0C,$02,$09,$03
 $B578 DEFB $06,$03,$0E,$03,$0D,$03,$0C,$02
 $B580 DEFB $0B,$03,$13,$01,$09,$03,$11,$02
 $B588 DEFB $07,$03,$10,$01,$05,$09,$0E,$03
 $B590 DEFB $0C,$03,$0C,$02,$0C,$01,$09,$02
 $B598 DEFB $07,$0D,$0C,$FE,$05,$10,$01,$0F
 $B5A0 DEFB $05,$10,$01,$0E,$01,$10,$07,$0C
 $B5A8 DEFB $01,$0C,$01,$0B,$01,$0A,$02,$10
 $B5B0 DEFB $01,$0F,$02,$10,$01,$0E,$02,$10
 $B5B8 DEFB $01,$0E,$02,$10,$01,$0E,$0C,$0E
 $B5C0 DEFB $05,$0E,$01,$0D,$05,$0E,$01,$10
 $B5C8 DEFB $01,$11,$0A,$0E,$03,$0C,$01,$0C
 $B5D0 DEFB $02,$09,$01,$07,$02,$0C,$01,$0C
 $B5D8 DEFB $02,$09,$01,$07,$0C,$0C,$05,$10
 $B5E0 DEFB $01,$0F,$05,$10,$01,$0E,$01,$10
 $B5E8 DEFB $07,$0C,$01,$0C,$01,$0B,$01,$0A
 $B5F0 DEFB $02,$10,$01,$0F,$02,$10,$01,$0E
 $B5F8 DEFB $02,$10,$01,$0E,$02,$10,$01,$0E
 $B600 DEFB $0C,$0E,$05,$0E,$01,$0D,$05,$0E
 $B608 DEFB $01,$10,$01,$11,$0A,$0E,$03,$0C
 $B610 DEFB $01,$0C,$02,$09,$01,$07,$02,$0C
 $B618 DEFB $01,$0C,$02,$09,$01,$07,$0C,$0C
 $B620 DEFB $FF,$03,$07,$03,$07,$02,$07,$01
 $B628 DEFB $04,$02,$07,$0D,$0C,$03,$0E,$03
 $B630 DEFB $0E,$02,$0E,$01,$0C,$02,$09,$04
 $B638 DEFB $06,$03,$0E,$03,$0D,$03,$0C,$02
 $B640 DEFB $0B,$03,$13,$01,$09,$03,$11,$02
 $B648 DEFB $07,$03,$10,$01,$05,$09,$0E,$03
 $B650 DEFB $0C,$03,$0C,$02,$0C,$01,$09,$02
 $B658 DEFB $07,$0D,$0C,$03,$0B,$03,$0B,$02
 $B660 DEFB $0B,$01,$06,$02,$03,$0D,$0B,$03
 $B668 DEFB $07,$03,$07,$02,$07,$01,$06,$02
 $B670 DEFB $07,$0D,$04,$03,$09,$03,$09,$02
 $B678 DEFB $09,$01,$04,$02,$01,$0D,$09,$03
 $B680 DEFB $0E,$03,$0E,$02,$0E,$01,$09,$03
 $B688 DEFB $06,$06,$0B,$06,$0A,$FE,$05,$10
 $B690 DEFB $01,$0F,$05,$10,$01,$0E,$01,$10
 $B698 DEFB $07,$0C,$01,$0C,$01,$0B,$01,$0A
 $B6A0 DEFB $02,$10,$01,$0F,$02,$10,$01,$0E
 $B6A8 DEFB $02,$10,$01,$0E,$02,$10,$01,$0E
 $B6B0 DEFB $0C,$0E,$05,$0E,$01,$0D,$05,$0E
 $B6B8 DEFB $01,$10,$01,$11,$0A,$0E,$02,$0C
 $B6C0 DEFB $01,$0C,$02,$09,$01,$07,$02,$0C
 $B6C8 DEFB $01,$0C,$02,$09,$01,$07,$0C,$0C
 $B6D0 DEFB $FF,$05,$10,$01,$0F,$05,$10,$01
 $B6D8 DEFB $0E,$01,$10,$07,$0C,$01,$0C,$01
 $B6E0 DEFB $0B,$02,$0A,$02,$10,$01,$0F,$02
 $B6E8 DEFB $10,$01,$0E,$02,$10,$01,$0E,$02
 $B6F0 DEFB $10,$01,$0E,$0C,$0E,$05,$0E,$01
 $B6F8 DEFB $0D,$05,$0E,$01,$10,$01,$11,$0A
 $B700 DEFB $0E,$02,$0C,$01,$0C,$02,$09,$01
 $B708 DEFB $07,$02,$0C,$01,$0C,$02,$09,$01
 $B710 DEFB $07,$0C,$0C,$00,$00

; Put a character on screen
;
; Used by the routines at #R$B34C and #R$B8C4.
;
; A The ID of the object
; C The attribute to display
; D The y co-ordinate
; E The x co-ordinate
c$B715 PUSH AF       ; { Store main registers.
 $B716 PUSH IX       ;
 $B718 PUSH HL       ;
 $B719 PUSH BC       ;
 $B71A PUSH DE       ; }
 $B71B EX DE,HL      ; Swap #REGde and #REGhl.
; First, set the attribute.
 $B71C PUSH HL       ; Store the co-ordinates in #REGhl.
 $B71D LD D,$58      ; Point the high byte of #REGde to the attribute buffer.
 $B71F LD E,L        ; Point the low byte to the x co-ordinate.
 $B720 LD L,H        ; { Put the y co-ordinate in #REGhl.
 $B721 LD H,$00      ; }
 $B723 ADD HL,HL     ; { Multiply by 16 to get the right offset.
 $B724 ADD HL,HL     ;
 $B725 ADD HL,HL     ;
 $B726 ADD HL,HL     ;
 $B727 ADD HL,HL     ; }
 $B728 ADD HL,DE     ; Add the earlier address in the attribute buffer.
 $B729 LD (HL),C     ; Set the attribute to the colour specified.
 $B72A PUSH DE       ; Remember the current address in #REGde.
 $B72B LD DE,$0020   ; { Move forward a row.
 $B72E ADD HL,DE     ; }
 $B72F POP DE        ; Restore #REGde.
 $B730 LD (HL),C     ; Set the attribute.
 $B731 POP HL        ; Restore the co-ordinates.
; Now, set the graphic data.
 $B732 LD L,H        ; { Put the y co-ordinate in #REGhl and set #REGd to 0.
 $B733 LD D,$00      ; 
 $B735 LD H,D        ; }
 $B736 LD C,E        ; Put the current column. in #REGc.
 $B737 LD B,D        ; Set #REGb to the current row.
 $B738 ADD HL,HL     ; { Multiply #REGhl by 8 to get a suitable offset.
 $B739 ADD HL,HL     ;
 $B73A ADD HL,HL     ;
 $B73B ADD HL,HL     ; }
 $B73C LD DE,$81F8   ; { Add the base address for the screen offsets table. (#R$81F8)
 $B73F ADD HL,DE     ; }
 $B740 PUSH HL       ; { Put this in #REGix.
 $B741 POP IX        ; }
 $B743 LD L,A        ; { Put the object ID in #REGhl.
 $B744 LD H,$00      ; }
 $B746 ADD HL,HL     ; { Multiply it by 8 to get a suitable offset.
 $B747 ADD HL,HL     ;
 $B748 ADD HL,HL     ; }
 $B749 LD DE,$DFDC   ; { Add the base address for the character set. (#R$DFDC)
 $B74C ADD HL,DE     ; }
 $B74D EX DE,HL      ; Swap #REGde and #REGhl.
 $B74E LD A,$08      ; 8 rows to update.
*$B750 LD L,(IX+$00) ; { Get the screen offset for the start of the row in #REGhl.
 $B753 LD H,(IX+$01) ; }
 $B756 ADD HL,BC     ; Add the offset for the current column and row.
 $B757 INC IX        ; { Point to the next entry in the screen offsets table.
 $B759 INC IX        ; }
 $B75B EX DE,HL      ; Swap #REGhl and #REGde, as the copying is done that way round.
 $B75C LDI           ; Copy from #REGhl (buffer) to #REGde (screen).
 $B75E EX DE,HL      ; Swap #REGhl and #REGde back again.
 $B75F INC BC        ; Move forward a column .
 $B760 LD L,(IX+$00) ; { Get the screen offset for the start of the row in #REGhl.
 $B763 LD H,(IX+$01) ; }
 $B766 ADD HL,BC     ; Add the offset for the current column and row.
 $B767 INC IX        ; { Point to the next entry in the screen offsets table.
 $B769 INC IX        ; }
 $B76B DEC DE        ; Move back a column.
 $B76C EX DE,HL      ; Swap #REGhl and #REGde, as the copying is done that way round.
 $B76D LDI           ; Copy from #REGhl (buffer) to #REGde (screen).
 $B76F EX DE,HL      ; Swap #REGhl and #REGde back again.
 $B770 INC BC        ; Move forward a column .
 $B771 DEC A         ; { Loop while there are more rows to draw.
 $B772 JR NZ,$B750   ; }
 $B774 POP DE        ; { Restore main registers and return.
 $B775 POP BC        ;
 $B776 POP HL        ;
 $B777 POP IX        ;
 $B779 POP AF        ;
 $B77A RET           ; }

; Print an inventory graphic
;
; Used by the routine at #R$E41D.
;
; A The item number to display
; D The y co-ordinate
; E The x co-ordinate
c$B77B PUSH AF       ; { Store the main registers.
 $B77C PUSH HL       ;
 $B77D PUSH BC       ;
 $B77E PUSH DE       ; }
 $B77F LD C,E        ; Put the X co-ordinate in #REGc.
 $B780 LD L,D        ; Put the Y co-ordinate in #REGl.
 $B781 LD D,$00      ; Start at row 0.
 $B783 LD H,D        ; Get the current row.
 $B784 LD B,D        ; Store this in #REGb.
 $B785 ADD HL,HL     ; { Multiply by 16 to get a suitable screen offset.
 $B786 ADD HL,HL     ;
 $B787 ADD HL,HL     ;
 $B788 ADD HL,HL     ; }
 $B789 LD DE,$81F8   ; { Add the base address of the screen offsets table. (#R$81F8)
 $B78C ADD HL,DE     ; }
 $B78D PUSH HL       ; { Put this screen address in #REGix.
 $B78E POP IX        ; }
 $B790 LD L,A        ; { Put the item in #REGhl.
 $B791 LD H,$00      ; }
 $B793 ADD HL,HL     ; { Multply by 32 to get a suitable graphic offset.
 $B794 ADD HL,HL     ;
 $B795 ADD HL,HL     ;
 $B796 ADD HL,HL     ;
 $B797 ADD HL,HL     ; }
 $B798 LD DE,$8378   ; { Add the base address of the graphic table. (#R$8378)
 $B79B ADD HL,DE     ; }
 $B79C EX DE,HL      ; Swap #REGde and #REGhl.
 $B79D LD A,$10      ; Number of entries to display.
*$B79F LD L,(IX+$00) ; { Get the screen address to copy to.
 $B7A2 LD H,(IX+$01) ; }
 $B7A5 ADD HL,BC     ; Add the relevant row.
 $B7A6 INC IX        ; { Move down a row.
 $B7A8 INC IX        ; }
 $B7AA EX DE,HL      ; Swap #REGhl and #REGde to do a copy.
 $B7AB LDI           ; { Copy the two columns.
 $B7AD LDI           ; }
 $B7AF EX DE,HL      ; Swap #REGhl and #REGde.
 $B7B0 INC BC        ; { Move forward to the next UDG position.
 $B7B1 INC BC        ; }
 $B7B2 DEC A         ; { Loop while there is more to display.
 $B7B3 JR NZ,$B79F   ; }
 $B7B5 POP DE        ; { Restore the main registers and return.
 $B7B6 POP BC        ;
 $B7B7 POP HL        ;
 $B7B8 POP AF        ; 
 $B7B9 RET           ; }

; Print a graphic on screen
;
; Used by the routines at #R$B84B and #R$E36D.
;
; HL The address of the graphic
; A The frame number
; D The y co-ordinate
; E The x co-ordinate
; C The attribute to use
c$B7BA PUSH AF       ; { Push the main registers.
 $B7BB PUSH HL       ;
 $B7BC PUSH BC       ;
 $B7BD PUSH DE       ; }
 $B7BE EX DE,HL      ; Swap #REGde and #REGhl.
 $B7BF PUSH HL       ; Remember #REGhl.
 $B7C0 LD D,$58      ; Point #REGd at the attributes buffer.
 $B7C2 LD E,L        ; Point #REGe to the low byte of the graphics address.
 $B7C3 LD L,H        ; { Put the high byte in #REGhl.
 $B7C4 LD H,$00      ; }
 $B7C6 ADD HL,HL     ; { Multiply by 16.
 $B7C7 ADD HL,HL     ;
 $B7C8 ADD HL,HL     ;
 $B7C9 ADD HL,HL     ;
 $B7CA ADD HL,HL     ; }
 $B7CB ADD HL,DE     ; Add the remaining portion to get an attribute address.
 $B7CC LD (HL),C     ; Set the attribute.
 $B7CD POP HL        ; Restore #REGhl.
 $B7CE LD L,H        ; { Start at row 0.
 $B7CF LD D,$00      ; }
 $B7D1 LD H,D        ; Put the current row in #REGh.
 $B7D2 PUSH DE       ; Remember #REGde.
 $B7D3 ADD HL,HL     ; { Multiply #REGhl by 16 to get a suitable offset.
 $B7D4 ADD HL,HL     ;
 $B7D5 ADD HL,HL     ;
 $B7D6 ADD HL,HL     ; }
 $B7D7 LD DE,$81F8   ; { Add the base address of the screen offsets table. (#R$81F8)
 $B7DA ADD HL,DE     ; }
 $B7DB LD E,(HL)     ; { Put the actual address in #REGde.
 $B7DC INC HL        ;
 $B7DD LD D,(HL)     ; }
 $B7DE EX DE,HL      ; Swap #REGde and #REGhl.
 $B7DF POP DE        ; Restore #REGde.
 $B7E0 ADD HL,DE     ; Add the row and column offset.
 $B7E1 EX DE,HL      ; Swap #REGde and #REGhl.
 $B7E2 LD L,A        ; { Put the frame ID in #REGhl.
 $B7E3 LD H,$00      ; }
 $B7E5 ADD HL,HL     ; { Multiply it by 8 to get a suitable offset.
 $B7E6 ADD HL,HL     ;
 $B7E7 ADD HL,HL     ; }
 $B7E8 LD BC,$DFDC   ; { Add a specific offset.
 $B7EB ADD HL,BC     ; This offset is modified by code elsewhere. }
; Draw an 8x8 UDG block.
 $B7EC LD B,$08      ; 8 rows to draw.
*$B7EE LD A,(HL)     ; Get the graphic data.
 $B7EF LD (DE),A     ; Put it on screen.
 $B7F0 INC HL        ; Move to the next graphic data.
 $B7F1 INC D         ; Move to the next row.
 $B7F2 DJNZ $B7EE    ; Loop while there are more rows to draw.
; All drawing done.
 $B7F4 POP DE        ; { Restore the main registers and return.
 $B7F5 POP BC        ;
 $B7F6 POP HL        ;
 $B7F7 POP AF        ; 
 $B7F8 RET           ; }

; Put a room graphic in screen overlaying existing ones.
;
; Used by the routine at #R$F233 and indrectly by the routine at #R$B82B.
;
; HL The address of the graphic
; D The y co-ordinate
; E The x co-ordinate
; C The attribute to use
;
; This routine is done when only part of the screen needs updating
; eg: wall built, safe cracked.
c$B7F9 PUSH AF       ; { Remember main registers.
 $B7FA PUSH HL       ;
 $B7FB PUSH BC       ;
 $B7FC PUSH DE       ; }
 $B7FD EX DE,HL      ; Swap #REGde and #REGhl.
 $B7FE PUSH HL       ; Remember the co-ordinates.
 $B7FF LD D,$FD      ; Point #REGd to the attribute buffer.
 $B801 LD E,L        ; Put the X co-ordinate minus 3 in #REGe.
 $B802 LD L,H        ; { Put the Y co-ordinate in #REGhl.
 $B803 LD H,$00      ; }
 $B805 ADD HL,HL     ; { Multiple by 16 to get a suitable offset.
 $B806 ADD HL,HL     ;
 $B807 ADD HL,HL     ;
 $B808 ADD HL,HL     ;
 $B809 ADD HL,HL     ; }
 $B80A ADD HL,DE     ; Add the X co-ordinate.
 $B80B LD (HL),C     ; Set the attribute here.
 $B80C POP HL        ; Restore #REGhl with the graphic.
 $B80D LD DE,$5300   ; { Add on the correct offset for the sprite buffer.
 $B810 ADD HL,DE     ; }
 $B811 EX DE,HL      ; Swap #REGde and #REGhl.
 $B812 LD L,A        ; { Put the Y co-ordinate in #REGhl.
 $B813 LD H,$00      ; }
 $B815 ADD HL,HL     ; { Multiply by 8 to get a suitable offset.
 $B816 ADD HL,HL     ;
 $B817 ADD HL,HL     ; }
 $B818 LD BC,($B7E9) ; Put the offset to shift by in #REGbc.
 $B81C ADD HL,BC     ; Adjust this.
*$B81D LDI           ; Copy from #REGhl to #REGde
 $B81F DEC E         ; Move forward a column.
 $B820 LD A,E        ; { Move down a row.
 $B821 ADD A,$20     ;
 $B823 LD E,A        ; }
 $B824 JR NC,$B81D   ; Loop until the whole screen is done.
 $B826 POP DE        ; { Restore main registers and return.
 $B827 POP BC        ;
 $B828 POP HL        ;
 $B829 POP AF        ;
 $B82A RET           ; }

; Overwrite part of the screen buffer with a graphic
;
; Used by the routines at #R$B3C3, #R$EB79 and #R$EFC7.
;
; HL The address of the graphic to draw
; D The y co-ordinate
; E The x co-ordinate
c$B82B PUSH HL       ; Remember #REGhl.
 $B82C LD HL,$B7F9   ; { Replace the "CALL #N$B7BA" 
 $B82F LD ($B8BE),HL ; instructions in the routine at #R$B84B
 $B832 LD ($B8B5),HL ; to call #R$B7F9 instead.
 $B835 LD ($B895),HL ; }
 $B838 POP HL        ; Restore #REGhl.
 $B839 CALL $B84B    ; Draw the graphic with the new routine.
 $B83C PUSH HL       ; Remember #REGhl.
 $B83D LD HL,$B7BA   ; { Set it back to the original routine at #R$B7BA.
 $B840 LD ($B895),HL ;
 $B843 LD ($B8BE),HL ;
 $B846 LD ($B8B5),HL ; }
 $B849 POP HL        ; { Restore #REGhl and return.
 $B84A RET           ; }

; Draw a room graphic
;
; Used by the routines at #R$B3C3, #R$B82B, #R$B952, #R$BA6E, #R$BAB4, #R$E3FD,
; #R$E468 and #R$EDF7.
;
; HL The address of the graphic to draw
; D The y co-ordinate
; E The x co-ordinate
c$B84B LD A,(HL)     ; Get the next byte.
 $B84C INC HL        ; Move to the next position in the buffer.
 $B84D CP $80        ; Is the byte less than #N$80?
 $B84F JR C,$B8BD    ; Jump forward if so.
 $B851 CP $FF        ; Is the byte the end marker #N$FF?
 $B853 RET Z         ; Return if so.
 $B854 CP $FE        ; Is this a change attribute marker #N$FE?
 $B856 JR NZ,$B85C   ; Jump forward if not.
 $B858 LD C,(HL)     ; Put the next byte in #REGc.
 $B859 INC HL        ; Move to the next position in the buffer.
 $B85A JR $B84B      ; Jump back to look at the rest of the data.
*$B85C CP $A8        ; Is the byte less than #N$A8?
 $B85E JR C,$B8BD    ; Jump forward if so.
 $B860 CP $E8        ; Is the byte greater than #N$E8?
 $B862 JR NC,$B86E   ; Jump forward if so.
; Move to a new position.
 $B864 SUB $C8       ; { Subtract #N$C8 to get the actual x co-ordinate.
 $B866 ADD A,E       ;
 $B867 LD E,A        ; }
 $B868 LD A,D        ; { Add the next byte to the current y co-ordinate.
 $B869 ADD A,(HL)    ;
 $B86A LD D,A        ; }
 $B86B INC HL        ; Move to the next position in the buffer.
 $B86C JR $B84B      ; Jump back to draw some more.
; Check to see if this is an address marker.
*$B86E CP $FB        ; Is the byte an address marker? (#N$FB)
 $B870 JR NZ,$B87E   ; Jump forward if not.
; Change the base address.
 $B872 LD A,(HL)     ; Get the low byte.
 $B873 LD ($B7E9),A  ; Set this in the printing routine.
 $B876 INC HL        ; Move to the next position in the buffer.
 $B877 LD A,(HL)     ; Get the high byte.
 $B878 LD ($B7EA),A  ; Set this in the printing routine.
 $B87B INC HL        ; Move to the next position in the buffer.
 $B87C JR $B84B      ; Jump back to draw some more.
; Check some more control bytes.
*$B87E CP $F1        ; Is the a "move a column" marker? (#N$F1)
 $B880 JR Z,$B8C0    ; Jump if so.
 $B882 CP $F3        ; Is this a "sub block" marker? (#N$F3)
 $B884 JR NZ,$B88C   ; Jump if not.
; Chain to block data at another address.
 $B886 LD A,(HL)     ; { Put the new block marker in #REGhl.
 $B887 INC HL        ;
 $B888 LD H,(HL)     ;
 $B889 LD L,A        ; }
 $B88A JR $B84B      ; Jump back to draw some more.
; Check some more control bytes.
*$B88C LD B,(HL)     ; Get the number of rows or columns in #REGb.
 $B88D INC HL        ; Move to the next position in the buffer.
 $B88E CP $F0        ; Is this a "row repeat" instruction? (#N$F0)
 $B890 JR NZ,$B89C   ; Move forward if not.
; Repeat this graphic for a number of rows.
 $B892 LD A,(HL)     ; Get the next byte.
 $B893 INC HL        ; Move to the next position in the buffer.
*$B894 CALL $B7BA    ; Put the graphic on screen.
 $B897 INC D         ; Move to the next row.
 $B898 DJNZ $B894    ; Repeat while there are more rows.
 $B89A JR $B84B      ; Jump back to draw some more.
; Check some more control bytes.
*$B89C CP $F2        ; Is this a "block column repeat" instruction? (#N$F2)
 $B89E JR NZ,$B8B2   ; Jump foward if not.
; Repeat this graphic for a number of pairs of columns.
*$B8A0 LD A,(HL)     ; Get the next byte.
 $B8A1 INC HL        ; Move to the next position in the buffer.
 $B8A2 CALL $B7BA    ; Put the graphic on screen.
 $B8A5 LD A,(HL)     ; Get the next byte.
 $B8A6 INC E         ; Move to the next column.
 $B8A7 CALL $B7BA    ; Put the graphic on screen.
 $B8AA INC E         ; Move to the next column.
 $B8AB DEC HL        ; Move back in the buffer.
 $B8AC DJNZ $B8A0    ; Repeat until all columns are drawn.
 $B8AE INC HL        ; { Move forward to the correct position in the buffer.
 $B8AF INC HL        ; }
 $B8B0 JR $B84B      ; Jump back to draw some more.
; Otherwise, the instruction must be "column repeat" (#N$FD), so repeat this graphic for a number of columns.
*$B8B2 LD A,(HL)     ; Get the next byte.
 $B8B3 INC HL        ; Move to the next position in the buffer.
*$B8B4 CALL $B7BA    ; Put the graphic on screen.
 $B8B7 INC E         ; Move forward a column.
 $B8B8 DJNZ $B8B4    ; Loop while there is more to draw.
 $B8BA JP $B84B      ; Otherwise jump back to draw some more.
; Simple instruction - display a graphic 
*$B8BD CALL $B7BA    ; Put the graphic on screen.
*$B8C0 INC E         ; Move forward a column.
 $B8C1 JP $B84B      ; Jump back to draw some more.

; Print an FF terminated string, processing control characters
;
; Used by the routines at #R$80E5, #R$B2F1, #R$B3C3, #R$B451 and #R$ED2A.
;
; C The attribute to display
; HL The address of the start of the string
; D The y co-ordinate of the first character
; E The x co-ordinate of the first character
c$B8C4 LD A,(HL)     ; Get the current byte.
 $B8C5 INC HL        ; Point #REGhl to the next one.
 $B8C6 CP $80        ; Is the current byte less than #N$80?
 $B8C8 JR C,$B8E7    ; Jump forward if so.
 $B8CA CP $FF        ; Is the current byte an end marker? (#N$FF)
 $B8CC RET Z         ; Return if it is, it's the end of the string.
; Process a special character.
 $B8CD CP $FE        ; Is the current byte an attribute marker? (#N$FE)
 $B8CF JR NZ,$B8D5   ; Jump forward if it isn't.
 $B8D1 LD C,(HL)     ; Otherwise put the next byte as an attribute in #REGc.
; Process an attribute character.
 $B8D2 INC HL        ; Point #REGhl to the next place in the buffer.
 $B8D3 JR $B8C4      ; Jump back to draw some more.
; Process more special characters.
*$B8D5 CP $A8        ; { If the current byte isn't between #N$A8 and #N$E8
 $B8D7 JR C,$B8E7    ; then it's an unrecognised character, so ignore it.
 $B8D9 CP $E8        ;
 $B8DB JR NC,$B8E7   ; }
; Process position / movement characters.
 $B8DD SUB $C8       ; Subtract #N$C8 to get the actual offset (which may be negative).
 $B8DF ADD A,E       ; { Add this to the x co-ordinate.
 $B8E0 LD E,A        ; }
 $B8E1 LD A,D        ; { Use the next byte as an offset for the y co-ordinate.
 $B8E2 ADD A,(HL)    ;
 $B8E3 LD D,A        ; }
 $B8E4 INC HL        ; Point #REGhl to the next place in the buffer.
 $B8E5 JR $B8C4      ; Jump back to draw some more.
; This is a simple ASCII character.
*$B8E7 CALL $B715    ; Print the graphic.
 $B8EA INC E         ; Move forward one column.
 $B8EB JR $B8C4      ; Jump back to draw some more.

; Blank the screen
;
; Used by the routines at #R$80E5, #R$8155, #R$B2F1, #R$B3C3 and #R$B451.
c$B8ED LD HL,$4000   ; { Clear the display file.
 $B8F0 LD (HL),$00   ;
 $B8F2 LD DE,$4001   ;
 $B8F5 LD BC,$1800   ;
 $B8F8 LDIR          ; }
 $B8FA LD (HL),$46   ; { Fill the attribute buffer with bright yellow on black.
 $B8FC LD BC,$02FF   ;
 $B8FF LDIR          ; }
 $B901 RET           ; Return.

; Clear the room's graphics
;
; Used by the routines at #R$B952, #R$ED2A, #R$EDF7, #R$EFC7 and #R$F177.
c$B902 PUSH HL       ; { Preserve main registers.
 $B903 PUSH BC       ;
 $B904 PUSH DE       ; }
 $B905 LD IX,$8248   ; Point #REGix at the table between the status bar and main screen.
 $B909 LD C,$98      ; #N$98 rows to process.
*$B90B LD L,(IX+$00) ; { Put the address in #REGhl.
 $B90E LD H,(IX+$01) ; }
 $B911 LD B,$20      ; { Clear the next row.
*$B913 LD (HL),$00   ;
 $B915 INC HL        ;
 $B916 DJNZ $B913    ; }
 $B918 INC IX        ; { Move to the next place in the table.
 $B91A INC IX        ; }
 $B91C DEC C         ; { Loop while there are more rows to handle.
 $B91D JR NZ,$B90B   ; }
 $B91F LD HL,$58A0   ; { Fill the relevant part of the attribute buffer
 $B922 LD BC,$0260   ; with bright yellow on black.
*$B925 LD (HL),$46   ;
 $B927 INC HL        ;
 $B928 DEC BC        ;
 $B929 LD A,B        ;
 $B92A OR C          ;
 $B92B JR NZ,$B925   ; }
; This entry point is used by the routine at #R$B931.
*$B92D POP DE        ; { Restore main registers and return.
 $B92E POP BC        ;
 $B92F POP HL        ; 
 $B930 RET           ; }

; Clear the top status bar
;
; Used by the routine at #R$E3FD.
c$B931 PUSH HL       ; { Preserve main registers.
 $B932 PUSH BC       ;
 $B933 PUSH DE       ; }
 $B934 LD IX,$81F8   ; Point #REGix at the table for status bar screen offsets.
 $B938 LD C,$20      ; #N$20 rows to clear.
*$B93A LD L,(IX+$00) ; { Put the address in #REGhl.
 $B93D LD H,(IX+$01) ; }
 $B940 LD B,$20      ; { Clear the next row.
*$B942 LD (HL),$00   ;
 $B944 INC HL        ;
 $B945 DJNZ $B942    ; }
 $B947 INC IX        ; { Move to the next place in the table.
 $B949 INC IX        ; }
 $B94B DEC C         ; { Loop while there are more rows to handle.
 $B94C JR NZ,$B93A   ; }
 $B94E JP $B92D      ; Jump back to restore main registers and return.

; The current room number
g$B951 DEFB $00

; Draw a room's background graphics
;
; Used by the routines at #R$813B, #R$8155, #R$AC06, #R$ED2A and #R$EDF7.
c$B952 LD A,$B8      ; { Set the fork lift's position on the ground.
 $B954 LD ($AF88),A  ; }
 $B957 CALL $B902    ; Clear the playing area.
 $B95A LD A,(IY+$0F) ; Get the current room in #REGa.
 $B95D ADD A,A       ; Double it to get a word offset.
 $B95E LD E,A        ; { Put this in #REGde.
 $B95F LD D,$00      ; }
 $B961 LD HL,$CDB5   ; { Add the base address of the room data. (#R$CDB5) 
 $B964 ADD HL,DE     ; }
 $B965 LD E,(HL)     ; { Put the actual address in #REGde.
 $B966 INC HL        ;
 $B967 LD D,(HL)     ; }
 $B968 EX DE,HL      ; Swap #REGde and #REGhl.
; This entry point is used by the routines at #R$EFC7 and #R$F177.
; At this point, #REGhl points to the room graphics data.
*$B969 LD D,(HL)     ; { Put the first two bytes in #REGde.
 $B96A INC HL        ;
 $B96B LD E,(HL)     ;
 $B96C INC HL        ; }
 $B96D LD A,D        ; { Get the first byte and reset bit 7.
 $B96E AND $7F       ; }
 $B970 CP $7F        ; Should the screen be refreshed now?
 $B972 JR Z,$B9A8    ; Jump forward if so.
 $B974 CP $7E        ; Is this data flag dependent?
 $B976 JR NZ,$B982   ; Jump forward if not.
; These graphics are flag dependent.
 $B978 LD A,E        ; Put the second byte in #REGa.
 $B979 CALL $EC1D    ; Is the flag set?
 $B97C JR NZ,$B969   ; Jump forward if so.
 $B97E INC HL        ; { Otherwise skip over this entry
 $B97F INC HL        ; as it shouldn't be drawn.
 $B980 JR $B969      ; }
; The graphics can be drawn.
*$B982 PUSH HL       ; Store #REGhl.
 $B983 LD B,A        ; Put the first byte as the block ID in #REGb.
 $B984 LD A,E        ; Get the second value.
 $B985 AND $F8       ; { Put only the top 5 bits as a value in #REGc.
 $B987 RRA           ;
 $B988 RRA           ;
 $B989 RRA           ;
 $B98A LD C,A        ; }
 $B98B RL D          ; Double #REGd.
 $B98D RL E          ; Double #REGe and add the top bit of the previous value of #REGd.
 $B98F LD A,E        ; { Get the top four bits of the second value.
 $B990 AND $0F       ; }
 $B992 ADD A,$05     ; Start drawing from row 5.
 $B994 LD D,A        ; Put the row in #REGd.
 $B995 LD E,C        ; Put the column in #REGe.
 $B996 LD L,B        ; { Put the block ID in #REGhl.
 $B997 LD H,$00      ; }
 $B999 ADD HL,HL     ; Double it to get a word offset.
 $B99A LD BC,$BD86   ; { Add the basic offset of the room block components (#R$BD86)
 $B99D ADD HL,BC     ; }
 $B99E LD A,(HL)     ; { Put the address found in #REGhl.
 $B99F INC HL        ;
 $B9A0 LD H,(HL)     ;
 $B9A1 LD L,A        ; }
 $B9A2 CALL $B84B    ; Draw the graphic string.
 $B9A5 POP HL        ; Restore #REGhl.
 $B9A6 JR $B969      ; Jump back to draw some more.
*$B9A8 CALL $B9AC    ; Copy the data to the working buffer.
 $B9AB RET           ;

; Copy the screen to the working buffer
;
; Used by the routines at #R$B952, #R$ED2A and #R$EDF7.
c$B9AC LD DE,$5B00   ; Point #REGde into the screen buffer.
 $B9AF LD IX,$8278   ; Point #REGix at the offset table for the main screen.
 $B9B3 LD BC,$1000   ; Number of bytes to draw.
*$B9B6 LD L,(IX+$00) ; { Put the next address in #REGhl.
 $B9B9 LD H,(IX+$01) ; }
 $B9BC INC IX        ; { Move to the next entry in the table.
 $B9BE INC IX        ; }
 $B9C0 CALL $BA25    ; Copy the data.
 $B9C3 JP PE,$B9B6   ; Jump back if there is more to copy.
 $B9C6 LD BC,$0200   ; Number of bytes to draw.
 $B9C9 LD DE,$FE00   ; Point #REGde at the attribute buffer.
 $B9CC LD HL,$5900   ; Point #REGhl at the attributes for the main play area.
*$B9CF CALL $BA25    ; Copy the data.
 $B9D2 JP PE,$B9CF   ; Jump back if there is more to copy.
 $B9D5 RET           ; Otherwise return.

; Draw any characters that are in this room
;
; Used by the routines at #R$813B, #R$81AE and #R$B3C3.
;
; IY The buffer containing the current character's data (#$RBC67 - #N$BC6B)
c$B9D6 LD A,(IY+$0F) ; Get the current room in #REGa.
 $B9D9 LD ($B951),A  ; Store this temporarily so all characters can use it. (#R$B951)
 $B9DC LD B,$05      ; Update 5 character.
 $B9DE PUSH IY       ; Store the pointer to the current character.
 $B9E0 LD IY,$BC6B   ; Point #REGiy at the last character. (Harry)
*$B9E4 PUSH BC       ; Store the character count in #REGbc.
 $B9E5 LD A,($B951)  ; Put the current room in #REGa.
 $B9E8 CP (IY+$0F)   ; Is the character in this room?
 $B9EB JR NZ,$B9F0   ; { If they are, copy their data to the sprite buffer.
 $B9ED CALL $B0E6    ; }
*$B9F0 DEC IY        ; Point #REGiy to the next character.
 $B9F2 POP BC        ; Restore the character count in #REGbc.
 $B9F3 DJNZ $B9E4    ; Loop while there are more characters to draw.
 $B9F5 POP IY        ; Restore the pointer to the current character.
 $B9F7 CALL $B9FB    ; { Put the sprite buffer on screen and return.
 $B9FA RET           ; }

; Put the sprites on screen
;
; Used by the routines at #R$813B, #R$B9D6, #R$ED2A, #R$EDF7, #R$EFC7 and
; #R$F177.
c$B9FB LD HL,$6B00   ; Point #REGhl at the sprite buffer. (#R$6B00)
 $B9FE LD IX,$8278   ; Point #REGix at the screen offset table. (#R$8278)
 $BA02 LD BC,$1000   ; Length is #N$1000.
*$BA05 LD E,(IX+$00) ; { Put the next screen offset in #REGde.
 $BA08 LD D,(IX+$01) ; }
 $BA0B INC IX        ; { Move to the next offset in the table.
 $BA0D INC IX        ; }
 $BA0F CALL $BA25    ; Copy the next row of the sprite buffer to screen.
 $BA12 JP PE,$BA05   ; Loop while there is more to draw.
; Now put the attributes on screen.
 $BA15 LD BC,$0200   ; Length is #N$200.
 $BA18 LD HL,$FC00   ; Point #REGhl at the attribute buffer. (#R$FC00)
 $BA1B LD DE,$5900   ; Point #REGde to the middle third of the screen.
*$BA1E CALL $BA25    ; Copy the next row of the attribute buffer to screen.
 $BA21 JP PE,$BA1E   ; Loop back while there is more to draw.
 $BA24 RET           ; Otherwise return.

; Copy a row of screen or attribute data
;
; Used by the routines at #R$B9AC, #R$B9FB and #R$EEA2.
;
; HL Source
; DE Destination
; BC On entry, holds the current count. On exit, holds the count decremented by #N$20.
c$BA25 LDI           ; { Copy HL to DE, decrement BC, increment and repeat #N$20 times.
 $BA27 LDI           ; 
 $BA29 LDI           ; 
 $BA2B LDI           ;
 $BA2D LDI           ;
 $BA2F LDI           ;
 $BA31 LDI           ;
 $BA33 LDI           ;
 $BA35 LDI           ;
 $BA37 LDI           ;
 $BA39 LDI           ;
 $BA3B LDI           ;
 $BA3D LDI           ;
 $BA3F LDI           ;
 $BA41 LDI           ;
 $BA43 LDI           ;
 $BA45 LDI           ;
 $BA47 LDI           ;
 $BA49 LDI           ;
 $BA4B LDI           ;
 $BA4D LDI           ;
 $BA4F LDI           ;
 $BA51 LDI           ;
 $BA53 LDI           ;
 $BA55 LDI           ;
 $BA57 LDI           ;
 $BA59 LDI           ;
 $BA5B LDI           ;
 $BA5D LDI           ;
 $BA5F LDI           ;
 $BA61 LDI           ;
 $BA63 LDI           ; 
 $BA65 RET           ; }

; '{character} is in {location}'
t$BA66 DEFM " IS IN "
 $BA6D DEFB $FF

; Print a "{character} is in {room}" message
;
; Used by the routine at #R$E79B.
c$BA6E LD A,($BAB3)  ; { Are we in the middle of printing a message?
 $BA71 OR A          ; }
 $BA72 RET NZ        ; Return if so, busy at the moment.
; Not redrawing the room, so the message can be printed.
 $BA73 LD HL,$DFDC   ; Point #REGhl at the character set. (#R$DFDC)
 $BA76 LD ($B7E9),HL ; Set the printing routine in #R$B7BA to use this.
 $BA79 LD A,(IY+$0F) ; Get the current room in #REGa.
 $BA7C LD HL,$7F1F   ; Point #REGhl at the start of the room text entries.
 $BA7F CALL $AC6C    ; Search for the right entry, returns with #REGhl
                     ; pointing to the correct address for the room's text.
 $BA82 PUSH HL       ; Store #REGhl.
 $BA83 CALL $BACE    ; { Put the string's length in #REGc.
 $BA86 LD C,B        ; }
 $BA87 LD H,$7C      ; Point #REGh at the high byte for the character names. (#R$7C00)
 $BA89 LD L,(IY-$23) ; Get the low byte from the character. (#R$BC44)
 $BA8C PUSH HL       ; Remember the address for the character in #REGhl.
 $BA8D CALL $BACE    ; Put the string's length in #REGb.
 $BA90 LD A,$07      ; { Given the total string length (character + room + extra),
 $BA92 ADD A,B       ; work out the position on screen that will put the
 $BA93 ADD A,C       ; display justified in the centre.
 $BA94 LD C,A        ;
 $BA95 LD A,$20      ;
 $BA97 SUB C         ;
 $BA98 SRL A         ; 
 $BA9A LD E,A        ; }
 $BA9B LD D,$04      ; Start drawing at row 4.
 $BA9D POP HL        ; Restore the character name in #REGhl.
 $BA9E LD C,$4E      ; Set bright yellow on blue attribute.
 $BAA0 CALL $B84B    ; Draw the graphic.
 $BAA3 LD HL,$BA66   ; Point #REGhl at "{character} is in {room}" text. (#R$BA66)
 $BAA6 CALL $B84B    ; Draw it.
 $BAA9 POP HL        ; Restore the room text in #REGhl.
 $BAAA CALL $B84B    ; Draw it.
 $BAAD LD A,$1E      ; { Set the tick count to #N$1E and return.
 $BAAF LD ($BAB3),A  ;
 $BAB2 RET           ; }

; Tick count for displaying "{character} is in {room}" message
;
; Used by the routines in #R$BA6E and #R$BAB4.
g$BAB3 DEFB $00

; Update the tick counter for the "{character} is in {room}" display
;
; Used by the routines at #R$81AE and #R$EDF7.
c$BAB4 LD HL,$BAB3   ; { Are we in the middle of printing a message?
 $BAB7 LD A,(HL)     ;
 $BAB8 OR A          ; }
 $BAB9 RET Z         ; Return if not.
 $BABA DEC (HL)      ; Otherwise decrement the tick count.
 $BABB RET NZ        ; Return if it is not zero.
; The tick count has reached 0, so get rid of the message.
 $BABC LD C,$42      ;
 $BABE LD HL,$DFDC   ; { Set the drawing routine at #R$B7BA to use the character set (#R$DFDC) as a base address.
 $BAC1 LD ($B7E9),HL ; }
 $BAC4 LD DE,$0400   ; Set the position.
 $BAC7 LD HL,$7E68   ; Point #REGhl at the status bar text (#R$7E3F) that was overwritten by the message.
 $BACA CALL $B84B    ; { Draw the graphic and return.
 $BACD RET           ; }

; Get the length of a string
;
; Used by the routine at #R$BA6E.
;
; HL The address of the current string
; B On exit, returns the length
c$BACE LD B,$00      ; Set #REGb to 0.
*$BAD0 LD A,(HL)     ; Get the byte pointed to by #REGhl.
 $BAD1 CP $FF        ; Is it #N$FF?
 $BAD3 RET Z         ; Return if it is.
 $BAD4 INC B         ; Otherwise increase the count.
 $BAD5 INC HL        ; { Move forward to the next part of the string
 $BAD6 JR $BAD0      ; and repeat. }

; Initialize character data
;
; Used by the routines at #R$8155 and #R$8184.
c$BAD8 LD IY,$BC67   ; { Set the current player buffer (#R$B09D) to Wally. (#R$BC67) }
 $BADC LD ($B09D),IY ;
; Copy the initial object states. Objects 00 - #N$1E are held in rooms, the remainder
; are held by the characters.
 $BAE0 LD HL,$BB3E   ; Point #REGhl at the initial collectable object states. (#R$BB3E)
 $BAE3 LD DE,$BCE9   ; Point #REGde at the start of the room object data. (#R$BCE9)
 $BAE6 LD B,$1F      ; #N$1F items to initialise 
*$BAE8 PUSH BC       ; Remember this value.
*$BAE9 LD A,(DE)     ; Get the next byte.
 $BAEA CP $FF        ; Is it an end marker?
 $BAEC JR NZ,$BAF1   ; Move forward if it isn't ie: there are objects here.
 $BAEE INC DE        ; { Otherwise move to the next byte and check the next room.
 $BAEF JR $BAE9      ; }
; An object was found. Copy the template data.
*$BAF1 LDI           ; Copy the object ID.
 $BAF3 INC DE        ; { Skip over the co-ordinates which are fixed.
 $BAF4 INC DE        ; }
 $BAF5 LDI           ; Copy the flags.
 $BAF7 POP BC        ; Restore the flags.
 $BAF8 DJNZ $BAE8    ; Loop while there are more objects to initialise.
; Copy the initial data for the characters.
 $BAFA LD BC,$00AF   ; Number of bytes to copy.
 $BAFD LD HL,$BB7C   ; Copy from the initial template. (#R$BB7C)
 $BB00 LD DE,$BC30   ; Copy to start of main buffer. (#R$BC30)
 $BB03 LDIR          ; Do the copy.
; Set initial flags;
 $BB05 XOR A         ; Set #REGa to zero, which will be set for some flags.
 $BB06 LD ($ECF5),A  ; Set the next reward screen (#R$ECF5) to 0 (morning).
 $BB09 LD ($ECFE),A  ; { Set the money earned (#R$ECFE) to £0.
 $BB0C LD ($ECFF),A  ; }
 $BB0F INC A         ; { Set 0 letters brought to the safe. (#R$EDC5)
 $BB10 LD ($EDC5),A  ; }
; Set up initial data on School Lane.
 $BB13 LD A,$14      ; { Set #N$14 asteroids left to hit. (#R$F9F4)
 $BB15 LD ($F9F4),A  ; }
 $BB18 LD A,$28      ; { Set the lightning bolts in School Lane to cover
 $BB1A LD ($F5BE),A  ; just the pylon area, making it inaccessible.
 $BB1D LD A,$3C      ;
 $BB1F LD ($F5C2),A  ;
 $BB22 LD A,$20      ;
 $BB24 LD ($F5C6),A  ; }
; Reset the money table.
 $BB27 LD HL,$EC5C   ; Point #REGhl at the earnings buffer.
 $BB2A LD B,$20      ; #N$20 entries to look at.
*$BB2C LD (HL),$00   ; Set the ID to 0.
 $BB2E INC HL        ; { Point #REGhl at the next entry.
 $BB2F INC HL        ;
 $BB30 INC HL        ; }
 $BB31 DJNZ $BB2C    ; Loop while there are more entries to update.
 $BB33 LD HL,$EC0F   ; Point #REGhl at the game flags. (#R$EC0F)
 $BB36 LD B,$0E      ; #N$0E entries to update.
*$BB38 LD (HL),$00   ; Reset the flag.
 $BB3A INC HL        ; Point #REGhl at the next one.
 $BB3B DJNZ $BB38    ; Loop while there are more flags to reset.
 $BB3D RET           ; Return.

; Initial states for collectable objects
;
; Used by the routine at #R$BAD8.
;
; .
;
; Objects 00 to #N$1E are put sequentially into rooms.
; The remainder of the objects are initially held by the characters.
;
; Each table contains the object ID, plus the flags.
; Bits 0 - 5 show which player can pick the object up,
; if bit 7 if reset then a computer controlled player can also pick it up.
b$BB3E DEFB $00,$1F     ; Object 00 - The plunger
 $BB40 DEFB $01,$9F     ; Object 01 - The letter A
 $BB42 DEFB $02,$1F     ; Object 02 - Book 2
 $BB44 DEFB $03,$9F     ; Object 03 - The sand
 $BB46 DEFB $04,$9F     ; Object 04 - The battery
 $BB48 DEFB $05,$9F     ; Object 05 - The letter K
 $BB4A DEFB $06,$9F     ; Object 06 - The cement
 $BB4C DEFB $07,$1F     ; Object 07 - Book 3
 $BB4E DEFB $08,$1F     ; Object 08 - The trowel
 $BB50 DEFB $09,$1F     ; Object 09 - The matches
 $BB52 DEFB $0A,$9F     ; Object 0A - The cracked insulator
 $BB54 DEFB $0B,$9F     ; Object 0B - Book 1
 $BB56 DEFB $0C,$1F     ; Object 0C - The monkey nuts
 $BB58 DEFB $0D,$9F     ; Object 0D - The money
 $BB5A DEFB $0E,$1F     ; Object 0E - Superglue
 $BB5C DEFB $0F,$1F     ; Object 0F - Chewing gum
 $BB5E DEFB $10,$1F     ; Object 10 - The bucket
 $BB60 DEFB $11,$9F     ; Object 11 - The jump leads
 $BB62 DEFB $12,$9F     ; Object 12 - The bunsen burner
 $BB64 DEFB $13,$9F     ; Object 13 - The letter B
 $BB66 DEFB $14,$1F     ; Object 14 - The gask mask
 $BB68 DEFB $15,$1F     ; Object 15 - The parcel
 $BB6A DEFB $16,$9F     ; Object 16 - The fuse
 $BB6C DEFB $17,$9F     ; Object 17 - The meat
 $BB6E DEFB $18,$9F     ; Object 18 - The monkey wrench
 $BB70 DEFB $19,$1F     ; Object 19 - Screwdriver
 $BB72 DEFB $1A,$9F     ; Object 1A - The letter E
 $BB74 DEFB $1B,$9F     ; Object 1B - The hook
 $BB76 DEFB $1C,$1F     ; Object 1C - The patch
 $BB78 DEFB $1D,$9F     ; Object 1D - The pipe
 $BB7A DEFB $1E,$9F     ; Object 1E - The letter R

; Template for initial game data
b$BB7C DEFB $1F,$1F,$1F,$1F,$1F     ; All players can pick any object up. (#R$BC30)
 $BB81 DEFB $1F,$1F,$1F,$1F,$1F     ; All players can pick any object up. (#R$BC35)
 $BB86 DEFB $00,$00,$00,$00,$00     ; Not near any object  (#R$BC3A)
 $BB8B DEFB $01,$02,$04,$08,$10     ; Character IDs.  (#R$BC3F)
 $BB90 DEFB $00,$06,$0C,$10,$15     ; Character names.  (#R$BC44)
 $BB95 DEFB $00,$00,$00,$00,$00     ; Earnings / 100 - start at 0.  (#R$BC49)
 $BB9A DEFB $00,$00,$00,$00,$00     ; Turn off footstep flags.  (#R$BC4E)
 $BB9F DEFB $00,$00,$00,$00,$00     ;  (#R$BC53)
 $BBA4 DEFB $00,$00,$00,$00,$00     ;  (#R$BC58)
 $BBA9 DEFB $00,$00,$00,$00,$00     ; Earnings % 100 - start at 0.  (#R$BC5D)
 $BBAE DEFB $00,$00,$00,$00,$00     ;  (#R$BC62)
 $BBB3 DEFB $00,$00,$00,$00,$00     ; Default to frame 0 for all characters.  (#R$BC67)
 $BBB8 DEFB $40,$08,$90,$A8,$E8     ; Default x co-ordinates.  (#R$BC6C)
 $BBBD DEFB $98,$98,$98,$98,$98     ; Default y co-ordinates.  (#R$BC71)
 $BBC2 DEFB $00,$00,$00,$00,$00     ; Everyone starts in the town square.  (#R$BC76)
 $BBC7 DEFB $80,$80,$80,$80,$80     ; Everyone starts with full endurance.  (#R$BC7B)
 $BBCC DEFB $5B,$5C,$5D,$5E,$5F     ;  (#R$BC80)
 $BBD1 DEFB $46,$45,$44,$43,$07     ;  (#R$BC85)
 $BBD6 DEFB $38,$38,$38,$38,$38     ;  (#R$BC8A)
 $BBDB DEFB $94,$98,$9C,$A0,$A4     ;  (#R$BC8F)
 $BBE0 DEFB $03,$03,$03,$03,$03     ; Everyone starts with 3 lives.  (#R$BC94)
 $BBE5 DEFB $00,$00,$00,$00,$00     ;  (#R$BC99)
 $BBEA DEFB $00,$00,$00,$00,$00     ;  (#R$BC9E)
 $BBEF DEFB $00,$00,$00,$00,$00     ; Default to not jumping. (#R$BCA3)
 $BBF4 DEFB $01,$01,$01,$01,$01     ; Default to undefined direction. (#R$BCA8)
 $BBF9 DEFB $00,$00,$00,$00,$00     ;  (#R$BCAD)
 $BBFE DEFB $00,$00,$00,$00,$00     ;  (#R$BCB2)
 $BC03 DEFB $1F,$21,$23,$25,$27     ; Default first item. (#R$BCB7)
 $BC08 DEFB $20,$22,$24,$26,$28     ; Default second item. (#R$BCBC)
 $BC0D DEFB $14,$05,$17,$12,$08     ;  (#R$BCC1)
 $BC12 DEFB $00,$00,$00,$00,$00     ;  (#R$BCC6)
 $BC17 DEFB $00,$00,$00,$01,$01     ;  (#R$BCCB)
 $BC1C DEFB $18,$18,$18,$01,$01     ;  (#R$BCD0)
 $BC21 DEFB $01,$01,$01,$18,$18     ;  (#R$BCD5)
 $BC26 DEFB $01,$01,$01,$00,$00     ;  (#R$BCDA)

; The current direction of each sprite (0 - left, 1 - right)
;
; Used by the routines in #R$B1A6, #R$B288 and #R$EFC7
g$BC2B DEFB $00,$00,$00,$00,$00

; Flags for objects (?)
g$BC30 DEFB $1F,$1F,$1F,$1F,$1F

; Flags for objects (?)
g$BC35 DEFB $1F,$1F,$1F,$1F,$1F

; ID of the object a player is standing near and could potentially pick up
g$BC3A DEFB $00,$00,$00,$00,$00

; Character ID (1 = Wally, 2 = Wilma, 4 = Tom, 8 = Dick, 10 = Harry)
g$BC3F DEFB $01,$02,$04,$08,$10

; Offset for each character name (from 7C00)
g$BC44 DEFB $00,$06,$0C,$10,$15

; Earnings / 100
g$BC49 DEFB $00,$00,$00,$00,$00

; Set to 1 to trigger a footstep sound for each character
g$BC4E DEFB $00,$00,$00,$00,$00

; Set to 1 if a computer controlled character is in the room it wanted to get to
g$BC53 DEFB $00,$00,$00,$00,$00

; ID of the next object in a room that a computer player can swap with
g$BC58 DEFB $00,$00,$00,$00,$00

; Earnings % 100
g$BC5D DEFB $00,$00,$00,$00,$00

; Next index in the player's swap list to use.
g$BC62 DEFB $00,$00,$00,$00,$00

; The frame ID for each character
;
; Runs from #N$BC67 (Wally) to #N$BC6B (Harry).
;
; .
;
; This value is also stored in #REGiy in order to access all the other flags.
g$BC67 DEFB $00,$00,$00,$00,$00

; x position on screen for each character
;
; Runs from #N$BC6C (Wally) to #N$BC70 (Harry).
g$BC6C DEFB $40,$08,$90,$A8,$E8

; y position on screen for each character
;
; Runs from #N$BC71 (Wally) to #N$BC75 (Harry).
g$BC71 DEFB $98,$98,$98,$98,$98

; Room number a character is in
;
; Runs from #N$BC76 (Wally) to #N$BC7A (Harry).
g$BC76 DEFB $00,$00,$00,$00,$00

; Endurance level for each character
;
; Runs from #N$BC7B (Wally) to #N$BC7F (Harry).
g$BC7B DEFB $80,$80,$80,$80,$80

; ID of the favourite food item that restores endurance to maximum.
g$BC80 DEFB $5B,$5C,$5D,$5E,$5F

; Attribute to draw the character
g$BC85 DEFB $46,$45,$44,$43,$07

; Low byte of the character's graphic
g$BC8A DEFB $38,$38,$38,$38,$38

; High byte of the character's graphic
g$BC8F DEFB $94,$98,$9C,$A0,$A4

; Lives left for each player
g$BC94 DEFB $03,$03,$03,$03,$03

; Unused
g$BC99 DEFB $00,$00,$00,$00,$00

; Set to 1 if a character is in mid-air
g$BC9E DEFB $00,$00,$00,$00,$00

; Character jump flag
;
; 0 = no, 1 = jumping right, FF = jumping left
g$BCA3 DEFB $00,$00,$00,$00,$00

; Character direction (01 = right, FF = left)
g$BCA8 DEFB $01,$01,$01,$01,$01

; Character jump direction (01 = right, FF = left)
g$BCAD DEFB $00,$00,$00,$00,$00

; If jumping, holds the frame number in the animation sequence
g$BCB2 DEFB $00,$00,$00,$00,$00

; First item of each character
g$BCB7 DEFB $1F,$21,$23,$25,$27

; Second item of each character
g$BCBC DEFB $20,$22,$24,$26,$28

; Target room to send a computer player
g$BCC1 DEFB $14,$05,$17,$12,$08

; Flag that toggles between 0 and 1 when a character
; not in the current room needs updating.
g$BCC6 DEFB $00,$00,$00,$00,$00

; Copy of the second entry in the current "next rooms" table (trigger co-ordinates)
g$BCCB DEFB $00,$00,$00,$01,$01

; Copy of the first entry in the current "next rooms" table (room to move to)
g$BCD0 DEFB $18,$18,$18,$01,$01

; The room the computer player was previously in.
g$BCD5 DEFB $01,$01,$01,$18,$18

; Copy of the third entry in the current "next rooms" table (new co-ordinates)
g$BCDA DEFB $01,$01,$01,$00,$00

; Lo byte of the item swap buffer
g$BCDF DEFB $A7,$B0,$B9,$C2,$CB

; Hi byte of the item swap buffer
g$BCE4 DEFB $AE,$AE,$AE,$AE,$AE

; Items in the Town Square (none)
b$BCE9 DEFB $FF

; Items in Stamp Street (none)
b$BCEA DEFB $FF

; Items in the Post Office
b$BCEB DEFB $00,$C8,$90,$1F
 $BCEF DEFB $FF

; Items in Market Street (none)
b$BCF0 DEFB $FF

; Items in the Supermarket
b$BCF1 DEFB $01,$18,$88,$9F
 $BCF5 DEFB $02,$78,$A8,$1F
 $BCF9 DEFB $FF

; Item in the Park
b$BCFA DEFB $03,$88,$A8,$9F
 $BCFE DEFB $FF

; Items in Wobbly Walk (none)
b$BCFF DEFB $FF

; Items in Rubble Road (none)
b$BD00 DEFB $FF

; Items in Wall Street
b$BD01 DEFB $04,$20,$A0,$9F
 $BD05 DEFB $05,$C8,$68,$9F
 $BD09 DEFB $FF

; Item in Pete Street
b$BD0A DEFB $06,$40,$A8,$9F
 bBD0E DEFB $FF

; Items in Workshed
b$BD0F DEFB $07,$60,$90,$1F
 $BD13 DEFB $08,$80,$A8,$1F
 $BD17 DEFB $09,$C8,$A8,$1F
 $BD1B DEFB $FF

; Item in School Lane
b$BD1C DEFB $0A,$28,$50,$9F
 $BD20 DEFB $FF

; Item in the School
b$BD21 DEFB $0B,$10,$A8,$9F
 $BD25 DEFB $FF

; Items in Baker Street (none)
b$BD26 DEFB $FF

; Item in the Bakers
b$BD27 DEFB $0C,$10,$A0,$1F
 $BD2B DEFB $FF

; Item in the Pub
b$BD2C DEFB $0D,$A0,$90,$9F
 $BD30 DEFB $FF

; Items in Motor Way (none)
b$BD31 DEFB $FF

; Items in the Laboratory
b$BD32 DEFB $0E,$60,$90,$1F
 $BD36 DEFB $0F,$D8,$90,$1F
 $BD3A DEFB $FF

; Item in the Garage
b$BD3B DEFB $10,$78,$A8,$1F
 $BD3F DEFB $FF

; Items in Reference Road (none)
b$BD40 DEFB $FF

; Items in the Library
b$BD41 DEFB $11,$38,$90,$9F
 $BD45 DEFB $12,$78,$90,$9F
 $BD49 DEFB $13,$C0,$90,$9F
 $BD4D DEFB $FF

; Items in Penny Lane
b$BD4E DEFB $FF

; Item in the Bank
b$BD4F DEFB $14,$C8,$A8,$1F
 $BD53 DEFB $FF

; Item in Wally's House
b$BD54 DEFB $15,$78,$A8,$1F
 $BD58 DEFB $FF

; Items in Meat Street (none)
b$BD59 DEFB $FF

; Items in the Butchers
b$BD5A DEFB $16,$10,$A8,$9F
 $BD5E DEFB $17,$10,$90,$9F
 $BD62 DEFB $FF

; Items in Trunk Road (none)
b$BD63 DEFB $FF

; Item in the Zoo
b$BD64 DEFB $18,$08,$A8,$9F
 $BD68 DEFB $FF

; Items in Rail Road (none)
b$BD69 DEFB $FF

; Item in the Station
b$BD6A DEFB $19,$B0,$90,$1F
 $BD6B DEFB $FF

; Items in the Docks
b$BD6F DEFB $1A,$00,$A8,$9F
 $BD73 DEFB $1B,$84,$90,$9F
 $BD77 DEFB $FF

; Item in the Sewer
b$BD78 DEFB $1C,$78,$A8,$1F
 $BD7C DEFB $FF

; Items in the Cave
b$BD7D DEFB $1D,$00,$98,$9F
 $BD81 DEFB $1E,$48,$A8,$9F
 $BD85 DEFB $FF

; Jump table for room block components
w$BD86 DEFW $C352
 $BD88 DEFW $C37C
 $BD8A DEFW $C3DB
 $BD8C DEFW $C56B
 $BD8E DEFW $C580
 $BD90 DEFW $C5C0
 $BD92 DEFW $C651
 $BD94 DEFW $C6E3
 $BD96 DEFW $C703
 $BD98 DEFW $C71F
 $BD9A DEFW $C732
 $BD9C DEFW $C745
 $BD9E DEFW $C77F
 $BDA0 DEFW $C7BF
 $BDA2 DEFW $C844
 $BDA4 DEFW $C9BE
 $BDA6 DEFW $C9DD
 $BDA8 DEFW $C9FC
 $BDAA DEFW $CA57
 $BDAC DEFW $C860
 $BDAE DEFW $C908
 $BDB0 DEFW $C986
 $BDB2 DEFW $C9A2
 $BDB4 DEFW $CA9A
 $BDB6 DEFW $CAAE
 $BDB8 DEFW $C876
 $BDBA DEFW $C8E4
 $BDBC DEFW $C9D4
 $BDBE DEFW $C7B7
 $BDC0 DEFW $C8B3
 $BDC2 DEFW $C8C3
 $BDC4 DEFW $C23C
 $BDC6 DEFW $C35D
 $BDC8 DEFW $C369
 $BDCA DEFW $C91A
 $BDCC DEFW $C762
 $BDCE DEFW $C943
 $BDD0 DEFW $C801
 $BDD2 DEFW $C82B
 $BDD4 DEFW $C889
 $BDD6 DEFW $C89F
 $BDD8 DEFW $C79F
 $BDDA DEFW $C7E0
 $BDDC DEFW $CB05
 $BDDE DEFW $C797
 $BDE0 DEFW $C254
 $BDE2 DEFW $C20A
 $BDE4 DEFW $C220
 $BDE6 DEFW $CB2F
 $BDE8 DEFW $CB55
 $BDEA DEFW $CB6B
 $BDEC DEFW $CBA0
 $BDEE DEFW $CBE0
 $BDF0 DEFW $CBF0
 $BDF2 DEFW $CC03
 $BDF4 DEFW $CC25
 $BDF6 DEFW $CCDA
 $BDF8 DEFW $CCF2
 $BDFA DEFW $C857
 $BDFC DEFW $C27C
 $BDFE DEFW $C92E
 $BE00 DEFW $CC39
 $BE02 DEFW $CC97
 $BE04 DEFW $CB1A
 $BE06 DEFW $CCAA
 $BE08 DEFW $CC8D
 $BE0A DEFW $CC5D
 $BE0C DEFW $C5DA
 $BE0E DEFW $C5F9
 $BE10 DEFW $C610
 $BE12 DEFW $C61A
 $BE14 DEFW $C625
 $BE16 DEFW $C635
 $BE18 DEFW $C291
 $BE1A DEFW $C29A
 $BE1C DEFW $CACA
 $BE1E DEFW $CCB2
 $BE20 DEFW $C19D
 $BE22 DEFW $CA1F
 $BE24 DEFW $BFE2
 $BE26 DEFW $C0F1
 $BE28 DEFW $BFA4
 $BE2A DEFW $BFB2
 $BE2C DEFW $BFDA
 $BE2E DEFW $BFFE
 $BE30 DEFW $BF27
 $BE32 DEFW $C132
 $BE34 DEFW $BE8F
 $BE36 DEFW $BEDA
 $BE38 DEFW $BF03
 $BE3A DEFW $BF19
 $BE3C DEFW $C026
 $BE3E DEFW $C03C
 $BE40 DEFW $C045
 $BE42 DEFW $C050
 $BE44 DEFW $C05A
 $BE46 DEFW $C082
 $BE48 DEFW $C0A0
 $BE4A DEFW $C0AA
 $BE4C DEFW $C0B8
 $BE4E DEFW $C0D4
 $BE50 DEFW $CAEC
 $BE52 DEFW $C0DC
 $BE54 DEFW $CD14
 $BE56 DEFW $C4CD
 $BE58 DEFW $C437
 $BE5A DEFW $C2A8
 $BE5C DEFW $C312
 $BE5E DEFW $C577
 $BE60 DEFW $C960
 $BE62 DEFW $BF81
 $BE64 DEFW $C957
 $BE66 DEFW $BE72
 $BE68 DEFW $C334
 $BE6A DEFW $C347
 $BE6C DEFW $CB85
 $BE6E DEFW $CD2F
 $BE70 DEFW $CD43

; Room block data 70
;
; #CALL:print_block_data(#PC,block_data_70)
b$BE72 DEFB $FB,$EC,$DF,$FE,$46,$09,$09,$F1
 $BE7A DEFB $F1,$0E,$C5,$FF,$FE,$42,$0C,$0D
 $BE82 DEFB $C6,$01,$0A,$0B,$C8,$01,$FE,$46
 $BE8A DEFB $FB,$6C,$E0,$04,$FF

; Room block data 57
;
; #CALL:print_block_data(#PC,block_data_57)
b$BE8F DEFB $FB,$04,$D2,$FE,$44,$07,$FD,$17
 $BE97 DEFB $01,$F0,$01,$02,$03,$AF,$00,$04
 $BE9F DEFB $FB,$E4,$D9,$02,$0B,$03,$02,$0B
 $BEA7 DEFB $0B,$0B,$03,$02,$0B,$0B,$0B,$03
 $BEAF DEFB $02,$0B,$0B,$0B,$03,$02,$0B,$0B
 $BEB7 DEFB $0B,$03,$B0,$01,$FB,$BC,$D6,$FE
 $BEBF DEFB $47,$00,$01,$01,$00,$01,$01,$00
 $BEC7 DEFB $01,$01,$00,$01,$01,$00,$01,$01
 $BECF DEFB $00,$01,$01,$00,$01,$01,$00,$01
 $BED7 DEFB $01,$02,$FF

; Room block data 58
;
; #CALL:print_block_data(#PC,block_data_58)
b$BEDA DEFB $FB,$D4,$DD,$FE,$43,$F0,$01,$00
 $BEE2 DEFB $01,$C8,$FF,$FE,$45,$F0,$01,$00
 $BEEA DEFB $01,$C8,$FF,$FE,$42,$F0,$01,$00
 $BEF2 DEFB $01,$C8,$FF,$FE,$46,$F0,$01,$00
 $BEFA DEFB $01,$C4,$01,$FE,$47,$FD,$04,$02
 $BF02 DEFB $FF

; Room block data 59
;
; #CALL:print_block_data(#PC,block_data_59)
b$BF03 DEFB $FB,$D4,$DD,$FE,$47,$FD,$06,$03
 $BF0B DEFB $C2,$01,$FB,$BC,$D1,$FE,$43,$00
 $BF13 DEFB $01,$02,$02,$00,$01,$FF

; Room block data 5A
;
; #CALL:print_block_data(#PC,block_data_5A)
b$BF19 DEFB $FB,$D4,$DD,$FE,$46,$06,$07,$C6
 $BF21 DEFB $01,$FE,$45,$04,$05,$FF

; Room block data 55
;
; #CALL:print_block_data(#PC,block_data_55)
b$BF27 DEFB $FB,$54,$DD,$FE,$45,$F0,$03,$0A
 $BF2F DEFB $CA,$FD,$F0,$03,$0A,$C9,$FF,$09
 $BF37 DEFB $FE,$42,$C3,$01,$06,$06,$02,$06
 $BF3F DEFB $06,$02,$06,$08,$C0,$01,$07,$07
 $BF47 DEFB $0B,$07,$07,$0B,$07,$CD,$00,$03
 $BF4F DEFB $04,$05,$B9,$01,$FE,$47,$00,$00
 $BF57 DEFB $0C,$0D,$00,$00,$0C,$0D,$00,$00
 $BF5F DEFB $0C,$0D,$00,$01,$BA,$01,$00,$00
 $BF67 DEFB $0F,$0E,$00,$00,$0F,$0E,$00,$00
 $BF6F DEFB $0F,$0E,$01,$BD,$01,$FE,$42,$FD
 $BF77 DEFB $09,$00,$01,$BE,$01,$FD,$08,$00
 $BF7F DEFB $01,$FF

; Room block data 6E
;
; #CALL:print_block_data(#PC,block_data_6E)
b$BF81 DEFB $FB,$0C,$DD,$FE,$42,$F0,$01,$06
 $BF89 DEFB $06,$01,$C6,$01,$05,$01,$C6,$01
 $BF91 DEFB $04,$01,$C5,$01,$07,$F1,$03,$C5
 $BF99 DEFB $01,$06,$FB,$E4,$D9,$0B,$0B,$C6
 $BFA1 DEFB $FF,$0B,$FF

; Room block data 51
;
; #CALL:print_block_data(#PC,block_data_51)
b$BFA4 DEFB $FB,$EC,$DC,$C8,$03,$FE,$44,$00
 $BFAC DEFB $01,$C6,$01,$02,$03,$FF

; Room block data 52
;
; #CALL:print_block_data(#PC,block_data_52)
b$BFB2 DEFB $FB,$0C,$DD,$FE,$28,$00,$08,$C6
 $BFBA DEFB $01,$00,$08,$C6,$01,$01,$08,$C6
 $BFC2 DEFB $01,$01,$07,$C6,$01,$01,$07,$C6
 $BFCA DEFB $01,$02,$06,$C6,$01,$02,$06,$C6
 $BFD2 DEFB $01,$02,$05,$C6,$01,$03,$04,$FF

; Room block data 53
;
; #CALL:print_block_data(#PC,block_data_53)
b$BFDA DEFB $FB,$0C,$DD,$FE,$50,$F3,$C7,$BF

; Room block data 4F
;
; #CALL:print_block_data(#PC,block_data_4F)
b$BFE2 DEFB $FB,$24,$DC,$FE,$46,$0F,$11,$12
 $BFEA DEFB $15,$C4,$01,$10,$13,$14,$16,$C5
 $BFF2 DEFB $01,$17,$18,$C5,$01,$FE,$44,$02
 $BFFA DEFB $01,$01,$02,$FF

; Room block data 54
;
; #CALL:print_block_data(#PC,block_data_54)
b$BFFE DEFB $FB,$E4,$D9,$FE,$79,$FD,$10,$09
 $C006 DEFB $B8,$02,$FD,$10,$0A,$B8,$FF,$FE
 $C00E DEFB $72,$FB,$DC,$DF,$FD,$04,$20,$FB
 $C016 DEFB $E4,$D9,$10,$11,$11,$12,$13,$11
 $C01E DEFB $11,$FB,$DC,$DF,$FD,$05,$20,$FF

; Room block data 5B
;
; #CALL:print_block_data(#PC,block_data_5B)
b$C026 DEFB $FB,$DC,$DF,$FE,$4E,$FD,$18,$20
 $C02E DEFB $FB,$14,$DE,$B8,$00,$08,$09,$0A
 $C036 DEFB $0B,$0C,$0D,$0E,$0F,$FF

; Room block data 5C
;
; #CALL:print_block_data(#PC,block_data_5C)
b$C03C DEFB $FB,$14,$DE,$FE,$47,$00,$01,$02
 $C044 DEFB $FF

; Room block data 5D
;
; #CALL:print_block_data(#PC,block_data_5D)
b$C045 DEFB $FB,$14,$DE,$FE,$46,$03,$04,$05
 $C04D DEFB $06,$07,$FF

; Room block data 5E
;
; #CALL:print_block_data(#PC,block_data_5E)
b$C050 DEFB $FB,$14,$DE,$FE,$60,$10,$11,$12
 $C058 DEFB $13,$FF

; Room block data 5F
;
; #CALL:print_block_data(#PC,block_data_5F)
b$C05A DEFB $FB,$14,$DE,$FE,$4F,$14,$15,$16
 $C062 DEFB $17,$18,$FB,$DC,$DE,$00,$01,$02
 $C06A DEFB $03,$04,$05,$FB,$DC,$DF,$20,$20
 $C072 DEFB $20,$B8,$00,$20,$20,$C6,$FF,$FD
 $C07A DEFB $10,$20,$B8,$02,$FD,$10,$20,$FF

; Room block data 60
;
; #CALL:print_block_data(#PC,block_data_60)
b$C082 DEFB $FB,$DC,$DF,$FE,$57,$FD,$07,$20
 $C08A DEFB $C1,$01,$20,$CD,$00,$20,$C1,$01
 $C092 DEFB $FD,$07,$20,$C2,$FF,$FB,$DC,$DE
 $C09A DEFB $06,$07,$08,$09,$0A,$FF

; Room block data 61
;
; #CALL:print_block_data(#PC,block_data_61)
b$C0A0 DEFB $FB,$2C,$D7,$C8,$03,$FE,$45,$10
 $C0A8 DEFB $11,$FF

; Room block data 62
;
; #CALL:print_block_data(#PC,block_data_62)
b$C0AA DEFB $FB,$2C,$D7,$FE,$46,$06,$08,$C6
 $C0B2 DEFB $01,$FE,$42,$0E,$0F,$FF

; Room block data 63
;
; #CALL:print_block_data(#PC,block_data_63)
b$C0B8 DEFB $FB,$5C,$D3,$FE,$44,$F2,$08,$07
 $C0C0 DEFB $08,$B8,$01,$F2,$08,$08,$07,$B8
 $C0C8 DEFB $01,$F2,$08,$07,$08,$B8,$01,$F2
 $C0D0 DEFB $08,$08,$07,$FF

; Room block data 64
;
; #CALL:print_block_data(#PC,block_data_64)
b$C0D4 DEFB $FB,$14,$D5,$FE,$46,$F3,$D9,$CA

; Room block data 66
;
; #CALL:print_block_data(#PC,block_data_66)
b$C0DC DEFB $FB,$AC,$DF,$C8,$03,$FE,$42,$01
 $C0E4 DEFB $03,$01,$02,$02,$C4,$FF,$00,$03
 $C0EC DEFB $01,$C6,$FF,$02,$FF

; Room block data 50
;
; #CALL:print_block_data(#PC,block_data_50)
b$C0F1 DEFB $FB,$24,$DC,$FE,$45,$F0,$09,$0A
 $C0F9 DEFB $C8,$FC,$0B,$C7,$02,$0B,$FE,$47
 $C101 DEFB $C2,$FC,$05,$C5,$01,$09,$06,$04
 $C109 DEFB $C5,$01,$08,$07,$F1,$FE,$44,$00
 $C111 DEFB $0D,$0E,$0C,$C1,$01,$03,$03,$03
 $C119 DEFB $00,$F1,$F1,$0C,$C1,$01,$03,$03
 $C121 DEFB $0D,$0E,$F1,$F1,$0C,$C1,$01,$FE
 $C129 DEFB $46,$01,$02,$01,$01,$01,$02,$01
 $C131 DEFB $FF

; Room block data 56
;
; #CALL:print_block_data(#PC,block_data_56)
b$C132 DEFB $FB,$AC,$DB,$FE,$45,$00,$0C,$C6
 $C13A DEFB $01,$0D,$0E,$C5,$05,$08,$09,$04
 $C142 DEFB $05,$C4,$01,$0A,$0B,$02,$03,$C5
 $C14A DEFB $01,$F0,$09,$0D,$C7,$FF,$06,$F1
 $C152 DEFB $F1,$07,$C6,$F8,$F0,$09,$0E,$BF
 $C15A DEFB $F2,$00,$FD,$06,$01,$C0,$01,$00
 $C162 DEFB $FD,$07,$01,$CC,$FF,$01,$01,$01
 $C16A DEFB $0C,$C4,$01,$FD,$04,$01,$0C,$BF
 $C172 DEFB $FE,$FE,$43,$FB,$14,$D5,$12,$13
 $C17A DEFB $C6,$01,$17,$18,$C8,$FF,$FE,$46
 $C182 DEFB $1A,$1A,$C6,$01,$1A,$1A,$C4,$01
 $C18A DEFB $FD,$04,$1A,$C4,$01,$FD,$04,$1A
 $C192 DEFB $BE,$00,$FB,$E4,$D9,$FE,$43,$F0
 $C19A DEFB $07,$14,$FF

; Room block data 4D
;
; #CALL:print_block_data(#PC,block_data_4D)
b$C19D DEFB $FB,$AC,$DB,$FE,$07,$00,$0C,$C6
 $C1A5 DEFB $01,$0D,$0E,$C6,$01,$0D,$0E,$C5
 $C1AD DEFB $03,$06,$0D,$0E,$07,$C4,$01,$04
 $C1B5 DEFB $05,$08,$09,$C4,$01,$02,$03,$0A
 $C1BD DEFB $0B,$C3,$01,$06,$CC,$00,$07,$C2
 $C1C5 DEFB $01,$04,$05,$F1,$F1,$08,$09,$C2
 $C1CD DEFB $01,$02,$03,$F1,$F1,$0A,$0B,$C1
 $C1D5 DEFB $01,$06,$CE,$00,$07,$C0,$01,$04
 $C1DD DEFB $05,$CC,$00,$08,$09,$C0,$01,$02
 $C1E5 DEFB $03,$CC,$00,$0A,$0B,$BF,$01,$06
 $C1ED DEFB $D0,$00,$07,$BE,$01,$04,$05,$CE
 $C1F5 DEFB $00,$08,$09,$BF,$FF,$FE,$46,$FD
 $C1FD DEFB $08,$01,$C1,$FD,$FD,$06,$01,$C3
 $C205 DEFB $FD,$FD,$04,$01,$FF

; Room block data 2E
;
; #CALL:print_block_data(#PC,block_data_2E)
b$C20A DEFB $FB,$2C,$D7,$FE,$47,$F0,$01,$00
 $C212 DEFB $FE,$46,$F0,$01,$01,$FE,$42,$02
 $C21A DEFB $C6,$01,$03,$04,$05,$FF

; Room block data 2F
;
; #CALL:print_block_data(#PC,block_data_2F)
b$C220 DEFB $FB,$2C,$D7,$FE,$44,$0D,$FE,$47
 $C228 DEFB $C6,$01,$0B,$07,$0C,$C5,$01,$FE
 $C230 DEFB $44,$09,$F1,$0A,$C5,$01,$FE,$47
 $C238 DEFB $06,$07,$08,$FF

; Room block data 1F
;
; #CALL:print_block_data(#PC,block_data_1F)
b$C23C DEFB $FB,$14,$D5,$FE,$43,$0D,$F0,$01
 $C244 DEFB $0E,$FE,$07,$F0,$0A,$10,$C7,$F6
 $C24C DEFB $F0,$0A,$0F,$FE,$43,$0B,$0C,$FF

; Room block data 2D
;
; #CALL:print_block_data(#PC,block_data_2D)
b$C254 DEFB $FB,$BC,$D1,$FE,$47,$03,$FE,$43
 $C25C DEFB $04,$FE,$42,$05,$FE,$46,$03,$FE
 $C264 DEFB $43,$04,$FE,$47,$05,$FE,$44,$05
 $C26C DEFB $FE,$46,$03,$C0,$01,$FE,$45,$00
 $C274 DEFB $01,$02,$00,$01,$02,$00,$01,$FF

; Room block data 3B
;
; #CALL:print_block_data(#PC,block_data_3B)
b$C27C DEFB $FB,$2C,$D7,$FE,$45,$09,$0A,$C6
 $C284 DEFB $01,$FB,$14,$D5,$FE,$72,$00,$00
 $C28C DEFB $C6,$01,$00,$00,$FF

; Room block data 49
;
; #CALL:print_block_data(#PC,block_data_49)
b$C291 DEFB $FB,$EC,$DF,$FE,$44,$FD,$20,$07
 $C299 DEFB $FF

; Room block data 4A
;
; #CALL:print_block_data(#PC,block_data_4A)
b$C29A DEFB $FB,$7C,$D2,$FE,$45,$11,$12,$13
 $C2A2 DEFB $C5,$01,$14,$15,$16,$FF

; Room block data 6A
;
; #CALL:print_block_data(#PC,block_data_6A)
b$C2A8 DEFB $FB,$FC,$D5,$FE,$44,$13,$FD,$16
 $C2B0 DEFB $14,$F0,$01,$15,$F0,$05,$17,$B1
 $C2B8 DEFB $FB,$F0,$05,$16,$C9,$FB,$FE,$46
 $C2C0 DEFB $FB,$14,$D5,$F2,$0B,$12,$13,$B2
 $C2C8 DEFB $01,$F2,$0B,$14,$15,$B2,$01,$F2
 $C2D0 DEFB $0B,$14,$15,$B2,$01,$14,$15,$17
 $C2D8 DEFB $18,$F2,$03,$14,$15,$17,$18,$F2
 $C2E0 DEFB $03,$14,$15,$17,$18,$14,$15,$B2
 $C2E8 DEFB $01,$17,$18,$F1,$F1,$F2,$03,$17
 $C2F0 DEFB $18,$F1,$F1,$F2,$03,$17,$18,$F1
 $C2F8 DEFB $F1,$17,$18,$B1,$01,$FE,$45,$FB
 $C300 DEFB $04,$D2,$07,$FD,$1A,$01,$F0,$01
 $C308 DEFB $02,$F0,$02,$03,$AD,$FE,$F0,$02
 $C310 DEFB $04,$FF

; Room block data 6B
;
; #CALL:print_block_data(#PC,block_data_6B)
b$C312 DEFB $FB,$E4,$D9,$C8,$03,$FE,$45,$02
 $C31A DEFB $0B,$03,$02,$0B,$0B,$0B,$03,$02
 $C322 DEFB $0B,$0B,$0B,$03,$02,$0B,$0B,$0B
 $C32A DEFB $03,$02,$0B,$0B,$0B,$03,$02,$0B
 $C332 DEFB $03,$FF

; Room block data 71
;
; #CALL:print_block_data(#PC,block_data_71)
b$C334 DEFB $FB,$BC,$D6,$FE,$45,$F0,$01,$02
 $C33C DEFB $F0,$07,$09,$FE,$44,$FB,$BC,$D1
 $C344 DEFB $01,$02,$FF

; Room block data 72
;
; #CALL:print_block_data(#PC,block_data_72)
b$C347 DEFB $FB,$EC,$DF,$C8,$03,$FE,$45,$FD
 $C34F DEFB $17,$0F,$FF

; Room block data 0
;
; #CALL:print_block_data(#PC,block_data_0)
b$C352 DEFB $FB,$EC,$DF,$C8,$03,$FE,$05,$FD
 $C35A DEFB $20,$00,$FF

; Room block data 20
;
; #CALL:print_block_data(#PC,block_data_20)
b$C35D DEFB $FB,$EC,$DF,$C8,$03,$FE,$43,$F2
 $C365 DEFB $10,$05,$06,$FF

; Room block data 21
;
; #CALL:print_block_data(#PC,block_data_21)
b$C369 DEFB $FB,$04,$D2,$FE,$46,$F0,$01,$00
 $C371 DEFB $04,$F1,$05,$02,$C4,$01,$04,$F1
 $C379 DEFB $06,$03,$FF

; Room block data 1
;
; #CALL:print_block_data(#PC,block_data_1)
b$C37C DEFB $FB,$6C,$E0,$FE,$46,$01,$02,$01
 $C384 DEFB $02,$01,$05,$C3,$01,$04,$F1,$04
 $C38C DEFB $F1,$06,$05,$C1,$01,$FE,$45,$FD
 $C394 DEFB $04,$00,$03,$FE,$46,$04,$07,$05
 $C39C DEFB $C5,$01,$FE,$45,$03,$F1,$FE,$46
 $C3A4 DEFB $06,$05,$C5,$01,$FE,$45,$03,$FE
 $C3AC DEFB $46,$04,$07,$05,$C5,$01,$FE,$45
 $C3B4 DEFB $03,$F1,$FE,$46,$06,$05,$C5,$01
 $C3BC DEFB $FE,$45,$03,$FE,$46,$04,$07,$05
 $C3C4 DEFB $C5,$01,$FE,$45,$03,$F1,$FE,$46
 $C3CC DEFB $06,$C6,$01,$FE,$45,$03,$FE,$46
 $C3D4 DEFB $F0,$01,$04,$FE,$45,$03,$FF

; Room block data 2
;
; #CALL:print_block_data(#PC,block_data_2)
b$C3DB DEFB $FB,$6C,$E0,$FE,$46,$08,$01,$02
 $C3E3 DEFB $01,$02,$01,$C1,$01,$08,$0A,$F1
 $C3EB DEFB $04,$F1,$04,$C1,$01,$08,$0B,$04
 $C3F3 DEFB $FE,$45,$09,$FD,$04,$0C,$FE,$46
 $C3FB DEFB $BF,$01,$08,$0A,$F1,$FE,$45,$09
 $C403 DEFB $FE,$46,$C3,$01,$08,$0B,$04,$FE
 $C40B DEFB $45,$09,$FE,$46,$C3,$01,$08,$0A
 $C413 DEFB $F1,$FE,$45,$09,$FE,$46,$C3,$01
 $C41B DEFB $08,$0B,$04,$FE,$45,$09,$FE,$46
 $C423 DEFB $C4,$01,$0A,$C9,$00,$FE,$45,$09
 $C42B DEFB $C5,$01,$FE,$46,$04,$FE,$45,$09
 $C433 DEFB $C6,$01,$09,$FF

; Room block data 69
;
; #CALL:print_block_data(#PC,block_data_69)
b$C437 DEFB $FB,$44,$DF,$FE,$45,$06,$FE,$47
 $C43F DEFB $FD,$08,$0A,$FE,$45,$07,$06,$07
 $C447 DEFB $06,$07,$BC,$01,$06,$FD,$06,$05
 $C44F DEFB $08,$04,$BF,$01,$09,$FE,$43,$FD
 $C457 DEFB $06,$0A,$FE,$45,$07,$04,$BF,$01
 $C45F DEFB $06,$FD,$06,$05,$08,$04,$BF,$01
 $C467 DEFB $09,$FE,$46,$FD,$06,$0A,$FE,$45
 $C46F DEFB $07,$04,$BF,$01,$06,$FD,$06,$05
 $C477 DEFB $08,$04,$BF,$01,$09,$FE,$42,$FD
 $C47F DEFB $06,$0A,$FE,$45,$07,$04,$BF,$01
 $C487 DEFB $06,$FD,$06,$05,$08,$04,$BF,$01
 $C48F DEFB $09,$FE,$44,$FD,$06,$0A,$FE,$45
 $C497 DEFB $05,$08,$09,$08,$C7,$F9,$F0,$07
 $C49F DEFB $04,$C9,$FE,$09,$05,$07,$C3,$FB
 $C4A7 DEFB $FE,$47,$F0,$07,$0C,$CA,$F9,$F0
 $C4AF DEFB $05,$0C,$BB,$FB,$FE,$45,$F0,$01
 $C4B7 DEFB $04,$FE,$47,$F0,$02,$0B,$FE,$45
 $C4BF DEFB $04,$C6,$01,$FE,$46,$02,$03,$FE
 $C4C7 DEFB $44,$C6,$01,$00,$01,$FF

; Room block data 68
;
; #CALL:print_block_data(#PC,block_data_68)
b$C4CD DEFB $FB,$BC,$D1,$FE,$43,$00,$01,$02
 $C4D5 DEFB $02,$00,$01,$02,$02,$00,$01,$02
 $C4DD DEFB $02,$00,$01,$02,$02,$00,$01,$02
 $C4E5 DEFB $02,$00,$01,$B3,$FE,$FE,$45,$F0
 $C4ED DEFB $01,$06,$07,$C8,$FF,$FE,$46,$F0
 $C4F5 DEFB $01,$06,$07,$F1,$FE,$46,$08,$C8
 $C4FD DEFB $FE,$08,$FE,$44,$08,$C6,$01,$FE
 $C505 DEFB $42,$08,$FE,$47,$08,$FE,$46,$08
 $C50D DEFB $C5,$01,$FE,$44,$08,$FE,$46,$08
 $C515 DEFB $FE,$45,$08,$FE,$46,$08,$C9,$FF
 $C51D DEFB $FE,$47,$F0,$01,$06,$07,$C8,$FF
 $C525 DEFB $FE,$44,$F0,$01,$06,$07,$C8,$FF
 $C52D DEFB $FE,$46,$F0,$01,$06,$07,$C8,$FF
 $C535 DEFB $FE,$45,$F0,$01,$06,$07,$C8,$FF
 $C53D DEFB $FE,$44,$F0,$01,$06,$07,$C8,$FF
 $C545 DEFB $FE,$42,$F0,$01,$06,$07,$CA,$FE
 $C54D DEFB $FE,$46,$08,$FE,$45,$08,$C5,$01
 $C555 DEFB $FE,$44,$08,$FE,$46,$08,$FE,$47
 $C55D DEFB $08,$C5,$01,$08,$FE,$45,$08,$FE
 $C565 DEFB $46,$08,$FE,$44,$08,$FF

; Room block data 3
;
; #CALL:print_block_data(#PC,block_data_3)
b$C56B DEFB $FB,$EC,$DF,$C8,$03,$FE,$45,$01
 $C573 DEFB $02,$03,$04,$FF

; Room block data 6C
;
; #CALL:print_block_data(#PC,block_data_6C)
b$C577 DEFB $FB,$9C,$D4,$FE,$44,$F0,$0C,$04
 $C57F DEFB $FF

; Room block data 4
;
; #CALL:print_block_data(#PC,block_data_4)
b$C580 DEFB $FB,$24,$D4,$FE,$47,$06,$07,$C6
 $C588 DEFB $01,$08,$09,$C6,$01,$0A,$0B,$C6
 $C590 DEFB $01,$0C,$0D,$C6,$01,$FE,$46,$00
 $C598 DEFB $02,$C4,$01,$00,$FD,$04,$01,$02
 $C5A0 DEFB $C3,$01,$FD,$04,$0E,$C1,$01,$00
 $C5A8 DEFB $FD,$08,$01,$02,$BF,$01,$FD,$08
 $C5B0 DEFB $0E,$BD,$01,$00,$FD,$0C,$01,$02
 $C5B8 DEFB $BB,$01,$03,$FD,$0A,$05,$04,$FF

; Room block data 5
;
; #CALL:print_block_data(#PC,block_data_5)
b$C5C0 DEFB $FB,$E4,$D3,$FE,$45,$00,$FD,$06
 $C5C8 DEFB $01,$02,$C0,$01,$03,$FD,$06,$04
 $C5D0 DEFB $05,$C0,$01,$FE,$43,$06,$CE,$00
 $C5D8 DEFB $07,$FF

; Room block data 43
;
; #CALL:print_block_data(#PC,block_data_43)
b$C5DA DEFB $FB,$04,$D2,$FE,$43,$0C,$FD,$06
 $C5E2 DEFB $09,$0D,$C0,$01,$FE,$42,$0A,$FD
 $C5EA DEFB $06,$08,$0B,$C0,$01,$FB,$E4,$D3
 $C5F2 DEFB $FE,$44,$06,$CE,$00,$07,$FF

; Room block data 44
;
; #CALL:print_block_data(#PC,block_data_44)
b$C5F9 DEFB $FB,$04,$D2,$FE,$43,$0C,$0D,$C6
 $C601 DEFB $01,$FE,$42,$0A,$0B,$C6,$01,$FE
 $C609 DEFB $44,$FB,$E4,$D3,$06,$07,$FF

; Room block data 45
;
; #CALL:print_block_data(#PC,block_data_45)
b$C610 DEFB $FB,$7C,$D2,$FE,$45,$F2,$10,$0F
 $C618 DEFB $10,$FF

; Room block data 46
;
; #CALL:print_block_data(#PC,block_data_46)
b$C61A DEFB $FB,$7C,$D2,$FE,$47,$00,$FD,$08
 $C622 DEFB $01,$02,$FF

; Room block data 47
;
; #CALL:print_block_data(#PC,block_data_47)
b$C625 DEFB $FB,$7C,$D2,$FE,$45,$F0,$04,$06
 $C62D DEFB $C7,$00,$FE,$43,$03,$04,$05,$FF

; Room block data 48
;
; #CALL:print_block_data(#PC,block_data_48)
b$C635 DEFB $FB,$7C,$D2,$FE,$47,$0C,$FD,$06
 $C63D DEFB $0D,$0E,$FE,$46,$C0,$01,$F0,$02
 $C645 DEFB $0A,$07,$FD,$06,$08,$C8,$FE,$F0
 $C64D DEFB $02,$0B,$09,$FF

; Room block data 6
;
; #CALL:print_block_data(#PC,block_data_6)
b$C651 DEFB $FB,$5C,$D3,$FE,$44,$03,$00,$01
 $C659 DEFB $00,$04,$C1,$01,$03,$02,$01,$02
 $C661 DEFB $01,$01,$02,$04,$BF,$01,$03,$00
 $C669 DEFB $02,$00,$00,$02,$01,$02,$02,$BF
 $C671 DEFB $01,$00,$02,$02,$02,$01,$00,$02
 $C679 DEFB $01,$02,$00,$BE,$01,$00,$01,$00
 $C681 DEFB $02,$01,$02,$00,$01,$02,$05,$BD
 $C689 DEFB $01,$03,$00,$00,$02,$01,$00,$00
 $C691 DEFB $02,$01,$01,$04,$BD,$01,$06,$01
 $C699 DEFB $02,$01,$02,$00,$02,$01,$00,$00
 $C6A1 DEFB $00,$BE,$01,$00,$02,$01,$00,$00
 $C6A9 DEFB $01,$02,$02,$01,$05,$BF,$01,$06
 $C6B1 DEFB $02,$01,$00,$00,$02,$00,$00,$C1
 $C6B9 DEFB $01,$06,$05,$01,$05,$06,$05,$C3
 $C6C1 DEFB $01,$FE,$42,$09,$0A,$0B,$0C,$C5
 $C6C9 DEFB $01,$07,$08,$C6,$01,$07,$08,$C6
 $C6D1 DEFB $01,$08,$07,$C6,$01,$08,$07,$C6
 $C6D9 DEFB $01,$07,$08,$C5,$01,$0D,$0E,$0F
 $C6E1 DEFB $10,$FF

; Room block data 7
;
; #CALL:print_block_data(#PC,block_data_7)
b$C6E3 DEFB $FB,$5C,$D3,$FE,$04,$00,$02,$01
 $C6EB DEFB $01,$00,$C3,$01,$02,$01,$02,$02
 $C6F3 DEFB $02,$C3,$01,$00,$02,$01,$02,$00
 $C6FB DEFB $C3,$01,$00,$01,$01,$02,$00,$FF

; Room block data 8
;
; #CALL:print_block_data(#PC,block_data_8)
b$C703 DEFB $FB,$5C,$D3,$FE,$04,$01,$00,$02
 $C70B DEFB $01,$C4,$01,$02,$01,$00,$02,$C4
 $C713 DEFB $01,$01,$00,$01,$01,$C4,$01,$00
 $C71B DEFB $02,$02,$01,$FF

; Room block data 9
;
; #CALL:print_block_data(#PC,block_data_9)
b$C71F DEFB $FB,$34,$D3,$FE,$43,$FD,$05,$00
 $C727 DEFB $C3,$01,$FD,$05,$02,$C3,$01,$FD
 $C72F DEFB $05,$01,$FF

; Room block data A
;
; #CALL:print_block_data(#PC,block_data_A)
b$C732 DEFB $FB,$34,$D3,$FE,$43,$FD,$04,$00
 $C73A DEFB $C4,$01,$FD,$04,$02,$C4,$01,$FD
 $C742 DEFB $04,$01,$FF

; Room block data B
;
; #CALL:print_block_data(#PC,block_data_B)
b$C745 DEFB $FB,$34,$D3,$FE,$45,$FD,$05,$04
 $C74D DEFB $C3,$01,$FD,$05,$03,$C3,$01,$FD
 $C755 DEFB $05,$03,$C3,$01,$FD,$05,$03,$C3
 $C75D DEFB $01,$FD,$05,$03,$FF

; Room block data 23
;
; #CALL:print_block_data(#PC,block_data_23)
b$C762 DEFB $FB,$34,$D3,$FE,$45,$FD,$04,$04
 $C76A DEFB $C4,$01,$FD,$04,$03,$C4,$01,$FD
 $C772 DEFB $04,$03,$C4,$01,$FD,$04,$03,$C4
 $C77A DEFB $01,$FD,$04,$03,$FF

; Room block data C
;
; #CALL:print_block_data(#PC,block_data_C)
b$C77F DEFB $FB,$14,$D5,$FE,$72,$FD,$10,$00
 $C787 DEFB $B8,$01,$FD,$10,$00,$B8,$01,$FD
 $C78F DEFB $10,$00,$B8,$01,$FD,$10,$00,$FF

; Room block data 2C
;
; #CALL:print_block_data(#PC,block_data_2C)
b$C797 DEFB $FB,$DC,$D5,$FE,$46,$F3,$84,$C7

; Room block data 29
;
; #CALL:print_block_data(#PC,block_data_29)
b$C79F DEFB $FB,$14,$D5,$FE,$72,$FD,$08,$00
 $C7A7 DEFB $C0,$01,$FD,$08,$00,$C0,$01,$FD
 $C7AF DEFB $08,$00,$C0,$01,$FD,$08,$00,$FF

; Room block data 1C
;
; #CALL:print_block_data(#PC,block_data_1C)
b$C7B7 DEFB $FB,$14,$D5,$FE,$56,$F3,$84,$C7

; Room block data D
;
; #CALL:print_block_data(#PC,block_data_D)
b$C7BF DEFB $FB,$14,$D5,$FE,$02,$FD,$10,$03
 $C7C7 DEFB $B8,$01,$F2,$08,$01,$02,$B8,$01
 $C7CF DEFB $F2,$08,$01,$02,$B8,$01,$F2,$08
 $C7D7 DEFB $01,$02,$B8,$01,$F2,$08,$01,$02
 $C7DF DEFB $FF

; Room block data 2A
;
; #CALL:print_block_data(#PC,block_data_2A)
b$C7E0 DEFB $FB,$14,$D5,$FE,$02,$FD,$08,$03
 $C7E8 DEFB $C0,$01,$F2,$04,$01,$02,$C0,$01
 $C7F0 DEFB $F2,$04,$01,$02,$C0,$01,$F2,$04
 $C7F8 DEFB $01,$02,$C0,$01,$F2,$04,$01,$02
 $C800 DEFB $FF

; Room block data 25
;
; #CALL:print_block_data(#PC,block_data_25)
b$C801 DEFB $FB,$FC,$D5,$FE,$47,$00,$FD,$04
 $C809 DEFB $01,$C3,$01,$F0,$04,$07,$10,$FD
 $C811 DEFB $04,$11,$C4,$FC,$FB,$DC,$DF,$FD
 $C819 DEFB $04,$20,$C4,$01,$FD,$04,$20,$C4
 $C821 DEFB $01,$FD,$04,$20,$C4,$01,$FD,$04
 $C829 DEFB $20,$FF

; Room block data 26
;
; #CALL:print_block_data(#PC,block_data_26)
b$C82B DEFB $FB,$FC,$D5,$FE,$47,$FD,$04,$01
 $C833 DEFB $F0,$01,$02,$F0,$04,$08,$C4,$00
 $C83B DEFB $FD,$04,$11,$12,$C3,$FC,$F3,$15
 $C843 DEFB $C8

; Room block data E
;
; #CALL:print_block_data(#PC,block_data_E)
b$C844 DEFB $FB,$FC,$D5,$FE,$47,$00,$01,$02
 $C84C DEFB $C5,$01,$07,$06,$08,$C5,$01,$03
 $C854 DEFB $04,$05,$FF

; Room block data 3A
;
; #CALL:print_block_data(#PC,block_data_3A)
b$C857 DEFB $FB,$DC,$DF,$FE,$46,$F0,$12,$20
 $C85F DEFB $FF

; Room block data 13
;
; #CALL:print_block_data(#PC,block_data_13)
b$C860 DEFB $FB,$FC,$D5,$FE,$47,$00,$01,$01
 $C868 DEFB $02,$C4,$01,$07,$06,$06,$08,$C4
 $C870 DEFB $01,$03,$04,$04,$05,$FF

; Room block data 19
;
; #CALL:print_block_data(#PC,block_data_19)
b$C876 DEFB $FB,$34,$D3,$FE,$45,$03,$03,$03
 $C87E DEFB $C5,$01,$03,$03,$03,$C5,$01,$03
 $C886 DEFB $03,$03,$FF

; Room block data 27
;
; #CALL:print_block_data(#PC,block_data_27)
b$C889 DEFB $FB,$FC,$D5,$FE,$47,$00,$01,$01
 $C891 DEFB $02,$C4,$01,$07,$06,$06,$08,$C4
 $C899 DEFB $01,$10,$11,$11,$12,$FF

; Room block data 28
;
; #CALL:print_block_data(#PC,block_data_28)
b$C89F DEFB $FB,$14,$D5,$FE,$47,$12,$13,$C6
 $C8A7 DEFB $01,$16,$15,$C6,$01,$14,$15,$C6
 $C8AF DEFB $01,$17,$18,$FF

; Room block data 1D
;
; #CALL:print_block_data(#PC,block_data_1D)
b$C8B3 DEFB $FB,$FC,$D5,$FE,$47,$0B,$0D,$C6
 $C8BB DEFB $01,$0E,$0F,$C6,$01,$0E,$0F,$FF

; Room block data 1E
;
; #CALL:print_block_data(#PC,block_data_1E)
b$C8C3 DEFB $FB,$FC,$D5,$FE,$47,$0B,$0C,$0C
 $C8CB DEFB $0D,$C4,$01,$F0,$04,$0E,$CB,$FC
 $C8D3 DEFB $F0,$04,$0F,$C6,$FC,$FB,$DC,$DF
 $C8DB DEFB $F0,$04,$20,$C9,$FC,$F0,$04,$20
 $C8E3 DEFB $FF

; Room block data 1A
;
; #CALL:print_block_data(#PC,block_data_1A)
b$C8E4 DEFB $FB,$34,$D3,$FE,$45,$FD,$04,$03
 $C8EC DEFB $C4,$01,$FD,$04,$03,$C4,$01,$03
 $C8F4 DEFB $FB,$FC,$D5,$0A,$FB,$34,$D3,$03
 $C8FC DEFB $03,$C4,$01,$FD,$04,$03,$C4,$01
 $C904 DEFB $FD,$04,$03,$FF

; Room block data 14
;
; #CALL:print_block_data(#PC,block_data_14)
b$C908 DEFB $FB,$FC,$D5,$FE,$47,$09,$F0,$04
 $C910 DEFB $09,$C7,$FD,$F0,$01,$0A,$F0,$02
 $C918 DEFB $09,$FF

; Room block data 22
;
; #CALL:print_block_data(#PC,block_data_22)
b$C91A DEFB $FB,$FC,$D5,$FE,$47,$00,$01,$01
 $C922 DEFB $02,$C4,$01,$F0,$04,$07,$CB,$FC
 $C92A DEFB $F0,$04,$08,$FF

; Room block data 3C
;
; #CALL:print_block_data(#PC,block_data_3C)
b$C92E DEFB $FB,$FC,$D5,$FE,$47,$13,$FD,$12
 $C936 DEFB $14,$F0,$01,$15,$F0,$05,$17,$B5
 $C93E DEFB $FB,$F0,$05,$16,$FF

; Room block data 24
;
; #CALL:print_block_data(#PC,block_data_24)
b$C943 DEFB $FB,$FC,$D5,$FE,$47,$13,$14,$14
 $C94B DEFB $15,$C4,$01,$F0,$04,$16,$CB,$FC
 $C953 DEFB $F0,$04,$17,$FF

; Room block data 6F
;
; #CALL:print_block_data(#PC,block_data_6F)
b$C957 DEFB $FB,$EC,$DF,$FE,$44,$FD,$1E,$09
 $C95F DEFB $FF

; Room block data 6D
;
; #CALL:print_block_data(#PC,block_data_6D)
b$C960 DEFB $FB,$14,$D5,$FE,$46,$F2,$02,$09
 $C968 DEFB $0A,$C3,$01,$F2,$02,$09,$0A,$C5
 $C970 DEFB $01,$09,$0A,$C5,$00,$FE,$44,$FB
 $C978 DEFB $EC,$DF,$08,$C8,$01,$08,$08,$C8
 $C980 DEFB $FF,$08,$C8,$FF,$08,$FF

; Room block data 15
;
; #CALL:print_block_data(#PC,block_data_15)
b$C986 DEFB $FB,$14,$D5,$FE,$46,$F2,$04,$09
 $C98E DEFB $0A,$C0,$01,$F2,$04,$0A,$09,$C0
 $C996 DEFB $01,$F2,$04,$09,$0A,$C0,$01,$F2
 $C99E DEFB $04,$0A,$09,$FF

; Room block data 16
;
; #CALL:print_block_data(#PC,block_data_16)
b$C9A2 DEFB $FB,$14,$D5,$FE,$46,$F2,$08,$09
 $C9AA DEFB $0A,$B8,$01,$F2,$08,$0A,$09,$B8
 $C9B2 DEFB $01,$F2,$08,$09,$0A,$B8,$01,$F2
 $C9BA DEFB $08,$0A,$09,$FF

; Room block data F
;
; #CALL:print_block_data(#PC,block_data_F)
b$C9BE DEFB $FB,$14,$D5,$FE,$43,$04,$05,$05
 $C9C6 DEFB $05,$04,$05,$05,$05,$04,$05,$05
 $C9CE DEFB $05,$04,$05,$05,$05,$FF

; Room block data 1B
;
; #CALL:print_block_data(#PC,block_data_1B)
b$C9D4 DEFB $FB,$14,$D5,$FE,$44,$FD,$10,$11
 $C9DC DEFB $FF

; Room block data 10
;
; #CALL:print_block_data(#PC,block_data_10)
b$C9DD DEFB $FB,$14,$D5,$FE,$43,$F0,$01,$06
 $C9E5 DEFB $F0,$02,$07,$F0,$01,$08,$F0,$02
 $C9ED DEFB $07,$F0,$01,$08,$F0,$02,$07,$F0
 $C9F5 DEFB $01,$08,$F0,$02,$07,$08,$FF

; Room block data 11
;
; #CALL:print_block_data(#PC,block_data_11)
b$C9FC DEFB $FB,$9C,$D4,$FE,$45,$0B,$FE,$46
 $CA04 DEFB $C6,$01,$08,$09,$0A,$C5,$01,$05
 $CA0C DEFB $06,$07,$FE,$45,$C6,$01,$04,$C6
 $CA14 DEFB $01,$01,$00,$02,$C6,$01,$F0,$08
 $CA1C DEFB $04,$03,$FF

; Room block data 4E
;
; #CALL:print_block_data(#PC,block_data_4E)
b$CA1F DEFB $FB,$BC,$D6,$FE,$46,$0A,$0B,$F1
 $CA27 DEFB $0A,$0B,$C3,$01,$0C,$0D,$F1,$0C
 $CA2F DEFB $0D,$C3,$02,$0A,$0B,$F1,$0A,$0B
 $CA37 DEFB $C3,$01,$0C,$0D,$F1,$0C,$0D,$C2
 $CA3F DEFB $FE,$FE,$43,$00,$FD,$05,$01,$02
 $CA47 DEFB $C1,$01,$F0,$02,$08,$00,$FD,$05
 $CA4F DEFB $01,$02,$C7,$FE,$F0,$02,$09,$FF

; Room block data 12
;
; #CALL:print_block_data(#PC,block_data_12)
b$CA57 DEFB $FB,$BC,$D6,$FE,$43,$00,$FD,$08
 $CA5F DEFB $01,$F0,$01,$02,$F0,$07,$09,$BF
 $CA67 DEFB $F9,$F0,$07,$08,$FE,$46,$C9,$F8
 $CA6F DEFB $F0,$01,$03,$F0,$05,$04,$CA,$FA
 $CA77 DEFB $F0,$01,$03,$F0,$05,$04,$CB,$FA
 $CA7F DEFB $F0,$01,$03,$F0,$05,$04,$CA,$FA
 $CA87 DEFB $F0,$01,$03,$F0,$05,$04,$C1,$00
 $CA8F DEFB $FE,$47,$05,$06,$07,$F1,$F1,$05
 $CA97 DEFB $06,$07,$FF

; Room block data 17
;
; #CALL:print_block_data(#PC,block_data_17)
b$CA9A DEFB $FB,$9C,$D4,$FE,$46,$F0,$01,$0B
 $CAA2 DEFB $F0,$07,$04,$03,$C6,$FA,$FE,$44
 $CAAA DEFB $0C,$0D,$0E,$FF

; Room block data 18
;
; #CALL:print_block_data(#PC,block_data_18)
b$CAAE DEFB $FB,$14,$D5,$FE,$42,$F2,$08,$1B
 $CAB6 DEFB $1C,$B8,$01,$F2,$08,$1B,$1C,$B8
 $CABE DEFB $01,$F2,$08,$1B,$1C,$B8,$01,$F2
 $CAC6 DEFB $08,$1B,$1C,$FF

; Room block data 4B
;
; #CALL:print_block_data(#PC,block_data_4B)
b$CACA DEFB $FB,$9C,$DA,$FE,$43,$FD,$10,$10
 $CAD2 DEFB $B8,$01,$FB,$14,$D5,$FE,$45,$FD
 $CADA DEFB $10,$1A,$B8,$01,$FD,$10,$1A,$B8
 $CAE2 DEFB $01,$FD,$10,$1A,$B8,$01,$FD,$10
 $CAEA DEFB $1A,$FF

; Room block data 65
;
; #CALL:print_block_data(#PC,block_data_65)
b$CAEC DEFB $FB,$BC,$D6,$FE,$43,$00,$FE,$46
 $CAF4 DEFB $FD,$0D,$01,$FE,$43,$F0,$01,$02
 $CAFC DEFB $F0,$0A,$09,$BA,$F6,$F0,$0A,$08
 $CB04 DEFB $FF

; Room block data 2B
;
; #CALL:print_block_data(#PC,block_data_2B)
b$CB05 DEFB $FB,$04,$D2,$FE,$46,$07,$FD,$06
 $CB0D DEFB $01,$F0,$01,$02,$F0,$02,$03,$C1
 $CB15 DEFB $FE,$F0,$02,$04,$FF

; Room block data 3F
;
; #CALL:print_block_data(#PC,block_data_3F)
b$CB1A DEFB $FB,$04,$D2,$FE,$43,$07,$FD,$06
 $CB22 DEFB $01,$F0,$01,$02,$F0,$02,$0E,$C1
 $CB2A DEFB $FE,$F0,$02,$0E,$FF

; Room block data 30
;
; #CALL:print_block_data(#PC,block_data_30)
b$CB2F DEFB $FB,$BC,$D7,$FE,$42,$08,$09,$0A
 $CB37 DEFB $C5,$01,$00,$04,$01,$C5,$01,$07
 $CB3F DEFB $FE,$45,$0B,$FE,$42,$05,$C5,$01
 $CB47 DEFB $02,$06,$03,$C5,$01,$00,$04,$01
 $CB4F DEFB $C5,$01,$02,$06,$03,$FF

; Room block data 31
;
; #CALL:print_block_data(#PC,block_data_31)
b$CB55 DEFB $FB,$BC,$D7,$FE,$42,$12,$13,$C6
 $CB5D DEFB $01,$10,$11,$C6,$01,$0E,$0F,$C6
 $CB65 DEFB $01,$FE,$45,$0C,$0D,$FF

; Room block data 32
;
; #CALL:print_block_data(#PC,block_data_32)
b$CB6B DEFB $FB,$74,$D8,$FE,$42,$06,$FE,$56
 $CB73 DEFB $00,$01,$02,$FE,$42,$08,$C3,$01
 $CB7B DEFB $07,$FE,$56,$03,$04,$05,$FE,$42
 $CB83 DEFB $09,$FF

; Room block data 73
;
; #CALL:print_block_data(#PC,block_data_73)
b$CB85 DEFB $FB,$E4,$D9,$FE,$42,$0B,$0B,$0B
 $CB8D DEFB $C5,$01,$0B,$F1,$0B,$C5,$01,$0B
 $CB95 DEFB $0B,$0B,$C6,$FF,$FE,$56,$FB,$74
 $CB9D DEFB $D8,$0A,$FF

; Room block data 33
;
; #CALL:print_block_data(#PC,block_data_33)
b$CBA0 DEFB $FB,$9C,$D4,$FE,$47,$F0,$01,$0B
 $CBA8 DEFB $F0,$0C,$04,$F0,$01,$03,$C6,$F3
 $CBB0 DEFB $FB,$FC,$D5,$FE,$46,$00,$01,$01
 $CBB8 DEFB $01,$02,$C3,$04,$03,$04,$04,$04
 $CBC0 DEFB $05,$C3,$FD,$F0,$03,$07,$CC,$FD
 $CBC8 DEFB $F0,$03,$08,$FB,$74,$D8,$FE,$7A
 $CBD0 DEFB $C5,$FD,$0C,$0D,$0E,$C5,$01,$0F
 $CBD8 DEFB $10,$11,$C5,$01,$12,$13,$14,$FF

; Room block data 34
;
; #CALL:print_block_data(#PC,block_data_34)
b$CBE0 DEFB $FB,$BC,$D7,$FE,$43,$14,$15,$C6
 $CBE8 DEFB $01,$10,$11,$C6,$01,$0E,$0F,$FF

; Room block data 35
;
; #CALL:print_block_data(#PC,block_data_35)
b$CBF0 DEFB $FB,$1C,$D9,$FE,$45,$00,$01,$02
 $CBF8 DEFB $C5,$01,$03,$04,$05,$C5,$01,$06
 $CC00 DEFB $07,$08,$FF

; Room block data 36
;
; #CALL:print_block_data(#PC,block_data_36)
b$CC03 DEFB $FB,$DC,$DF,$FE,$4F,$FD,$0F,$20
 $CC0B DEFB $B9,$02,$FD,$0F,$20,$B9,$FF,$FD
 $CC13 DEFB $0F,$20,$BC,$00,$FB,$1C,$D9,$0F
 $CC1B DEFB $10,$11,$12,$17,$18,$13,$14,$15
 $CC23 DEFB $16,$FF

; Room block data 37
;
; #CALL:print_block_data(#PC,block_data_37)
b$CC25 DEFB $FB,$DC,$DF,$FE,$57,$FD,$10,$20
 $CC2D DEFB $BE,$00,$FB,$1C,$D9,$09,$0A,$0B
 $CC35 DEFB $0C,$0D,$0E,$FF

; Room block data 3D
;
; #CALL:print_block_data(#PC,block_data_3D)
b$CC39 DEFB $FB,$9C,$DA,$FE,$45,$F0,$05,$15
 $CC41 DEFB $C9,$FB,$F0,$05,$16,$C9,$FB,$F0
 $CC49 DEFB $05,$17,$C9,$FB,$F0,$05,$15,$C9
 $CC51 DEFB $FB,$F0,$05,$16,$C9,$FB,$F0,$05
 $CC59 DEFB $17,$C9,$FB,$FF

; Room block data 42
;
; #CALL:print_block_data(#PC,block_data_42)
b$CC5D DEFB $FB,$E4,$D9,$FE,$45,$0D,$0E,$0F
 $CC65 DEFB $C5,$01,$FE,$44,$F0,$01,$07,$FE
 $CC6D DEFB $47,$04,$0A,$05,$C5,$01,$02,$F1
 $CC75 DEFB $03,$C5,$01,$00,$09,$01,$C8,$FE
 $CC7D DEFB $FE,$45,$F0,$01,$06,$F0,$01,$07
 $CC85 DEFB $08,$C5,$FF,$FB,$DC,$DF,$50,$FF

; Room block data 41
;
; #CALL:print_block_data(#PC,block_data_41)
b$CC8D DEFB $FB,$9C,$DA,$FE,$44,$F0,$01,$18
 $CC95 DEFB $14,$FF

; Room block data 3E
;
; #CALL:print_block_data(#PC,block_data_3E)
b$CC97 DEFB $FB,$64,$DB,$FE,$46,$00,$01,$02
 $CC9F DEFB $C5,$01,$03,$04,$05,$C5,$01,$06
 $CCA7 DEFB $07,$08,$FF

; Room block data 40
;
; #CALL:print_block_data(#PC,block_data_40)
b$CCAA DEFB $FB,$DC,$DF,$FE,$46,$20,$20,$FF

; Room block data 4C
;
; #CALL:print_block_data(#PC,block_data_4C)
b$CCB2 DEFB $FB,$9C,$DA,$FE,$47,$0A,$0B,$0B
 $CCBA DEFB $0C,$C4,$01,$0D,$F1,$F1,$0E,$C4
 $CCC2 DEFB $01,$0D,$F1,$F1,$0E,$C4,$01,$0A
 $CCCA DEFB $0B,$0B,$0C,$C4,$01,$0D,$F1,$F1
 $CCD2 DEFB $0E,$C4,$01,$0F,$F1,$F1,$11,$FF

; Room block data 38
;
; #CALL:print_block_data(#PC,block_data_38)
b$CCDA DEFB $FB,$9C,$DA,$FE,$44,$00,$01,$02
 $CCE2 DEFB $C5,$01,$03,$04,$05,$C5,$01,$03
 $CCEA DEFB $06,$05,$C5,$01,$07,$08,$09,$FF

; Room block data 39
;
; #CALL:print_block_data(#PC,block_data_39)
b$CCF2 DEFB $FB,$9C,$DA,$FE,$44,$12,$0A,$0B
 $CCFA DEFB $0C,$C4,$01,$13,$0D,$F1,$0E,$C5
 $CD02 DEFB $01,$0D,$F1,$0E,$C5,$01,$0F,$10
 $CD0A DEFB $11,$FB,$DC,$DF,$C6,$FE,$F0,$02
 $CD12 DEFB $20,$FF

; Room block data 67
;
; #CALL:print_block_data(#PC,block_data_67)
b$CD14 DEFB $FB,$DC,$DF,$FE,$72,$FD,$05,$20
 $CD1C DEFB $C3,$01,$FD,$05,$20,$C3,$01,$FD
 $CD24 DEFB $05,$20,$C4,$FF,$FB,$DC,$DE,$0B
 $CD2C DEFB $0C,$0C,$FF

; Room block data 74
;
; #CALL:print_block_data(#PC,block_data_74)
b$CD2F DEFB $FB,$CC,$DF,$FE,$46,$FD,$06,$01
 $CD37 DEFB $C1,$01,$03,$C8,$01,$FD,$06,$00
 $CD3F DEFB $C8,$FF,$02,$FF

; Room block data 75
;
; #CALL:print_block_data(#PC,block_data_75)
b$CD43 DEFB $FB,$E4,$D9,$FE,$43,$04,$FD,$1E
 $CD4B DEFB $0A,$05,$A8,$01,$02,$FD,$1E,$0B
 $CD53 DEFB $03,$A8,$01,$00,$FD,$1E,$09,$01
 $CD5B DEFB $A8,$01,$FE,$06,$F2,$10,$16,$15
 $CD63 DEFB $A8,$01,$F2,$10,$15,$16,$A8,$01
 $CD6B DEFB $F2,$10,$16,$15,$A8,$01,$F2,$10
 $CD73 DEFB $15,$16,$A8,$01,$FE,$42,$FB,$6C
 $CD7B DEFB $E0,$FD,$20,$0C,$C3,$00,$FE,$46
 $CD83 DEFB $F0,$01,$02,$F0,$04,$04,$BC,$FB
 $CD8B DEFB $F0,$01,$02,$F0,$04,$04,$BC,$FB
 $CD93 DEFB $F0,$01,$02,$F0,$04,$04,$FE,$5F
 $CD9B DEFB $CA,$F5,$FB,$DC,$DF,$4D,$49,$4B
 $CDA3 DEFB $52,$4F,$2D,$47,$45,$4E,$CC,$00
 $CDAB DEFB $4D,$49,$4B,$52,$4F,$2D,$47,$45
 $CDB3 DEFB $4E,$FF

; Table for room data
w$CDB5 DEFW $CDF7
 $CDB7 DEFW $CE01
 $CDB9 DEFW $CE25
 $CDBB DEFW $CE37
 $CDBD DEFW $CE69
 $CDBF DEFW $CE7B
 $CDC1 DEFW $CE89
 $CDC3 DEFW $CEAD
 $CDC5 DEFW $CEC9
 $CDC7 DEFW $CEE1
 $CDC9 DEFW $CEF9
 $CDCB DEFW $CF09
 $CDCD DEFW $CF29
 $CDCF DEFW $CF49
 $CDD1 DEFW $CF71
 $CDD3 DEFW $CF97
 $CDD5 DEFW $CFB5
 $CDD7 DEFW $CFD9
 $CDD9 DEFW $CFEF
 $CDDB DEFW $D009
 $CDDD DEFW $D039
 $CDDF DEFW $D057
 $CDE1 DEFW $D08B
 $CDE3 DEFW $D0AF
 $CDE5 DEFW $D0C3
 $CDE7 DEFW $D0E7
 $CDE9 DEFW $D109
 $CDEB DEFW $D125
 $CDED DEFW $D135
 $CDEF DEFW $D153
 $CDF1 DEFW $D16D
 $CDF3 DEFW $D17D
 $CDF5 DEFW $D191

; Room data : The Town Square
;
; #CALL:print_room_data(#PC,room_00)
; #CALL:print_room_stats(#PC)
b$CDF7 DEFB $80,$07,$86,$B0,$84,$4B,$85,$AF
 $CDFF DEFB $7F,$00

; Room data : Stamp Street
;
; #CALL:print_room_data(#PC,room_01)
; #CALL:print_room_stats(#PC)
b$CE01 DEFB $80,$07,$08,$E7,$30,$DE,$8A,$87
 $CE09 DEFB $8A,$9F,$0C,$03,$0D,$01,$8F,$03
 $CE11 DEFB $0C,$05,$0C,$07,$14,$37,$A4,$2E
 $CE19 DEFB $B2,$84,$27,$5E,$34,$0F,$BB,$28
 $CE21 DEFB $BB,$48,$7F,$00

; Room data : The Post Office
;
; #CALL:print_room_data(#PC,room_02)
; #CALL:print_room_stats(#PC)
b$CE25 DEFB $A0,$07,$49,$00,$EA,$04,$EB,$0E
 $CE2D DEFB $6B,$0F,$C7,$20,$C7,$D8,$C6,$60
 $CE35 DEFB $7F,$00

; Room data : Market Street
;
; #CALL:print_room_data(#PC,room_03)
; #CALL:print_room_stats(#PC)
b$CE37 DEFB $80,$07,$0D,$20,$8F,$22,$0C,$23
 $CE3F DEFB $0C,$25,$0C,$27,$2A,$A0,$29,$A3
 $CE47 DEFB $29,$A5,$29,$A7,$28,$7F,$A4,$76
 $CE4F DEFB $25,$2D,$26,$45,$25,$9D,$26,$B5
 $CE57 DEFB $08,$E7,$08,$07,$8F,$62,$5B,$24
 $CE5F DEFB $DC,$35,$5C,$AF,$DD,$3E,$DD,$A5
 $CE67 DEFB $7F,$00

; Room data : The Super Market
;
; #CALL:print_room_data(#PC,room_04)
; #CALL:print_room_stats(#PC)
b$CE69 DEFB $A0,$07,$48,$0F,$E8,$57,$E8,$55
 $CE71 DEFB $49,$00,$C7,$28,$C7,$80,$C7,$D0
 $CE79 DEFB $7F,$00

; Room data : The Park
;
; #CALL:print_room_data(#PC,room_05)
; #CALL:print_room_stats(#PC)
b$CE7B DEFB $80,$07,$83,$2F,$86,$20,$12,$6D
 $CE83 DEFB $86,$C8,$85,$1F,$7F,$00

; Room data : Wobbly Walk
;
; #CALL:print_room_data(#PC,room_06)
; #CALL:print_room_stats(#PC)
b$CE89 DEFB $80,$07,$0D,$80,$8F,$82,$0C,$83
 $CE91 DEFB $0C,$85,$0C,$87,$11,$1A,$89,$07
 $CE99 DEFB $08,$4F,$08,$67,$33,$5A,$A4,$BE
 $CEA1 DEFB $14,$C7,$A7,$96,$A7,$93,$A7,$DB
 $CEA9 DEFB $B7,$85,$7F,$00

; Room data : Rubble Road
;
; #CALL:print_room_data(#PC,room_07)
; #CALL:print_room_stats(#PC)
b$CEAD DEFB $80,$07,$18,$85,$18,$87,$4B,$82
 $CEB5 DEFB $8F,$84,$89,$07,$08,$4F,$08,$67
 $CEBD DEFB $97,$64,$31,$17,$A2,$BE,$14,$C7
 $CEC5 DEFB $0E,$96,$7F,$00

; Room data : Wall Street
;
; #CALL:print_room_data(#PC,room_08)
; #CALL:print_room_stats(#PC)
b$CEC9 DEFB $80,$07,$D0,$3C,$15,$C5,$15,$C7
 $CED1 DEFB $66,$67,$66,$A7,$66,$87,$7E,$09
 $CED9 DEFB $0C,$67,$7E,$09,$0C,$65,$7F,$00

; Room data : Pete Street
;
; #CALL:print_room_data(#PC,room_09)
; #CALL:print_room_stats(#PC)
b$CEE1 DEFB $80,$07,$4F,$5F,$18,$85,$18,$87
 $CEE9 DEFB $4B,$82,$8F,$84,$A2,$BE,$14,$C7
 $CEF1 DEFB $0E,$96,$0E,$E6,$86,$20,$7F,$00

; Room data : The Work Shed
;
; #CALL:print_room_data(#PC,room_0A)
; #CALL:print_room_stats(#PC)
b$CEF9 DEFB $80,$07,$A4,$2E,$BF,$5F,$BF,$B7
 $CF01 DEFB $70,$7F,$E8,$1A,$68,$45,$7F,$00

; Room data : School Lane
;
; #CALL:print_room_data(#PC,room_0B)
; #CALL:print_room_stats(#PC)
b$CF09 DEFB $80,$07,$64,$62,$1B,$64,$18,$64
 $CF11 DEFB $18,$65,$18,$67,$8A,$E7,$A4,$76
 $CF19 DEFB $14,$7F,$0E,$9E,$0E,$BE,$08,$07
 $CF21 DEFB $08,$27,$08,$47,$4D,$29,$7F,$00

; Room data : The School
;
; #CALL:print_room_data(#PC,room_0C)
; #CALL:print_room_stats(#PC)
b$CF29 DEFB $A0,$07,$A1,$37,$A1,$5F,$A1,$87
 $CF31 DEFB $A1,$AF,$A1,$D7,$49,$00,$C6,$60
 $CF39 DEFB $C7,$28,$C7,$D8,$0E,$3C,$0E,$7C
 $CF41 DEFB $0E,$BC,$F2,$37,$71,$03,$7F,$00

; Room data : Baker Street
;
; #CALL:print_room_data(#PC,room_0D)
; #CALL:print_room_stats(#PC)
b$CF49 DEFB $80,$07,$08,$07,$89,$DF,$0D,$20
 $CF51 DEFB $08,$9F,$2C,$23,$2C,$25,$2C,$27
 $CF59 DEFB $A4,$76,$28,$7F,$11,$0A,$A5,$2D
 $CF61 DEFB $A6,$45,$2F,$4E,$97,$EC,$8F,$22
 $CF69 DEFB $93,$33,$93,$73,$DE,$75,$7F,$00

; Room data : The Bakers
;
; #CALL:print_room_data(#PC,room_0E)
; #CALL:print_room_stats(#PC)
b$CF71 DEFB $A0,$07,$48,$07,$48,$47,$48,$87
 $CF79 DEFB $48,$C7,$C6,$18,$C7,$A0,$C7,$D0
 $CF81 DEFB $4A,$06,$49,$00,$2F,$35,$2F,$5D
 $CF89 DEFB $2F,$85,$62,$AE,$62,$D6,$E1,$DE
 $CF91 DEFB $E1,$AE,$E1,$5E,$7F,$00

; Room data : The Pub
;
; #CALL:print_room_data(#PC,room_0F)
; #CALL:print_room_stats(#PC)
b$CF97 DEFB $A0,$07,$D7,$27,$DA,$3E,$DA,$7E
 $CF9F DEFB $DA,$BE,$D8,$23,$D8,$4B,$D9,$7B
 $CFA7 DEFB $D9,$BB,$D9,$7C,$D9,$BC,$49,$00
 $CFAF DEFB $C6,$18,$C6,$A0,$7F,$00

; Room data : Motor Way
;
; #CALL:print_room_data(#PC,room_10)
; #CALL:print_room_stats(#PC)
b$CFB5 DEFB $80,$07,$6C,$9B,$6C,$EB,$2C,$03
 $CFBD DEFB $2C,$05,$2C,$07,$8D,$00,$0F,$03
 $CFC5 DEFB $27,$0D,$27,$55,$89,$97,$89,$DF
 $CFCD DEFB $A4,$2E,$14,$37,$3B,$10,$D4,$81
 $CFD5 DEFB $E0,$23,$7F,$00

; Room data : The Laboratory
;
; #CALL:print_room_data(#PC,room_11)
; #CALL:print_room_stats(#PC)
b$CFD9 DEFB $A0,$07,$AB,$5F,$AB,$B7,$A4,$2E
 $CFE1 DEFB $69,$6B,$49,$00,$C6,$18,$C6,$A0
 $CFE9 DEFB $AD,$13,$2D,$15,$7F,$00

; Room data : The Garage
;
; #CALL:print_room_data(#PC,room_12)
; #CALL:print_room_stats(#PC)
b$CFEF DEFB $80,$07,$C2,$16,$C2,$5E,$6C,$03
 $CFF7 DEFB $6C,$E3,$6C,$53,$6C,$9B,$C2,$A6
 $CFFF DEFB $4E,$D6,$D1,$3E,$D4,$01,$D4,$81
 $D007 DEFB $7F,$00

; Room data : Reference Road
;
; #CALL:print_room_data(#PC,room_13)
; #CALL:print_room_stats(#PC)
b$D009 DEFB $80,$07,$8D,$48,$AA,$B8,$1C,$4B
 $D011 DEFB $1C,$4D,$1C,$4F,$1C,$7B,$1C,$7D
 $D019 DEFB $1C,$7F,$A4,$76,$14,$7F,$08,$0F
 $D021 DEFB $11,$22,$30,$06,$1D,$5C,$1D,$7C
 $D029 DEFB $1D,$9C,$1D,$BC,$1D,$DC,$9D,$5E
 $D031 DEFB $9D,$9E,$9D,$BE,$9D,$DE,$7F,$00

; Room data : The Library
;
; #CALL:print_room_data(#PC,room_14)
; #CALL:print_room_stats(#PC)
b$D039 DEFB $A0,$07,$AB,$27,$AB,$6F,$AB,$B7
 $D041 DEFB $2D,$11,$2D,$13,$2D,$15,$2D,$61
 $D049 DEFB $2D,$63,$2D,$65,$2D,$B1,$2D,$B3
 $D051 DEFB $2D,$B5,$49,$00,$7F,$00

; Room data : Penny Lane
;
; #CALL:print_room_data(#PC,room_15)
; #CALL:print_room_stats(#PC)
b$D057 DEFB $80,$07,$16,$03,$16,$05,$16,$07
 $D05F DEFB $B6,$04,$90,$7A,$0D,$80,$0C,$83
 $D067 DEFB $0C,$85,$0C,$87,$8F,$03,$8F,$82
 $D06F DEFB $A4,$2E,$14,$37,$14,$C7,$A2,$BE
 $D077 DEFB $35,$0F,$93,$96,$8E,$E6,$A7,$56
 $D07F DEFB $0D,$01,$93,$93,$93,$DB,$3A,$80
 $D087 DEFB $BB,$20,$7F,$00

; Room data : The Bank
;
; #CALL:print_room_data(#PC,room_16)
; #CALL:print_room_stats(#PC)
b$D08B DEFB $80,$07,$BC,$44,$3D,$4D,$3D,$7D
 $D093 DEFB $3D,$AD,$40,$5F,$40,$8F,$40,$BF
 $D09B DEFB $C1,$26,$C1,$36,$BE,$12,$BF,$17
 $D0A3 DEFB $BF,$4F,$BF,$87,$BF,$BF,$38,$EF
 $D0AB DEFB $49,$00,$7F,$00

; Room data : Wally's House
;
; #CALL:print_room_data(#PC,room_17)
; #CALL:print_room_stats(#PC)
b$D0AF DEFB $A0,$07,$C4,$07,$AB,$1F,$C4,$67
 $D0B7 DEFB $C3,$97,$C7,$38,$C7,$78,$C7,$B8
 $D0BF DEFB $49,$00,$7F,$00

; Room data : Meat Street
;
; #CALL:print_room_data(#PC,room_18)
; #CALL:print_room_stats(#PC)
b$D0C3 DEFB $80,$07,$0D,$20,$8F,$22,$1C,$25
 $D0CB DEFB $8A,$9F,$1C,$27,$07,$DF,$08,$07
 $D0D3 DEFB $1C,$23,$28,$37,$A2,$2E,$A5,$55
 $D0DB DEFB $A6,$75,$2E,$66,$2E,$86,$97,$EC
 $D0E3 DEFB $5F,$34,$7F,$00

; Room data : The Butcher's
;
; #CALL:print_room_data(#PC,room_19)
; #CALL:print_room_stats(#PC)
b$D0E7 DEFB $A0,$07,$48,$2F,$48,$6F,$48,$AF
 $D0EF DEFB $C5,$02,$C6,$18,$C6,$A0,$2E,$23
 $D0F7 DEFB $2E,$43,$2E,$63,$2E,$83,$2E,$A3
 $D0FF DEFB $2E,$C3,$2E,$E3,$49,$00,$4C,$0E
 $D107 DEFB $7F,$00

; Room data : Trunk Road
;
; #CALL:print_room_data(#PC,room_1A)
; #CALL:print_room_stats(#PC)
b$D109 DEFB $80,$07,$63,$05,$07,$DF,$8B,$06
 $D111 DEFB $A3,$46,$A3,$66,$64,$03,$9E,$2E
 $D119 DEFB $A3,$86,$A3,$9E,$11,$AA,$31,$E7
 $D121 DEFB $67,$85,$7F,$00

; Room data : The Zoo
;
; #CALL:print_room_data(#PC,room_1B)
; #CALL:print_room_stats(#PC)
b$D125 DEFB $80,$07,$64,$83,$63,$85,$63,$87
 $D12D DEFB $0E,$96,$0E,$DE,$E5,$03,$7F,$00

; Room data : Rail Road
;
; #CALL:print_room_data(#PC,room_1C)
; #CALL:print_room_stats(#PC)
b$D135 DEFB $80,$07,$A3,$06,$A3,$26,$0C,$47
 $D13D DEFB $0C,$45,$0C,$43,$9B,$42,$0D,$40
 $D145 DEFB $08,$C7,$08,$E7,$9E,$76,$1D,$56
 $D14D DEFB $1D,$A6,$73,$2C,$7F,$00

; Room data : The Station
;
; #CALL:print_room_data(#PC,room_1D)
; #CALL:print_room_stats(#PC)
b$D153 DEFB $80,$07,$0D,$00,$0D,$80,$9B,$02
 $D15B DEFB $9B,$82,$1F,$13,$1F,$7B,$1F,$E3
 $D163 DEFB $85,$9F,$85,$37,$73,$44,$73,$AC
 $D16B DEFB $7F,$00

; Room data : The Docks
;
; #CALL:print_room_data(#PC,room_1E)
; #CALL:print_room_stats(#PC)
b$D16D DEFB $A0,$07,$83,$77,$D5,$0C,$07,$9F
 $D175 DEFB $08,$C7,$08,$E7,$D6,$C0,$7F,$00

; Room data : The Sewer
;
; #CALL:print_room_data(#PC,room_1F)
; #CALL:print_room_stats(#PC)
b$D17D DEFB $80,$07,$01,$04,$02,$D4,$ED,$31
 $D185 DEFB $ED,$82,$ED,$75,$6D,$B1,$ED,$16
 $D18D DEFB $6D,$DE,$7F,$00

; Room data : The Cave
;
; #CALL:print_room_data(#PC,room_20)
; #CALL:print_room_stats(#PC)
b$D191 DEFB $80,$07,$52,$00,$52,$18,$52,$58
 $D199 DEFB $52,$88,$52,$98,$52,$C8,$53,$30
 $D1A1 DEFB $53,$48,$53,$70,$53,$B0,$53,$D8
 $D1A9 DEFB $53,$F0,$6D,$2C,$ED,$8C,$6D,$BD
 $D1B1 DEFB $EF,$17,$6E,$26,$6E,$76,$6E,$D6
 $D1B9 DEFB $7F,$00,$00

; Room block graphics
;
; #UDGTABLE
; { #UDGARRAY1,$47,,1;$D1BC-$D203-8(rbg0) }
; TABLE#
b$D1BC DEFB $00,$FF,$FE,$01,$03,$01,$00,$00
 $D1C4 DEFB $00,$FF,$7F,$80,$C0,$80,$00,$00
 $D1CC DEFB $00,$FF,$FF,$00,$00,$00,$00,$00
 $D1D4 DEFB $D8,$D8,$DC,$CC,$CC,$CE,$C6,$C6
 $D1DC DEFB $18,$1B,$1B,$DB,$DB,$DB,$DB,$DB
 $D1E4 DEFB $30,$30,$36,$36,$66,$66,$66,$66
 $D1EC DEFB $38,$00,$38,$FE,$BE,$BE,$5C,$5C
 $D1F4 DEFB $5C,$BE,$BE,$BE,$BE,$BE,$BE,$5C
 $D1FC DEFB $00,$BE,$40,$BE,$BE,$BE,$40,$BE

; Room block graphics
;
; #UDGTABLE
; { #UDGARRAY1,$47,,1;$D204-$D333-8(rbg1) }
; TABLE#
b$D204 DEFB $CE,$FE,$00,$2F,$2F,$37,$30,$30
 $D20C DEFB $FF,$FF,$00,$FF,$FF,$FF,$00,$00
 $D214 DEFB $FF,$FF,$00,$F4,$F4,$EC,$0C,$0C
 $D21C DEFB $0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C
 $D224 DEFB $30,$30,$30,$30,$30,$30,$30,$30
 $D22C DEFB $ED,$ED,$0C,$6C,$6C,$6C,$6C,$6C
 $D234 DEFB $6C,$6C,$6C,$6C,$6C,$6C,$6C,$6C
 $D23C DEFB $FF,$FF,$00,$2F,$2F,$37,$30,$30
 $D244 DEFB $81,$00,$FF,$FF,$00,$FF,$FF,$00
 $D24C DEFB $7E,$FF,$7F,$77,$EB,$77,$7F,$FF
 $D254 DEFB $31,$00,$1F,$7F,$00,$FF,$FF,$00
 $D25C DEFB $8C,$00,$F8,$FE,$00,$FF,$FF,$00
 $D264 DEFB $1E,$3F,$7F,$7B,$75,$7B,$7F,$7F
 $D26C DEFB $78,$FC,$7E,$6E,$D6,$6E,$7E,$FE
 $D274 DEFB $3C,$3C,$3C,$3C,$3C,$3C,$3C,$3C
 $D27C DEFB $00,$FF,$BF,$C0,$DB,$DA,$DB,$00
 $D284 DEFB $00,$FF,$FF,$00,$FF,$00,$FF,$00
 $D28C DEFB $00,$FF,$FD,$03,$DB,$5B,$DB,$00
 $D294 DEFB $01,$07,$1D,$33,$6F,$7F,$00,$00
 $D29C DEFB $C3,$7F,$FF,$FF,$FF,$FF,$00,$3C
 $D2A4 DEFB $80,$E0,$F8,$FC,$FE,$FE,$00,$00
 $D2AC DEFB $18,$18,$18,$18,$18,$18,$2C,$2C
 $D2B4 DEFB $C0,$BF,$BF,$C0,$DF,$DF,$D0,$D0
 $D2BC DEFB $00,$FF,$FF,$00,$FF,$FF,$00,$00
 $D2C4 DEFB $03,$FD,$FD,$03,$FB,$FB,$0B,$0B
 $D2CC DEFB $C2,$C4,$C8,$D0,$C0,$C0,$C4,$C8
 $D2D4 DEFB $03,$0B,$13,$23,$43,$03,$0B,$13
 $D2DC DEFB $7F,$CC,$BF,$3F,$C0,$C0,$C0,$C0
 $D2E4 DEFB $FF,$99,$FF,$FF,$00,$00,$00,$00
 $D2EC DEFB $FE,$9B,$FF,$FC,$03,$03,$03,$03
 $D2F4 DEFB $00,$00,$00,$00,$18,$E7,$FF,$18
 $D2FC DEFB $00,$00,$00,$00,$00,$FF,$FF,$00
 $D304 DEFB $BF,$BF,$BF,$BF,$BF,$BF,$80,$FF
 $D30C DEFB $FF,$E7,$99,$99,$C3,$FF,$00,$FF
 $D314 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$01,$FF
 $D31C DEFB $FF,$FF,$CC,$D5,$CC,$D5,$C5,$FF
 $D324 DEFB $FF,$FF,$C6,$5D,$C4,$5D,$45,$FF
 $D32C DEFB $FF,$FF,$CF,$57,$57,$57,$4F,$FF

; Room block graphics
;
; #UDGTABLE
; { #UDGARRAY1,$47,,1;$D334-$D35B-8(rbg2) }
; TABLE#
b$D334 DEFB $08,$08,$18,$1C,$3C,$BB,$BB,$3C
 $D33C DEFB $34,$2C,$2C,$BB,$BB,$3C,$34,$2C
 $D344 DEFB $3C,$34,$34,$2C,$2C,$34,$34,$3C
 $D34C DEFB $7D,$81,$81,$81,$81,$81,$81,$7D
 $D354 DEFB $81,$80,$C2,$C2,$80,$81,$81,$7D

; Room block graphics
;
; #UDGTABLE
; { #UDGARRAY1,$47,,1;$D35C-$D3E3-8(rbg3) }
; TABLE#
b$D35C DEFB $20,$64,$44,$16,$B2,$D0,$46,$0C
 $D364 DEFB $00,$20,$64,$46,$02,$10,$30,$00
 $D36C DEFB $81,$C3,$4A,$18,$10,$C6,$63,$00
 $D374 DEFB $00,$00,$03,$06,$00,$09,$1B,$12
 $D37C DEFB $00,$00,$60,$30,$00,$88,$CC,$44
 $D384 DEFB $60,$64,$CC,$08,$20,$60,$40,$00
 $D38C DEFB $02,$33,$19,$00,$00,$0C,$06,$00
 $D394 DEFB $DD,$CD,$6E,$6E,$77,$77,$6F,$EF
 $D39C DEFB $EE,$EE,$FE,$B7,$B7,$77,$7B,$7B
 $D3A4 DEFB $F0,$3C,$0E,$07,$03,$03,$01,$01
 $D3AC DEFB $18,$38,$74,$F6,$F7,$EF,$ED,$DE
 $D3B4 DEFB $10,$10,$30,$78,$BD,$BD,$DB,$DB
 $D3BC DEFB $03,$06,$0E,$3C,$F8,$E0,$C0,$80
 $D3C4 DEFB $01,$01,$03,$03,$07,$0E,$3C,$F0
 $D3CC DEFB $DE,$ED,$EF,$F7,$F6,$74,$38,$18
 $D3D4 DEFB $DB,$DB,$BD,$BD,$78,$30,$10,$10
 $D3DC DEFB $80,$C0,$E0,$F8,$3C,$0E,$06,$03

; Room block graphics
;
; #UDGTABLE
; { #UDGARRAY1,$47,,1;$D3E4-$D423-8(rbg4) }
; TABLE#
b$D3E4 DEFB $6F,$EF,$E0,$E0,$E0,$E0,$E0,$80
 $D3EC DEFB $FF,$E7,$18,$18,$18,$18,$18,$18
 $D3F4 DEFB $F6,$F7,$07,$07,$07,$07,$07,$01
 $D3FC DEFB $70,$F8,$98,$60,$60,$6F,$9F,$FF
 $D404 DEFB $18,$18,$18,$18,$00,$FF,$FF,$FF
 $D40C DEFB $0E,$1F,$19,$06,$06,$F6,$F9,$FF
 $D414 DEFB $38,$38,$38,$70,$70,$70,$E0,$E0
 $D41C DEFB $1C,$1C,$1C,$0E,$0E,$0E,$07,$07

; Room block graphics
;
; #UDGTABLE
; { #UDGARRAY1,$47,,1;$D424-$D49B-8(rbg5) }
; TABLE#
b$D424 DEFB $00,$7F,$80,$FF,$7F,$00,$0E,$03
 $D42C DEFB $00,$FF,$00,$FF,$FF,$00,$AA,$55
 $D434 DEFB $00,$FE,$01,$FF,$FE,$00,$F0,$C0
 $D43C DEFB $EA,$35,$1A,$0D,$0E,$07,$06,$07
 $D444 DEFB $AF,$5C,$B8,$50,$B0,$60,$A0,$60
 $D44C DEFB $AA,$55,$AA,$55,$AA,$55,$AA,$55
 $D454 DEFB $00,$03,$0F,$09,$06,$03,$0F,$07
 $D45C DEFB $00,$80,$C0,$E0,$E0,$60,$C0,$A0
 $D464 DEFB $80,$C1,$A3,$93,$8A,$85,$43,$4C
 $D46C DEFB $78,$7C,$AC,$9C,$78,$E0,$98,$78
 $D474 DEFB $32,$C2,$22,$25,$25,$15,$14,$0A
 $D47C DEFB $F8,$F0,$F0,$E0,$C0,$E3,$FA,$F9
 $D484 DEFB $03,$01,$01,$01,$00,$00,$03,$07
 $D48C DEFB $73,$83,$C1,$C0,$E0,$00,$60,$A0
 $D494 DEFB $BF,$5E,$2C,$2C,$2C,$2C,$5E,$5E

; Room block graphics
;
; #UDGTABLE
; { #UDGARRAY1,$47,,1;$D49C-$D513-8(rbg6) }
; TABLE#
b$D49C DEFB $2C,$2C,$2C,$AB,$AB,$2C,$2C,$2C
 $D4A4 DEFB $00,$60,$90,$B7,$B7,$90,$60,$00
 $D4AC DEFB $00,$06,$09,$EB,$EB,$09,$06,$00
 $D4B4 DEFB $2C,$2C,$2C,$5E,$5E,$BF,$FF,$00
 $D4BC DEFB $2C,$2C,$2C,$2C,$2C,$2C,$2C,$2C
 $D4C4 DEFB $0B,$05,$05,$05,$05,$04,$03,$03
 $D4CC DEFB $E7,$FF,$D3,$D3,$FF,$00,$FF,$C3
 $D4D4 DEFB $D0,$A0,$A0,$A0,$A0,$20,$C0,$C0
 $D4DC DEFB $00,$03,$0E,$19,$37,$2B,$0B,$0B
 $D4E4 DEFB $FF,$81,$7E,$FF,$FF,$E7,$C3,$D3
 $D4EC DEFB $00,$C0,$70,$98,$EC,$D4,$D0,$D0
 $D4F4 DEFB $3C,$5E,$5E,$2C,$18,$2C,$5E,$00
 $D4FC DEFB $1F,$71,$F7,$FB,$FB,$FD,$71,$1F
 $D504 DEFB $FF,$11,$B5,$B5,$B5,$B5,$B1,$FF
 $D50C DEFB $F8,$1E,$5F,$5F,$1F,$7F,$7E,$F8

; Room block graphics
;
; #UDGTABLE
; { #UDGARRAY1,$47,,1;$D514-$D5DB-8(rbg7) }
; TABLE#
b$D514 DEFB $00,$DF,$DF,$DF,$00,$FB,$FB,$FB
 $D51C DEFB $FF,$FF,$FE,$00,$7F,$7F,$3F,$80
 $D524 DEFB $7F,$7F,$3F,$80,$FF,$FF,$FE,$00
 $D52C DEFB $00,$00,$70,$97,$D7,$D7,$F7,$00
 $D534 DEFB $3C,$18,$00,$FF,$C3,$DB,$18,$00
 $D53C DEFB $00,$00,$00,$FF,$FF,$FF,$00,$00
 $D544 DEFB $00,$00,$FF,$7F,$7F,$7F,$D2,$2C
 $D54C DEFB $16,$16,$16,$16,$16,$16,$16,$16
 $D554 DEFB $16,$96,$C9,$BF,$BF,$C9,$96,$16
 $D55C DEFB $00,$55,$2A,$55,$2A,$55,$2A,$7F
 $D564 DEFB $00,$55,$AB,$55,$AB,$55,$AB,$FF
 $D56C DEFB $00,$33,$67,$33,$00,$67,$CF,$CF
 $D574 DEFB $00,$FC,$FE,$FC,$00,$FE,$FF,$FF
 $D57C DEFB $67,$CF,$CF,$67,$00,$67,$67,$00
 $D584 DEFB $FE,$FF,$FF,$FE,$00,$FE,$FE,$00
 $D58C DEFB $33,$33,$33,$33,$33,$33,$33,$33
 $D594 DEFB $7C,$7C,$7C,$7C,$7C,$7C,$7C,$7C
 $D59C DEFB $EF,$9C,$38,$70,$66,$6E,$3C,$00
 $D5A4 DEFB $FF,$80,$90,$A2,$84,$88,$92,$A4
 $D5AC DEFB $FF,$01,$21,$41,$05,$09,$11,$21
 $D5B4 DEFB $80,$88,$90,$A1,$82,$84,$88,$80
 $D5BC DEFB $09,$11,$21,$41,$09,$11,$21,$01
 $D5C4 DEFB $80,$80,$80,$B8,$B8,$B8,$B8,$B8
 $D5CC DEFB $80,$88,$90,$A2,$84,$88,$80,$FF
 $D5D4 DEFB $01,$11,$21,$41,$05,$09,$01,$FF

; Room block graphics
;
; #UDGTABLE
; { #UDGARRAY1,$47,,1;$D5DC-$D5FB-8(rbg8) }
; TABLE#
b$D5DC DEFB $3E,$7F,$7F,$38,$C7,$EF,$EF,$C0
 $D5E4 DEFB $3C,$FF,$3F,$BF,$3F,$BF,$7F,$C3
 $D5EC DEFB $F7,$F7,$D7,$F7,$EF,$EF,$EF,$EF
 $D5F4 DEFB $EF,$EF,$EF,$EF,$EF,$F7,$B7,$EF

; Room block graphics
;
; #UDGTABLE
; { #UDGARRAY1,$47,,1;$D5FC-$D6BB-8(rbg9) }
; TABLE#
b$D5FC DEFB $00,$7F,$60,$5F,$50,$50,$50,$50
 $D604 DEFB $00,$FF,$00,$FF,$00,$00,$00,$00
 $D60C DEFB $00,$FE,$06,$FA,$0A,$0A,$0A,$0A
 $D614 DEFB $50,$50,$50,$50,$5F,$60,$7F,$00
 $D61C DEFB $00,$00,$00,$00,$FF,$00,$FF,$00
 $D624 DEFB $0A,$0A,$0A,$0A,$FA,$06,$FE,$00
 $D62C DEFB $02,$24,$48,$10,$22,$44,$88,$10
 $D634 DEFB $50,$50,$50,$50,$50,$50,$50,$50
 $D63C DEFB $0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A
 $D644 DEFB $FF,$81,$BD,$AD,$A5,$BD,$81,$FF
 $D64C DEFB $FF,$81,$FD,$CD,$A5,$A5,$CD,$FF
 $D654 DEFB $00,$79,$67,$4F,$1C,$38,$38,$70
 $D65C DEFB $3C,$FF,$FF,$00,$00,$00,$00,$00
 $D664 DEFB $00,$8F,$E7,$F3,$38,$1C,$1C,$0E
 $D66C DEFB $70,$00,$70,$70,$70,$70,$70,$70
 $D674 DEFB $0E,$00,$0E,$0E,$0E,$0E,$0E,$0E
 $D67C DEFB $50,$50,$50,$00,$7F,$FF,$FF,$00
 $D684 DEFB $00,$00,$00,$00,$FF,$FF,$FF,$00
 $D68C DEFB $0A,$0A,$0A,$00,$FE,$FF,$FF,$00
 $D694 DEFB $FF,$7F,$80,$BF,$CF,$D0,$D8,$D8
 $D69C DEFB $FF,$FF,$00,$FF,$FF,$00,$00,$00
 $D6A4 DEFB $FF,$FE,$01,$FD,$F3,$0B,$1B,$1B
 $D6AC DEFB $D8,$D8,$D8,$D8,$D8,$D8,$D8,$D8
 $D6B4 DEFB $1B,$1B,$1B,$1B,$1B,$1B,$1B,$1B

; Room block graphics
;
; #UDGTABLE
; { #UDGARRAY1,$47,,1;$D6BC-$D72B-8(rbgA) }
; TABLE#
b$D6BC DEFB $E0,$DF,$DF,$E0,$E0,$E0,$E0,$E0
 $D6C4 DEFB $00,$FF,$FF,$00,$00,$00,$00,$00
 $D6CC DEFB $07,$FB,$FB,$07,$07,$07,$07,$07
 $D6D4 DEFB $3C,$BD,$A5,$18,$3C,$18,$24,$24
 $D6DC DEFB $18,$18,$18,$18,$24,$24,$24,$24
 $D6E4 DEFB $18,$18,$18,$18,$67,$7F,$67,$18
 $D6EC DEFB $00,$00,$00,$00,$00,$FF,$FF,$FF
 $D6F4 DEFB $18,$18,$18,$18,$E6,$FE,$E6,$18
 $D6FC DEFB $E0,$E0,$E0,$E0,$E0,$E0,$E0,$E0
 $D704 DEFB $07,$07,$07,$07,$07,$07,$07,$07
 $D70C DEFB $38,$01,$7F,$81,$BE,$BF,$BF,$BF
 $D714 DEFB $C0,$F0,$9C,$87,$61,$99,$E7,$FB
 $D71C DEFB $A2,$AB,$AB,$A2,$BF,$BF,$80,$7F
 $D724 DEFB $2D,$6D,$6D,$25,$FD,$FD,$01,$FE

; Room block graphics
;
; #UDGTABLE
; { #UDGARRAY1,$47,,1;$D72C-$D7BB-8(rbgB) }
; TABLE#
b$D72C DEFB $18,$18,$18,$0C,$0C,$06,$06,$46
 $D734 DEFB $54,$3A,$67,$6F,$76,$3C,$18,$18
 $D73C DEFB $10,$28,$34,$3C,$3E,$7E,$7E,$FF
 $D744 DEFB $00,$01,$01,$03,$03,$07,$07,$03
 $D74C DEFB $E3,$97,$4F,$BF,$FF,$FC,$E3,$DF
 $D754 DEFB $80,$C0,$C0,$A0,$60,$E0,$C0,$00
 $D75C DEFB $AA,$DB,$00,$7F,$7F,$7F,$80,$FF
 $D764 DEFB $AA,$6D,$00,$FF,$FF,$FF,$00,$FF
 $D76C DEFB $55,$B7,$00,$FE,$FE,$FE,$01,$FF
 $D774 DEFB $00,$0F,$00,$06,$06,$00,$0F,$00
 $D77C DEFB $00,$F0,$00,$60,$60,$00,$F0,$00
 $D784 DEFB $1A,$0B,$00,$0F,$0F,$0F,$10,$1F
 $D78C DEFB $A8,$50,$00,$F0,$F0,$F0,$08,$F8
 $D794 DEFB $00,$C1,$77,$7A,$38,$3C,$18,$00
 $D79C DEFB $00,$7F,$03,$01,$01,$01,$07,$3F
 $D7A4 DEFB $00,$FE,$C0,$80,$80,$80,$E0,$FC
 $D7AC DEFB $00,$00,$7B,$CD,$B5,$BB,$C0,$7E
 $D7B4 DEFB $00,$00,$F8,$FC,$FC,$F8,$00,$FF

; Room block graphics
;
; #UDGTABLE
; { #UDGARRAY1,$47,,1;$D7BC-$D873-8(rbgC) }
; TABLE#
b$D7BC DEFB $EF,$EF,$F7,$F8,$F0,$F0,$F0,$F0
 $D7C4 DEFB $F7,$F7,$EF,$1F,$0F,$0F,$0F,$0F
 $D7CC DEFB $F0,$F0,$F0,$F0,$F8,$F7,$EF,$EF
 $D7D4 DEFB $0F,$0F,$0F,$0F,$1F,$EF,$F7,$F7
 $D7DC DEFB $FF,$FF,$FF,$00,$00,$00,$00,$00
 $D7E4 DEFB $0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F
 $D7EC DEFB $00,$00,$00,$00,$00,$FF,$FF,$FF
 $D7F4 DEFB $F0,$F0,$F0,$F0,$F0,$F0,$F0,$F0
 $D7FC DEFB $00,$FF,$FF,$81,$D5,$D0,$FF,$00
 $D804 DEFB $00,$FF,$FF,$04,$40,$14,$FF,$00
 $D80C DEFB $00,$FF,$FF,$11,$83,$11,$FF,$00
 $D814 DEFB $62,$F0,$67,$67,$67,$67,$F0,$62
 $D81C DEFB $3F,$6C,$48,$48,$48,$48,$48,$7F
 $D824 DEFB $FC,$06,$02,$02,$02,$02,$02,$FE
 $D82C DEFB $28,$2B,$29,$2B,$28,$2F,$20,$3F
 $D834 DEFB $34,$54,$34,$54,$54,$F4,$04,$FC
 $D83C DEFB $3F,$20,$2F,$2F,$2F,$2F,$2F,$2F
 $D844 DEFB $FC,$04,$F4,$F4,$F4,$D4,$D4,$F4
 $D84C DEFB $07,$3F,$FF,$7F,$00,$3F,$30,$30
 $D854 DEFB $E0,$FC,$FF,$FE,$00,$FC,$0C,$0C
 $D85C DEFB $3F,$3F,$3F,$30,$30,$30,$3F,$3F
 $D864 DEFB $FC,$FC,$FC,$0C,$0C,$0C,$FC,$FC
 $D86C DEFB $00,$00,$00,$00,$00,$00,$00,$00

; Room block graphics
;
; #UDGTABLE
; { #UDGARRAY1,$47,,1;$D874-$D91B-8(rbgD) }
; TABLE#
b$D874 DEFB $00,$0E,$09,$09,$0E,$08,$08,$00
 $D87C DEFB $00,$00,$31,$4A,$49,$48,$33,$00
 $D884 DEFB $00,$20,$B0,$20,$20,$A0,$18,$00
 $D88C DEFB $00,$18,$25,$25,$25,$25,$19,$00
 $D894 DEFB $00,$DA,$20,$B2,$22,$22,$22,$00
 $D89C DEFB $00,$00,$66,$89,$8E,$88,$66,$00
 $D8A4 DEFB $03,$EF,$DF,$BF,$BF,$7F,$7F,$7F
 $D8AC DEFB $7F,$7F,$7F,$BF,$BF,$DF,$EF,$03
 $D8B4 DEFB $C0,$F0,$F8,$FC,$FC,$FE,$FE,$FE
 $D8BC DEFB $FE,$FE,$FE,$FC,$FC,$F8,$F0,$C0
 $D8C4 DEFB $30,$18,$FF,$18,$30,$FF,$30,$18
 $D8CC DEFB $00,$4A,$52,$42,$7E,$42,$4A,$52
 $D8D4 DEFB $00,$00,$00,$0C,$1F,$1F,$3B,$3F
 $D8DC DEFB $00,$00,$00,$00,$80,$C0,$F0,$F8
 $D8E4 DEFB $00,$00,$30,$70,$78,$2C,$06,$06
 $D8EC DEFB $7F,$7F,$3F,$1F,$07,$07,$03,$03
 $D8F4 DEFB $F8,$FC,$FF,$FF,$FF,$FF,$FF,$FF
 $D8FC DEFB $06,$1E,$FC,$FC,$FC,$F8,$F8,$F8
 $D904 DEFB $01,$03,$03,$06,$06,$1C,$00,$00
 $D90C DEFB $C7,$80,$80,$00,$00,$00,$00,$00
 $D914 DEFB $F8,$7C,$3C,$18,$30,$60,$C0,$00

; Room block graphics
;
; #UDGTABLE
; { #UDGARRAY1,$47,,1;$D91C-$D983-8(rbgE) }
; TABLE#
b$D91C DEFB $00,$7F,$62,$6E,$6E,$6E,$62,$7F
 $D924 DEFB $00,$FF,$10,$D7,$10,$DE,$D0,$FF
 $D92C DEFB $00,$FE,$B6,$B6,$86,$B6,$B6,$FE
 $D934 DEFB $60,$60,$6F,$68,$6A,$68,$69,$6A
 $D93C DEFB $00,$01,$F9,$08,$49,$89,$08,$29
 $D944 DEFB $06,$56,$56,$06,$56,$56,$06,$56
 $D94C DEFB $68,$6F,$60,$60,$7F,$7F,$7F,$00
 $D954 DEFB $09,$F8,$01,$00,$FF,$FF,$FF,$00
 $D95C DEFB $56,$06,$F6,$06,$FE,$FE,$FE,$00
 $D964 DEFB $00,$F3,$49,$49,$71,$59,$CF,$00
 $D96C DEFB $00,$EF,$04,$C4,$04,$24,$EF,$00
 $D974 DEFB $00,$0C,$84,$84,$84,$84,$0F,$00
 $D97C DEFB $00,$39,$12,$12,$12,$92,$B9,$00

; Room block graphics
;
; #UDGTABLE
; { #UDGARRAY1,$47,,1;$D984-$D9E3-8(rbgF) }
; TABLE#
b$D984 DEFB $00,$C8,$2C,$2A,$29,$28,$C8,$00
 $D98C DEFB $00,$80,$80,$80,$80,$80,$80,$00
 $D994 DEFB $00,$79,$6D,$6D,$79,$61,$61,$00
 $D99C DEFB $00,$9C,$B6,$B0,$B6,$B6,$9E,$00
 $D9A4 DEFB $00,$73,$DB,$C1,$D8,$D8,$78,$00
 $D9AC DEFB $00,$30,$30,$E0,$C0,$C0,$C0,$00
 $D9B4 DEFB $00,$83,$83,$03,$03,$03,$03,$00
 $D9BC DEFB $00,$C7,$2D,$CF,$2D,$2D,$CD,$00
 $D9C4 DEFB $00,$33,$BB,$BF,$B7,$B3,$B3,$00
 $D9CC DEFB $00,$66,$6C,$78,$78,$6C,$66,$00
 $D9D4 DEFB $1B,$0F,$1B,$7F,$6F,$1F,$06,$0C
 $D9DC DEFB $E1,$F8,$FC,$FF,$FC,$F8,$18,$0C

; Room block graphics
;
; #UDGTABLE
; { #UDGARRAY1,$47,,1;$D9E4-$DA9B-8(rbgG) }
; TABLE#
b$D9E4 DEFB $BF,$BF,$BF,$BF,$8F,$EF,$E0,$7F
 $D9EC DEFB $FD,$FD,$FD,$FD,$F1,$F7,$07,$FE
 $D9F4 DEFB $BF,$BF,$BF,$BF,$BF,$BF,$BF,$BF
 $D9FC DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $DA04 DEFB $7F,$E0,$EF,$8F,$BF,$BF,$BF,$BF
 $DA0C DEFB $FE,$07,$F7,$F1,$FD,$FD,$FD,$FD
 $DA14 DEFB $40,$60,$30,$18,$1C,$3C,$2C,$1C
 $DA1C DEFB $0C,$00,$0C,$0C,$0C,$0C,$0C,$0C
 $DA24 DEFB $8C,$8C,$CC,$CC,$6C,$74,$3C,$18
 $DA2C DEFB $FF,$FF,$FF,$FF,$FF,$FF,$00,$FF
 $DA34 DEFB $FF,$00,$FF,$FF,$FF,$FF,$FF,$FF
 $DA3C DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $DA44 DEFB $C0,$C0,$C0,$C0,$C0,$C0,$C0,$00
 $DA4C DEFB $7F,$BF,$C0,$D9,$D1,$C0,$BF,$7F
 $DA54 DEFB $FF,$FF,$00,$19,$D9,$00,$FF,$FF
 $DA5C DEFB $FE,$FD,$03,$D3,$1B,$03,$FD,$FE
 $DA64 DEFB $7C,$7E,$66,$7C,$7C,$66,$7E,$7C
 $DA6C DEFB $7E,$7E,$60,$7E,$7E,$60,$7E,$7E
 $DA74 DEFB $00,$60,$78,$7E,$7E,$78,$60,$00
 $DA7C DEFB $7C,$7E,$66,$7E,$7C,$60,$60,$60
 $DA84 DEFB $18,$18,$10,$08,$18,$18,$10,$08
 $DA8C DEFB $7E,$BD,$DB,$DB,$E7,$E7,$E7,$E7
 $DA94 DEFB $00,$FF,$FF,$FF,$FF,$FF,$FF,$FF

; Room block graphics
;
; #UDGTABLE
; { #UDGARRAY1,$47,,1;$DA9C-$DB63-8(rbgH) }
; TABLE#
b$DA9C DEFB $FF,$C0,$9F,$BF,$1F,$DF,$DF,$1F
 $DAA4 DEFB $FF,$00,$FF,$FF,$66,$81,$99,$24
 $DAAC DEFB $FF,$03,$F9,$FD,$FD,$FD,$FD,$FD
 $DAB4 DEFB $BF,$BF,$BF,$BF,$BF,$BF,$BF,$BF
 $DABC DEFB $24,$99,$81,$66,$FF,$FF,$FF,$FF
 $DAC4 DEFB $FD,$FD,$FD,$FD,$FD,$FD,$FD,$FD
 $DACC DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $DAD4 DEFB $1F,$DF,$DF,$1F,$BF,$9F,$C0,$FF
 $DADC DEFB $FF,$FF,$FF,$FF,$FF,$FF,$00,$FF
 $DAE4 DEFB $FD,$FD,$FD,$FD,$FD,$F9,$03,$FF
 $DAEC DEFB $FF,$3F,$80,$D0,$D0,$D0,$D0,$D0
 $DAF4 DEFB $FF,$FF,$00,$00,$00,$00,$00,$00
 $DAFC DEFB $FF,$FF,$07,$03,$03,$03,$03,$03
 $DB04 DEFB $D0,$D0,$D0,$D0,$D0,$D0,$D0,$D0
 $DB0C DEFB $03,$03,$03,$03,$03,$03,$03,$03
 $DB14 DEFB $D0,$D0,$D0,$D0,$D0,$80,$3F,$FF
 $DB1C DEFB $00,$00,$00,$00,$00,$00,$FF,$FF
 $DB24 DEFB $03,$03,$03,$03,$03,$07,$FF,$FF
 $DB2C DEFB $00,$00,$00,$00,$02,$12,$16,$16
 $DB34 DEFB $16,$16,$12,$02,$00,$00,$00,$00
 $DB3C DEFB $0C,$18,$10,$00,$2C,$5E,$FF,$00
 $DB44 DEFB $30,$30,$30,$30,$30,$30,$CF,$30
 $DB4C DEFB $C3,$C3,$C3,$C3,$C3,$C3,$3C,$C3
 $DB54 DEFB $0C,$0C,$0C,$0C,$0C,$0C,$F3,$0C
 $DB5C DEFB $00,$00,$00,$03,$03,$06,$06,$0C

; Room block graphics
;
; #UDGTABLE
; { #UDGARRAY1,$47,,1;$DB64-$DBAB-8(rbgI) }
; TABLE#
b$DB64 DEFB $00,$F3,$EF,$DE,$B8,$B3,$74,$64
 $DB6C DEFB $7E,$FF,$C3,$3C,$E7,$E7,$7F,$7F
 $DB74 DEFB $00,$CF,$F7,$7B,$9D,$ED,$EE,$96
 $DB7C DEFB $6C,$EF,$DF,$D3,$D3,$DF,$EF,$69
 $DB84 DEFB $3F,$1F,$9F,$E7,$E7,$EF,$E7,$E7
 $DB8C DEFB $96,$F7,$FB,$CB,$CB,$FB,$F7,$96
 $DB94 DEFB $69,$77,$B7,$B9,$DE,$EF,$F3,$00
 $DB9C DEFB $E7,$C3,$E7,$FF,$3C,$C3,$FF,$7E
 $DBA4 DEFB $96,$EE,$ED,$9D,$7B,$F7,$CF,$00

; Room block graphics
;
; #UDGTABLE
; { #UDGARRAY1,$47,,1;$DBAC-$DC23-8(rbgJ) }
; TABLE#
b$DBAC DEFB $00,$01,$03,$06,$0C,$18,$37,$6F
 $DBB4 DEFB $FF,$E7,$18,$36,$63,$C0,$3F,$FF
 $DBBC DEFB $30,$30,$61,$61,$51,$DB,$CD,$C5
 $DBC4 DEFB $C0,$C0,$80,$80,$80,$00,$00,$00
 $DBCC DEFB $06,$0C,$0A,$0B,$19,$18,$18,$30
 $DBD4 DEFB $18,$30,$30,$30,$A0,$A0,$60,$C0
 $DBDC DEFB $01,$01,$01,$03,$03,$03,$06,$06
 $DBE4 DEFB $80,$80,$80,$C0,$C0,$C0,$60,$60
 $DBEC DEFB $18,$0C,$0C,$0C,$05,$05,$06,$03
 $DBF4 DEFB $60,$30,$50,$D0,$98,$18,$18,$0C
 $DBFC DEFB $03,$03,$01,$01,$01,$00,$00,$00
 $DC04 DEFB $0C,$0C,$86,$86,$8A,$DB,$B3,$A3
 $DC0C DEFB $00,$80,$C0,$60,$30,$18,$EC,$F6
 $DC14 DEFB $B0,$BC,$CF,$C3,$CC,$BC,$B0,$C0
 $DC1C DEFB $0D,$3D,$33,$C3,$F3,$3D,$0D,$03

; Room block graphics
;
; #UDGTABLE
; { #UDGARRAY1,$47,,1;$DC24-$DCBB-8(rbgK) }
; TABLE#
b$DC24 DEFB $AA,$55,$AA,$55,$AA,$55,$AA,$55
 $DC2C DEFB $FF,$FF,$FF,$FF,$00,$00,$00,$00
 $DC34 DEFB $FF,$C3,$99,$3C,$66,$66,$3C,$18
 $DC3C DEFB $FF,$81,$FF,$81,$FF,$81,$FF,$FF
 $DC44 DEFB $60,$E0,$D0,$28,$14,$0A,$05,$02
 $DC4C DEFB $00,$00,$00,$00,$00,$18,$30,$60
 $DC54 DEFB $00,$01,$03,$06,$04,$00,$00,$00
 $DC5C DEFB $00,$F8,$FC,$00,$C0,$C0,$C0,$00
 $DC64 DEFB $38,$1F,$0F,$00,$01,$01,$01,$00
 $DC6C DEFB $00,$00,$40,$E0,$E0,$70,$70,$38
 $DC74 DEFB $0F,$09,$0F,$09,$0F,$09,$0F,$09
 $DC7C DEFB $0F,$69,$6F,$09,$0F,$69,$6F,$09
 $DC84 DEFB $FF,$FF,$F3,$FF,$F3,$FF,$F3,$FF
 $DC8C DEFB $FF,$C0,$BF,$BF,$BF,$BF,$C0,$FF
 $DC94 DEFB $FF,$03,$FD,$FD,$FD,$FD,$03,$FF
 $DC9C DEFB $00,$0F,$79,$E1,$9F,$FE,$FE,$FE
 $DCA4 DEFB $FE,$FE,$FE,$FF,$FF,$7F,$0F,$00
 $DCAC DEFB $F3,$CE,$9D,$31,$61,$61,$C1,$BE
 $DCB4 DEFB $CF,$73,$B9,$8C,$86,$86,$83,$7D

; Room block graphics
;
; #UDGTABLE
; { #UDGARRAY1,$47,,1;$DCBC-$DCEB-8(rbgL) }
; TABLE#
b$DCBC DEFB $BE,$C1,$61,$61,$31,$9D,$CE,$F3
 $DCC4 DEFB $7D,$83,$86,$86,$8C,$B9,$73,$CF
 $DCCC DEFB $00,$E0,$F8,$9C,$CE,$66,$73,$7F
 $DCD4 DEFB $7F,$7F,$7E,$FE,$FC,$F8,$E0,$00
 $DCDC DEFB $00,$07,$07,$07,$07,$07,$07,$00
 $DCE4 DEFB $00,$E0,$E0,$E0,$E0,$E0,$E0,$00

; Room block graphics
;
; #UDGTABLE
; { #UDGARRAY1,$47,,1;$DCEC-$DD0B-8(rbgM) }
; TABLE#
b$DCEC DEFB $38,$00,$FF,$00,$FF,$DF,$8F,$DF
 $DCF4 DEFB $1C,$00,$FF,$00,$FF,$FF,$F1,$FF
 $DCFC DEFB $E4,$C2,$81,$8F,$9A,$BF,$EA,$FF
 $DD04 DEFB $07,$03,$01,$F1,$99,$FD,$97,$FF

; Room block graphics
;
; #UDGTABLE
; { #UDGARRAY1,$47,,1;$DD0C-$DD53-8(rbgN) }
; TABLE#
b$DD0C DEFB $80,$80,$80,$80,$80,$80,$80,$80
 $DD14 DEFB $C0,$C0,$C0,$C0,$E0,$E0,$E0,$E0
 $DD1C DEFB $F0,$F0,$F0,$F0,$F0,$F0,$F8,$F8
 $DD24 DEFB $F8,$F8,$F8,$FC,$FC,$FC,$FC,$FE
 $DD2C DEFB $1F,$3F,$3F,$3F,$3F,$7F,$7F,$7F
 $DD34 DEFB $07,$07,$0F,$0F,$0F,$1F,$1F,$1F
 $DD3C DEFB $03,$03,$03,$03,$03,$03,$07,$07
 $DD44 DEFB $01,$01,$01,$01,$01,$03,$03,$03
 $DD4C DEFB $00,$00,$00,$01,$01,$01,$01,$01

; Room block graphics
;
; #UDGTABLE
; { #UDGARRAY1,$47,,1;$DD54-$DDD3-8(rbgO) }
; TABLE#
b$DD54 DEFB $FF,$00,$FF,$00,$FF,$00,$FF,$00
 $DD5C DEFB $F7,$0E,$DC,$38,$70,$E0,$C0,$80
 $DD64 DEFB $FF,$00,$FF,$00,$FF,$C3,$81,$81
 $DD6C DEFB $00,$00,$00,$03,$7E,$FF,$00,$00
 $DD74 DEFB $00,$01,$3F,$EA,$55,$FF,$00,$00
 $DD7C DEFB $18,$FC,$56,$AB,$55,$AA,$D4,$78
 $DD84 DEFB $FF,$00,$FF,$00,$FF,$E7,$DB,$DB
 $DD8C DEFB $E7,$FF,$FF,$00,$FF,$FF,$FF,$00
 $DD94 DEFB $C0,$80,$00,$80,$00,$00,$00,$00
 $DD9C DEFB $E0,$70,$38,$1C,$0E,$07,$03,$01
 $DDA4 DEFB $FF,$00,$4E,$4E,$4E,$4E,$4E,$4E
 $DDAC DEFB $81,$81,$81,$81,$81,$81,$81,$00
 $DDB4 DEFB $F8,$07,$DE,$2F,$BC,$78,$71,$50
 $DDBC DEFB $1F,$E0,$7B,$F4,$3D,$1E,$EE,$0A
 $DDC4 DEFB $EA,$0E,$DE,$2C,$FD,$78,$E7,$00
 $DDCC DEFB $53,$70,$B9,$34,$DF,$2E,$F3,$00

; Room block graphics
;
; #UDGTABLE
; { #UDGARRAY1,$47,,1;$DDD4-$DE13-8(rbgP) }
; TABLE#
b$DDD4 DEFB $3C,$5E,$52,$5A,$52,$5A,$52,$5A
 $DDDC DEFB $52,$5A,$52,$5E,$5E,$5E,$2C,$2C
 $DDE4 DEFB $2C,$18,$18,$7E,$2C,$18,$18,$00
 $DDEC DEFB $7C,$5C,$5C,$5C,$28,$10,$38,$5C
 $DDF4 DEFB $5A,$31,$31,$00,$3F,$55,$FF,$00
 $DDFC DEFB $D6,$8C,$8C,$00,$FC,$56,$FF,$00
 $DE04 DEFB $31,$5A,$5A,$5A,$5A,$5A,$31,$31
 $DE0C DEFB $8C,$D6,$D6,$D6,$D6,$D6,$8C,$8C

; Room block graphics
;
; #UDGTABLE
; { #UDGARRAY1,$47,,1;$DE14-$DEDB-8(rbgQ) }
; TABLE#
b$DE14 DEFB $FB,$FB,$C3,$FB,$FB,$1B,$FB,$FB
 $DE1C DEFB $F6,$F6,$36,$36,$F6,$F6,$37,$37
 $DE24 DEFB $1F,$1F,$18,$1F,$1F,$18,$DF,$DF
 $DE2C DEFB $71,$DB,$DB,$DB,$79,$18,$DB,$71
 $DE34 DEFB $CB,$6B,$63,$66,$E6,$6C,$6D,$CD
 $DE3C DEFB $3F,$3F,$33,$33,$33,$33,$3F,$3F
 $DE44 DEFB $7D,$7D,$61,$7D,$7D,$61,$61,$61
 $DE4C DEFB $F0,$F0,$80,$F0,$F0,$80,$80,$80
 $DE54 DEFB $00,$63,$77,$7F,$6B,$63,$63,$00
 $DE5C DEFB $00,$7C,$61,$61,$79,$61,$7C,$00
 $DE64 DEFB $00,$F1,$9B,$83,$BB,$9B,$F3,$00
 $DE6C DEFB $00,$E3,$36,$36,$F3,$30,$37,$00
 $DE74 DEFB $00,$DE,$0C,$0C,$8C,$CC,$8C,$00
 $DE7C DEFB $00,$79,$CD,$CD,$CD,$CD,$79,$00
 $DE84 DEFB $00,$F3,$9B,$9B,$F3,$B3,$9B,$00
 $DE8C DEFB $00,$E0,$00,$00,$C0,$00,$E0,$00
 $DE94 DEFB $00,$F1,$4A,$73,$4A,$4A,$F2,$00
 $DE9C DEFB $00,$92,$54,$D8,$54,$52,$52,$00
 $DEA4 DEFB $00,$F7,$84,$E7,$86,$85,$F4,$00
 $DEAC DEFB $00,$18,$A0,$18,$04,$24,$98,$00
 $DEB4 DEFB $FC,$30,$30,$30,$30,$30,$36,$36
 $DEBC DEFB $7C,$66,$66,$7C,$66,$66,$66,$7C
 $DEC4 DEFB $79,$CD,$CD,$CD,$CD,$CD,$CD,$79
 $DECC DEFB $9B,$DB,$FB,$BB,$9B,$9B,$9B,$9B
 $DED4 DEFB $E0,$00,$00,$C0,$00,$00,$00,$E0

; Room block graphics
;
; #UDGTABLE
; { #UDGARRAY1,$47,,1;$DEDC-$DF43-8(rbgR) }
; TABLE#
b$DEDC DEFB $7C,$66,$66,$7C,$66,$66,$66,$7C
 $DEE4 DEFB $CD,$CC,$CC,$CC,$CC,$CC,$CC,$78
 $DEEC DEFB $F9,$63,$63,$63,$63,$63,$63,$61
 $DEF4 DEFB $E6,$36,$06,$07,$06,$06,$36,$E6
 $DEFC DEFB $6F,$6C,$6C,$EF,$6C,$6C,$6C,$6F
 $DF04 DEFB $BE,$33,$33,$3E,$38,$3C,$36,$B3
 $DF0C DEFB $33,$33,$36,$7C,$78,$6C,$C6,$C6
 $DF14 DEFB $3E,$3C,$30,$7D,$79,$61,$FB,$F3
 $DF1C DEFB $61,$F7,$FF,$DB,$86,$86,$0C,$0C
 $DF24 DEFB $9E,$BF,$33,$60,$60,$66,$7E,$3C
 $DF2C DEFB $3C,$7E,$66,$E6,$CC,$CC,$FC,$78
 $DF34 DEFB $00,$7E,$7E,$1C,$38,$7E,$7E,$00
 $DF3C DEFB $00,$3C,$7E,$66,$66,$7E,$3C,$00

; Room block graphics
;
; #UDGTABLE
; { #UDGARRAY1,$47,,1;$DF44-$DFAC-8(rbgS) }
; TABLE#
b$DF44 DEFB $8F,$8F,$8F,$47,$47,$23,$18,$07
 $DF4C DEFB $FF,$FF,$FF,$FE,$FE,$FC,$F8,$E0
 $DF54 DEFB $00,$00,$00,$07,$18,$23,$47,$47
 $DF5C DEFB $2C,$2C,$58,$B8,$70,$EC,$DE,$DE
 $DF64 DEFB $18,$18,$18,$18,$18,$18,$18,$18
 $DF6C DEFB $00,$00,$00,$FF,$FF,$00,$00,$00
 $DF74 DEFB $00,$00,$00,$0F,$1F,$18,$18,$18
 $DF7C DEFB $00,$00,$00,$F0,$F8,$18,$18,$18
 $DF84 DEFB $18,$18,$18,$F8,$F0,$00,$00,$00
 $DF8C DEFB $18,$18,$18,$1F,$0F,$00,$00,$00
 $DF94 DEFB $30,$58,$D8,$D8,$8D,$8D,$0D,$06
 $DF9C DEFB $3C,$0E,$01,$0F,$7E,$F0,$80,$70
 $DFA4 DEFB $36,$68,$36,$68,$36,$68,$36,$68

; Room block graphics
;
; #UDGTABLE
; { #UDGARRAY1,$47,,1;$DFAC-$DFCB-8(rbgT) }
; TABLE#
b$DFAC DEFB $0E,$07,$13,$38,$6D,$D9,$B3,$E3
 $DFB4 DEFB $2D,$35,$BD,$01,$FD,$AD,$55,$FD
 $DFBC DEFB $00,$90,$38,$6C,$36,$9B,$CE,$C4
 $DFC4 DEFB $07,$33,$39,$2D,$34,$2C,$B4,$BD

; Room block graphics
;
; #UDGTABLE
; { #UDGARRAY1,$47,,1;$DFCC-$DFDB-8(rbgU) }
; TABLE#
b$DFCC DEFB $FF,$7E,$00,$00,$00,$00,$00,$00
 $DFD4 DEFB $00,$00,$00,$00,$00,$00,$00,$7E

; Room block graphics
;
; When printing a string, this is set to the base address
; so that ASCII characters from #N$20 upwards point to the
; correct place in #R$E0DC.
;
; .
;
; #UDGTABLE
; { #UDGARRAY1,$47,,1;$DFDC-$DFEB-8(rbgV) }
; TABLE#
b$DFDC DEFB $00,$80,$80,$80,$80,$80,$80,$00
 $DFE4 DEFB $01,$03,$03,$03,$03,$03,$03,$01

; Room block graphics
;
; #UDGTABLE
; { #UDGARRAY1,$47,,1;$DFEC-$E06B-8(rbgW) }
; TABLE#
b$DFEC DEFB $00,$FE,$FE,$00,$AA,$FF,$55,$00
 $DFF4 DEFB $00,$00,$77,$EE,$EE,$77,$00,$00
 $DFFC DEFB $00,$00,$7F,$FB,$FB,$7F,$00,$00
 $E004 DEFB $00,$00,$FE,$DF,$DF,$FE,$00,$00
 $E00C DEFB $00,$00,$EE,$77,$77,$EE,$00,$00
 $E014 DEFB $00,$FE,$FE,$00,$0F,$0F,$00,$00
 $E01C DEFB $00,$00,$FE,$3E,$C0,$C0,$00,$00
 $E024 DEFB $00,$00,$00,$FF,$55,$AA,$FF,$00
 $E02C DEFB $FF,$ED,$6D,$76,$76,$66,$72,$20
 $E034 DEFB $00,$FF,$00,$FF,$FF,$FF,$00,$00
 $E03C DEFB $7E,$7F,$7F,$7F,$7F,$4F,$B7,$FF
 $E044 DEFB $FE,$7E,$9D,$E1,$FC,$F2,$ED,$FF
 $E04C DEFB $00,$03,$0B,$1B,$3B,$7B,$FC,$FE
 $E054 DEFB $00,$60,$68,$6C,$6E,$6E,$1F,$3F
 $E05C DEFB $18,$A4,$BE,$AE,$B6,$BC,$00,$18
 $E064 DEFB $00,$44,$44,$66,$66,$99,$FF,$00

; Room block graphics
;
; #UDGTABLE
; { #UDGARRAY1,$47,,1;$E06C-$E0DB-8(rbgX) }
; TABLE#
b$E06C DEFB $FF,$AA,$55,$FF,$00,$00,$00,$00
 $E074 DEFB $FF,$FF,$FF,$00,$00,$00,$00,$00
 $E07C DEFB $FF,$FF,$FF,$00,$3C,$18,$18,$18
 $E084 DEFB $FF,$AA,$54,$F8,$00,$00,$00,$00
 $E08C DEFB $18,$18,$18,$18,$18,$18,$18,$18
 $E094 DEFB $00,$80,$C0,$E0,$70,$38,$1C,$0E
 $E09C DEFB $17,$1B,$1D,$18,$18,$18,$18,$18
 $E0A4 DEFB $07,$03,$01,$00,$00,$00,$00,$00
 $E0AC DEFB $00,$01,$03,$07,$0E,$1C,$38,$70
 $E0B4 DEFB $FF,$55,$2A,$1F,$00,$00,$00,$00
 $E0BC DEFB $E8,$D8,$B8,$18,$18,$18,$18,$18
 $E0C4 DEFB $E0,$C0,$80,$00,$00,$00,$00,$00
 $E0CC DEFB $FF,$55,$AA,$FF,$00,$00,$00,$00
 $E0D4 DEFB $6C,$BE,$BE,$BE,$5C,$5C,$38,$10

; Room block graphics (character set)
;
; #UDGTABLE
; { #UDGARRAY1,$47,,1;$E0DC-$E2FB-8(rbgY) }
; TABLE#
b$E0DC DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E0E4 DEFB $00,$30,$30,$30,$30,$00,$30,$30
 $E0EC DEFB $00,$66,$66,$66,$00,$00,$00,$00
 $E0F4 DEFB $00,$68,$68,$FE,$68,$FE,$68,$68
 $E0FC DEFB $00,$18,$FE,$D8,$FE,$16,$FE,$18
 $E104 DEFB $00,$E6,$E6,$0E,$7C,$E0,$CE,$CE
 $E10C DEFB $00,$38,$6C,$60,$F0,$60,$60,$7C
 $E114 DEFB $00,$18,$18,$18,$30,$00,$00,$00
 $E11C DEFB $00,$0C,$18,$30,$30,$30,$18,$0C
 $E124 DEFB $00,$30,$18,$0C,$0C,$0C,$18,$30
 $E12C DEFB $00,$10,$54,$38,$FE,$38,$54,$10
 $E134 DEFB $00,$38,$38,$38,$FE,$38,$38,$38
 $E13C DEFB $00,$00,$00,$00,$18,$18,$18,$30
 $E144 DEFB $00,$00,$00,$7E,$7E,$00,$00,$00
 $E14C DEFB $00,$00,$00,$00,$00,$00,$38,$38
 $E154 DEFB $00,$06,$0E,$1C,$38,$70,$E0,$C0
 $E15C DEFB $00,$3C,$66,$66,$66,$66,$66,$3C
 $E164 DEFB $00,$1C,$3C,$2C,$0C,$0C,$0C,$3E
 $E16C DEFB $00,$3C,$66,$06,$0C,$18,$32,$7E
 $E174 DEFB $00,$3C,$66,$06,$1C,$06,$66,$3C
 $E17C DEFB $00,$0C,$1C,$2C,$4C,$7E,$0C,$0C
 $E184 DEFB $00,$7E,$60,$7C,$06,$06,$66,$3C
 $E18C DEFB $00,$0C,$18,$30,$7C,$66,$66,$3C
 $E194 DEFB $00,$7E,$06,$0C,$18,$30,$30,$30
 $E19C DEFB $00,$3C,$66,$66,$3C,$66,$66,$3C
 $E1A4 DEFB $00,$3C,$66,$66,$3E,$0C,$18,$30
 $E1AC DEFB $00,$00,$30,$30,$00,$38,$38,$00
 $E1B4 DEFB $00,$00,$00,$18,$18,$00,$18,$38
 $E1BC DEFB $00,$1E,$3E,$60,$C0,$60,$3E,$1E
 $E1C4 DEFB $00,$00,$7C,$7C,$00,$7C,$7C,$00
 $E1CC DEFB $00,$F0,$F8,$0C,$06,$0C,$F8,$F0
 $E1D4 DEFB $00,$FE,$C2,$C2,$1E,$18,$00,$18
 $E1DC DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E1E4 DEFB $00,$3C,$66,$66,$7E,$66,$66,$66
 $E1EC DEFB $00,$7C,$66,$66,$7C,$66,$66,$7C
 $E1F4 DEFB $00,$3C,$66,$60,$60,$60,$66,$3C
 $E1FC DEFB $00,$78,$6C,$66,$66,$66,$6C,$78
 $E204 DEFB $00,$7E,$60,$60,$78,$60,$60,$7E
 $E20C DEFB $00,$7C,$60,$60,$78,$60,$60,$60
 $E214 DEFB $00,$3C,$66,$60,$60,$6E,$66,$3C
 $E21C DEFB $00,$66,$66,$66,$7E,$66,$66,$66
 $E224 DEFB $00,$3C,$18,$18,$18,$18,$18,$3C
 $E22C DEFB $00,$3E,$0C,$0C,$0C,$6C,$6C,$38
 $E234 DEFB $00,$66,$6C,$78,$70,$78,$6C,$66
 $E23C DEFB $00,$60,$60,$60,$60,$60,$60,$7E
 $E244 DEFB $00,$66,$7E,$7E,$66,$66,$66,$66
 $E24C DEFB $00,$66,$66,$76,$7E,$6E,$66,$66
 $E254 DEFB $00,$3C,$66,$66,$66,$66,$66,$3C
 $E25C DEFB $00,$7C,$66,$66,$7C,$60,$60,$60
 $E264 DEFB $00,$3C,$66,$66,$66,$66,$6C,$36
 $E26C DEFB $00,$7C,$66,$66,$7C,$68,$6C,$66
 $E274 DEFB $00,$3C,$62,$60,$3C,$06,$46,$3C
 $E27C DEFB $00,$7E,$18,$18,$18,$18,$18,$18
 $E284 DEFB $00,$66,$66,$66,$66,$66,$66,$3C
 $E28C DEFB $00,$66,$66,$66,$66,$66,$3C,$18
 $E294 DEFB $00,$66,$66,$66,$66,$7E,$7E,$66
 $E29C DEFB $00,$66,$66,$3C,$18,$3C,$66,$66
 $E2A4 DEFB $00,$66,$66,$3C,$18,$18,$18,$18
 $E2AC DEFB $00,$7E,$06,$0C,$18,$30,$60,$7E
 $E2B4 DEFB $00,$00,$FF,$FF,$FF,$FF,$00,$00
 $E2BC DEFB $00,$E0,$18,$E6,$F9,$FE,$F8,$E0
 $E2C4 DEFB $00,$07,$1F,$7F,$9F,$67,$18,$07
 $E2CC DEFB $00,$C0,$00,$C0,$C0,$C0,$C0,$C0
 $E2D4 DEFB $00,$E0,$10,$E0,$F0,$F0,$F0,$E0
 $E2DC DEFB $00,$E0,$18,$E4,$F8,$FC,$F8,$E0
 $E2E4 DEFB $00,$00,$00,$40,$80,$40,$00,$00
 $E2EC DEFB $00,$00,$10,$70,$90,$60,$10,$00
 $E2F4 DEFB $00,$04,$1C,$7C,$9C,$64,$18,$04

; Play a footstep sound effect
;
; Used by the routine at #R$B288.
;
; IY Pointer to character data (#R$BC67 - #N$BC6B)
c$E2FC LD A,(IY+$00) ; Get the character's frame count.
 $E2FF OR A          ; Is it zero?
 $E300 JR Z,$E30B    ; Jump forward if so.
 $E302 CP $03        ; Is it 3?
 $E304 JR Z,$E30B    ; Jump forward if so.
 $E306 XOR A         ; { Reset the "footstep triggered" flag and return.
 $E307 LD (IY-$19),A ;
 $E30A RET           ; }
*$E30B LD A,(IY-$19) ; Get the "footstep triggered" flag.
 $E30E OR A          ; Is it zero?
 $E30F RET NZ        ; Return if it isn't.
 $E310 LD A,$01      ; Otherwise set the "foostep triggered" flag.
 $E312 LD (IY-$19),A ;
; This entry point is used by the routine at #R$B1A6.
*$E315 LD A,($B951)  ; Get the current room. (#R$B951)
 $E318 CP (IY+$0F)   ; Is the character in this room? (#R$BC76)
 $E31B RET NZ        ; Return if not.
; The character is in the room, so make the footstep noise.
 $E31C LD BC,$0701   ; Set the pitch and "descending" length.
 $E31F LD DE,$0F01   ; Set the "static" and "ascending" lengths.
 $E322 LD HL,$0404   ; Set the "descending" and "ascending" values.
 $E325 CALL $E3D3    ; { Play the sound and return.
 $E328 RET           ; }

; Check for collision detection
;
; Used by the routines at #R$ED8A, #R$F057, #R$F10E, #R$F24B, #R$F277, #R$F309,
; #R$F334, #R$F37D, #R$F3AB, #R$F409, #R$F49D, #R$F4D3, #R$F503, #R$F5F1,
; #R$F674, #R$F6EC and #R$F746.
;
; IY Pointer to character buffer
c$E329 LD A,($A838)  ; Get the x co-ordinate in the scratch buffer. (#R$A838)
 $E32C SUB (IY+$05)  ; { Is it close enough to this player?
 $E32F SUB $0D       ;
 $E331 CP $E6        ; }
 $E333 RET C         ; Return if it isn't.
 $E334 LD A,($A839)  ; Get the y co-ordinate in the scratch buffer.
 $E337 SUB (IY+$0A)  ; { Is it close enough to this player?
 $E33A SUB $1C       ;
 $E33C CP $D6        ; }
 $E33E RET C         ; Return if it isn't.
; The character has collided with something. Decrease endurance.
; The amount to decrease by is set in #R$F26E, set up by the various room specific routines.
; (Herbert is 2. The shark in the sewer is 64!)
;
; This entry point is used by the routines at #R$F773 and #R$F8B9,
; which reduce endurance by other means.
*$E33F LD A,($B55F)    ; { Is the current player computer controlled?
 $E342 OR A            ; }
 $E343 RET NZ          ; Return if so.
; The current character is human controlled, so decrease endurance.
 $E344 EXX             ; Swap main registers.
 $E345 LD BC,$640A     ; { Play the 'decrease endurance' sound effect.
 $E348 LD DE,$0101     ;
 $E34B LD HL,$6401     ;
 $E34E CALL $E3D3      ; }
 $E351 LD A,($F26E)    ; Get the amount of endurance to decrease by.
 $E354 LD B,A          ; Put this in #REGb.
 $E355 LD A,(IY+$14)   ; { Decrease the character's endurance by
 $E358 SUB B           ; this amount. 
 $E359 LD (IY+$14),A   ; }
 $E35C JR Z,$E362      ; { If the endurance is zero or less, a life is lost.
 $E35E JR C,$E362      ; }
 $E360 JR $E36C        ; Otherwise jump forward.
; The character has run out of endurance, so lose a life.
*$E362 LD (IY+$14),$80 ; Put the endurance back up to maximum. (#N$80)
 $E366 DEC (IY+$2D)    ; Decrease the number of lives.
 $E369 JP Z,$B451      ; If no lives are left, signal the game is over.
*$E36C EXX             ; Swap main registers. Control continues to #R$E36D.

; Update endurance and lives display
;
; Used by the routines at #R$E33F, #R$E3FD and #R$F814.
c$E36D EXX           ; Swap main registers.
; First, draw the lives.
 $E36E LD C,$46      ; Set the attribute to be bright yellow on black.
 $E370 LD HL,$DFDC   ; Point #REGhl at the UDGs for the endurance display.
 $E373 LD ($B7E9),HL ; Change the routine at #R$B7BA to use these UDGs.
 $E376 LD DE,$021C   ; Set the co-ordinates to #N$1C , 02.
 $E379 LD L,(IY+$2D) ; Put the number of lives in #REGl.
 $E37C DEC L         ; Make this 0 based.
 $E37D LD B,$02      ; Maximum of two lives to draw.
*$E37F LD A,L        ; { Set the zero flag if this is the last life,
 $E380 OR A          ; ie: nothing to draw. }
 $E381 LD A,$1F      ; Set the initial position to #N$1F.
 $E383 JR NZ,$E386   ; Jump forward if there are no lives left to draw.
 $E385 INC A         ; Increment the current position.
*$E386 CALL $B7BA    ; Draw the graphic.
 $E389 INC E         ; { Move forward two columns.
 $E38A INC E         ; }
 $E38B CP $20        ; Have we reached the last column?
 $E38D JR Z,$E390    ; Jump forward if we have.
 $E38F DEC L         ; { Otherwise decrement the number of lives left to draw
*$E390 DJNZ $E37F    ; and loop back to draw another one. }
; The lives are all drawn, now draw the endurance.
 $E392 LD C,$43      ; Set the attribute to be bright magenta on black.
 $E394 LD DE,$0310   ; Set the co-ordinates to #N$10 , 03.
 $E397 LD L,$5C      ;
 $E399 LD B,(IY+$14) ; Put the endurance value in #REGb.
*$E39C LD A,B        ; Get the amount of endurance left to draw.
 $E39D SUB $08       ; 
 $E39F JR C,$E3BC    ;
 $E3A1 LD B,A        ;
 $E3A2 LD A,L        ;
 $E3A3 CALL $B7BA    ; Draw the graphic.
 $E3A6 XOR $01       ;
 $E3A8 LD L,A        ;
 $E3A9 INC E         ;
 $E3AA LD A,B        ;
 $E3AB OR A          ;
 $E3AC JR NZ,$E39C   ;
*$E3AE BIT 5,E       ;
 $E3B0 JR Z,$E3B4    ;
 $E3B2 EXX           ;
 $E3B3 RET           ;
*$E3B4 LD A,$20      ;
 $E3B6 CALL $B7BA    ; Draw the graphic.
 $E3B9 INC E         ;
 $E3BA JR $E3AE      ;
*$E3BC ADD A,$08     ;
 $E3BE SRL A         ;
 $E3C0 LD B,A        ;
 $E3C1 LD A,L        ;
 $E3C2 CP $5C        ;
 $E3C4 JR NZ,$E3CA   ;
 $E3C6 LD A,$5D      ;
 $E3C8 JR $E3CC      ;
*$E3CA LD A,$60      ;
*$E3CC ADD A,B       ;
 $E3CD CALL $B7BA    ; Draw the graphic.
 $E3D0 INC E         ;
 $E3D1 JR $E3AE      ;

; Generate a sound effect
;
; Used by the routines at #R$AA7F, #R$E2FC, #R$E33F, #R$F814, #R$F9F5 and
; #R$FAE7.
;
; B pitch
; C first segment time (descending)
; D second segment time (static)
; E third segment time (ascending)
; H pitch to drop on first segment
; L pitch to raise on third segment
;
; The sound effect routine uses a basic pitch in #REGb, plus three pitch segments - descending, static and ascending
; for each component of sound. For the first segment, the pitch is incrementally lowered by #REGh,
; for the second it is unchanged, while for the third, it is incrementally raised by #REGl.
c$E3D3 LD A,B        ; Get the default pitch
 $E3D4 SUB H         ; Subtract the pitch to drop for the first part
 $E3D5 LD B,A        ; { Play one wave of sound at that pitch.
 $E3D6 CALL $E3EC    ; }
 $E3D9 DEC C         ; { Loop while there is more to play for
 $E3DA JR NZ,$E3D3   ; the first duration. }
*$E3DC CALL $E3EC    ; Play one wave of sound.
 $E3DF DEC D         ; { Loop while there is more to play for
 $E3E0 JR NZ,$E3DC   ; the second duration. }
*$E3E2 LD A,B        ; { Raise the pitch by the required amount
 $E3E3 ADD A,L       ; for the third part.
 $E3E4 LD B,A        ; }
 $E3E5 CALL $E3EC    ; Play one wave of sound.
 $E3E8 DEC E         ; { Loop while there is more to play
 $E3E9 JR NZ,$E3E2   ; for the third duration. }
 $E3EB RET           ; Return.

; Generate one wave cycle in a sound effect
;
; Used by the routine at #R$E3D3.
;
; B pitch
c$E3EC LD A,$10      ; { Switch the speaker on.
 $E3EE OUT ($FE),A   ; }
 $E3F0 PUSH BC       ; Remember the pitch value.
*$E3F1 DJNZ $E3F1    ; Wait a while with the speaker switched on,
                     ; to generate part of a sound wave.
 $E3F3 POP BC        ; Restore the pitch value.
 $E3F4 LD A,$00      ; { Switch the speaker off.
 $E3F6 OUT ($FE),A   ; }
 $E3F8 PUSH BC       ; Remember the pitch value.
*$E3F9 DJNZ $E3F9    ; Wait a while with the speaker switched on,
                     ; to generate part of a sound wave.
 $E3FB POP BC        ; { Restore the pitch value and return.
 $E3FC RET           ; }

; Do a full refresh of the top status bar
;
; Used by the routines at #R$8155, #R$8184 and #R$E79B.
c$E3FD CALL $B931    ; Clear the top status bar.
 $E400 LD HL,$7E3F   ; Point #REGhl at the status bar text. (#R$7E3F)
 $E403 LD DE,$0010   ; Set the position.
 $E406 CALL $B84B    ; Draw it.
 $E409 LD H,$7C      ; { Point #REGhl at the right character name (#R$7C00)
 $E40B LD L,(IY-$23) ; based on their ID. }
 $E40E LD C,$45      ; Set the attribute to bright cyan on black.
 $E410 LD DE,$001B   ; Set the position.
 $E413 CALL $B84B    ; Draw the main character display.
 $E416 CALL $E36D    ; Draw endurance.
 $E419 CALL $E420    ; Draw the inventory.
 $E41C RET           ; Return.

; Print a character's inventory
;
; Used by the routines at #R$AA30, #R$EB0F and #R$EC4A.
c$E41D CALL $E77A    ;
; This entry point is used by the routine at #R$E3FD.
*$E420 LD A,(IY+$50) ; Put the ID of the first item held in #REGa.
 $E423 ADD A,A       ; Double it to get a word offset.
 $E424 LD E,A        ; { Put this in #REGde.
 $E425 LD D,$00      ; }
 $E427 LD HL,$E728   ; { Add the base address of the strings lookup table. (#R$E728)
 $E42A ADD HL,DE     ; }
 $E42B LD E,(HL)     ; { Put the actual address of the string in #REGde.
 $E42C INC HL        ;
 $E42D LD D,(HL)     ; }
 $E42E LD A,(IY+$55) ; Put the ID of the second item held in #REGa.
 $E431 ADD A,A       ; Double it to get a word offset.
 $E432 LD C,A        ; { Put this in #REGbc.
 $E433 LD B,$00      ; }
 $E435 LD HL,$E728   ; { Add the base address of the strings lookup table. (#R$E728)
 $E438 ADD HL,BC     ; }
 $E439 LD C,(HL)     ; { Put the actual address of the string in #REGbc.
 $E43A INC HL        ;
 $E43B LD B,(HL)     ; }
 $E43C PUSH BC       ; Remember this value.
 $E43D EX DE,HL      ; Swap #REGde and #REGhl.
 $E43E LD DE,$DFDC   ; { Set the drawing routine at #R$B7BA to use the character set (#R$DFDC) as a base address.
 $E441 LD ($B7E9),DE ; }
 $E445 LD DE,$0003   ; Start at position 3,0.
 $E448 LD C,$43      ; Set bright magenta on black attribute.
 $E44A CALL $E468    ; Print the item description
 $E44D POP HL        ; Restore the address of the second item's description in #REGhl.
 $E44E LD DE,$0203   ; Start at position 3,2.
 $E451 LD C,$45      ; Set bright cyan on black attribute.
 $E453 CALL $E468    ; Print the item description
 $E456 LD A,(IY+$50) ; Put the ID of the first item held in #REGa.
 $E459 LD DE,$0000   ; Set position to 0,0
 $E45C CALL $B77B    ; Draw the item's graphic.
 $E45F LD A,(IY+$55) ; Put the ID of the second item held in #REGa.
 $E462 LD D,$02      ; Set position to 0,2
 $E464 CALL $B77B    ; Draw the item's graphic.
 $E467 RET           ; Return.

; Display an item in the inventory.
;
; Used by the routine in #R$E41D.
; 
; HL Pointer to the item data
; DE Location to print
;
; Print the description of an item. If the control code F4+flag
; is found, use the first or the second description depending on
; whether or not that flag is set.
c$E468 CALL $B84B    ; Print the string up to the first #N$FF marker.
 $E46B LD C,$07      ; 
 $E46D LD A,(HL)     ; Get the next byte.
 $E46E CP $F4        ; Is it a flag specifier?
 $E470 RET NZ        ; Return if it isn't.
; This item's description is dependent on a flag.
 $E471 INC HL        ; { Put the flag in #REGa.
 $E472 LD A,(HL)     ; }
 $E473 INC HL        ; Point to the next place in the buffer.
 $E474 CALL $EC1D    ; Is the flag set?
 $E477 JP NZ,$B84B   ; Jump forward if it is to use the first description.
 $E47A PUSH BC       ; { Otherwise search for the next instance of
 $E47B LD B,$FF      ; #N$FF, to point at the second description.
 $E47D LD A,B        ;
 $E47E CPIR          ;
 $E480 POP BC        ; }
 $E481 JP $B84B      ; Jump to print the flag-specific description.

; THE PLUNGER
t$E484 DEFM "THE PLUNGER"
 $E48F DEFB $FF

; THE LETTER\n"A"
t$E490 DEFM "THE LETTER"
 $E49A DEFB $BE
 $E49B DEFB $01
 $E49C DEFM "A"
 $E49D DEFB $FF

; BOOK TWO
t$E49E DEFM "BOOK TWO"
 $E4A6 DEFB $FF

; THE SAND
t$E4A7 DEFM "THE SAND"
 $E4AF DEFB $FF

; THE BATTERY\n(CHARGED|FLAT)
t$E4B0 DEFM "THE BATTERY"
 $E4BB DEFB $BD
 $E4BC DEFB $01
 $E4BD DEFB $FF
 $E4BE DEFB $F4
 $E4BF DEFB $06
 $E4C0 DEFM "CHARGED"
 $E4C7 DEFB $FF
 $E4C8 DEFM "FLAT"
 $E4CC DEFB $FF

; THE LETTER\n"K"
t$E4CD DEFM "THE LETTER"
 $E4D7 DEFB $BE
 $E4D8 DEFB $01
 $E4D9 DEFM "K"
 $E4DA DEFB $FF

; THE CEMENT
t$E4DB DEFM "THE CEMENT"
 $E4E5 DEFB $FF

; BOOK THREE
t$E4E6 DEFM "BOOK THREE"
 $E4F0 DEFB $FF

; THE TROWEL
t$E4F1 DEFM "THE TROWEL"
 $E4FB DEFB $FF

; THE MATCHES
t$E4FC DEFM "THE MATCHES"
 $E507 DEFB $FF

; THE CRACKED\nINSULATOR
t$E508 DEFM "THE CRACKED"
 $E513 DEFB $BD
 $E514 DEFB $01
 $E515 DEFM "INSULATOR"
 $E51E DEFB $FF

; BOOK ONE
t$E51F DEFM "BOOK ONE"
 $E527 DEFB $FF

; THE MONKEY\nNUTS
t$E528 DEFM "THE MONKEY"
 $E532 DEFB $BE
 $E533 DEFB $01
 $E534 DEFM "NUTS"
 $E538 DEFB $FF

; THE MONEY
t$E539 DEFM "THE MONEY"
 $E542 DEFB $FF

; SUPERGLUE
t$E543 DEFM "SUPERGLUE"
 $E54C DEFB $FF

; THE CHEWING\nGUM
t$E54D DEFM "THE CHEWING"
 $E558 DEFB $BD
 $E559 DEFB $01
 $E55A DEFM "GUM"
 $E55D DEFB $FF

; THE BUCKET\n(FULL|EMPTY)
t$E55E DEFM "THE BUCKET"
 $E568 DEFB $BE
 $E569 DEFB $01
 $E56A DEFB $FF
 $E56B DEFB $F4
 $E56C DEFB $04
 $E56D DEFM "FULL"
 $E571 DEFB $FF
 $E572 DEFM "EMPTY"
 $E577 DEFB $FF

; THE JUMP LEADS
t$E578 DEFM "THE JUMP"
 $E580 DEFB $C0
 $E581 DEFB $01
 $E582 DEFM "LEADS"
 $E587 DEFB $FF

; THE BUNSEN\nBURNER
t$E588 DEFM "THE BUNSEN"
 $E592 DEFB $BE
 $E593 DEFB $01
 $E594 DEFM "BURNER"
 $E59A DEFB $FF

; THE LETTER\n"B"
t$E59B DEFM "THE LETTER"
 $E5A5 DEFB $BE
 $E5A6 DEFB $01
 $E5A7 DEFM "B"
 $E5A8 DEFB $FF

; GAS MASK
t$E5A9 DEFM "GAS MASK"
 $E5B1 DEFB $FF

; THE PARCEL\n(STAMPED|UNSTAMPED)
t$E5B2 DEFM "THE PARCEL"
 $E5BC DEFB $BE
 $E5BD DEFB $01
 $E5BE DEFB $FF
 $E5BF DEFB $F4
 $E5C0 DEFB $02
 $E5C1 DEFM "STAMPED"
 $E5C8 DEFB $FF
 $E5C9 DEFM "UNSTAMPED"
 $E5D2 DEFB $FF

; THE FUSE\n(REWIRED|BLOWN)
t$E5D3 DEFM "THE FUSE"
 $E5DB DEFB $C0
 $E5DC DEFB $01
 $E5DD DEFB $FF
 $E5DE DEFB $F4
 $E5DF DEFB $01
 $E5E0 DEFM "REWIRED"
 $E5E7 DEFB $FF
 $E5E8 DEFM "BLOWN"
 $E5ED DEFB $FF

; THE MEAT
t$E5EE DEFM "THE MEAT"
 $E5F6 DEFB $FF

; THE MONKEY\nWRENCH
t$E5F7 DEFM "THE MONKEY"
 $E601 DEFB $BE
 $E602 DEFB $01
 $E603 DEFM "WRENCH"
 $E609 DEFB $FF

; SCREWDRIVER
t$E60A DEFM "SCREWDRIVER"
 $E615 DEFB $FF

; THE LETTER\n\"E"
t$E616 DEFM "THE LETTER"
 $E620 DEFB $BE
 $E621 DEFB $01
 $E622 DEFM "E"
 $E623 DEFB $FF

; THE HOOK\n(WORKING|BROKEN)
t$E624 DEFM "THE HOOK"
 $E62C DEFB $C0
 $E62D DEFB $01
 $E62E DEFB $FF
 $E62F DEFB $F4
 $E630 DEFB $03
 $E631 DEFM "WORKING"
 $E638 DEFB $FF
 $E639 DEFM "BROKEN"
 $E63F DEFB $FF

; THE PATCH
t$E640 DEFM "THE PATCH"
 $E649 DEFB $FF

; THE PIPE\n(PATCHED|LEAKING)
t$E64A DEFM "THE PIPE"
 $E652 DEFB $C0
 $E653 DEFB $01
 $E654 DEFB $FF
 $E655 DEFB $F4
 $E656 DEFB $05
 $E657 DEFM "PATCHED"
 $E65E DEFB $FF
 $E65F DEFM "LEAKING"
 $E666 DEFB $FF

; THE LETTER\n"R"
t$E667 DEFM "THE LETTER"
 $E671 DEFB $BE
 $E672 DEFB $01
 $E673 DEFM "R"
 $E674 DEFB $FF

; THE OIL\nCAN(FULL|EMPTY)
t$E675 DEFM "THE OIL"
 $E67C DEFB $C1
 $E67D DEFB $01
 $E67E DEFM "CAN "
 $E682 DEFB $FF
 $E683 DEFB $F4
 $E684 DEFB $07
 $E685 DEFM "FULL"
 $E689 DEFB $FF
 $E68A DEFM "EMPTY"
 $E68F DEFB $FF

; THE FUSE\nWIRE
t$E690 DEFM "THE FUSE"
 $E698 DEFB $C0
 $E699 DEFB $01
 $E69A DEFM "WIRE"
 $E69E DEFB $FF

; THE GOOD\nINSULATOR
t$E69F DEFM "THE GOOD"
 $E6A7 DEFB $C0
 $E6A8 DEFB $01
 $E6A9 DEFM "INSULATOR"
 $E6B2 DEFB $FF

; THE BOTTLE\n(FULL|EMPTY)
t$E6B3 DEFM "THE BOTTLE"
 $E6BD DEFB $BE
 $E6BE DEFB $01
 $E6BF DEFB $FF
 $E6C0 DEFB $F4
 $E6C1 DEFB $00
 $E6C2 DEFM "FULL"
 $E6C6 DEFB $FF
 $E6C7 DEFM "EMPTY"
 $E6CC DEFB $FF

; THE RED\nHERRING
t$E6CD DEFM "THE RED"
 $E6D4 DEFB $C1
 $E6D5 DEFB $01
 $E6D6 DEFM "HERRING"
 $E6DD DEFB $FF

; THE TEST\n\TUBE
t$E6DE DEFM "THE TEST"
 $E6E6 DEFB $C0
 $E6E7 DEFB $01
 $E6E8 DEFM "TUBE"
 $E6EC DEFB $FF

; THE CAN OF\nBEANS
t$E6ED DEFM "THE CAN OF"
 $E6F7 DEFB $BE
 $E6F8 DEFB $01
 $E6F9 DEFM "BEANS"
 $E6FE DEFB $FF

; THE RUBBER\nSTAMP
t$E6FF DEFM "THE RUBBER"
 $E709 DEFB $BE
 $E70A DEFB $01
 $E70B DEFM "STAMP"
 $E710 DEFB $FF

; THE PLIERS
t$E711 DEFM "THE PLIERS"
 $E71B DEFB $FF

; THE WHISTLE
t$E71C DEFM "THE WHISTLE"
 $E727 DEFB $FF

; Lookup table for strings
w$E728 DEFW $E484
 $E72A DEFW $E490
 $E72C DEFW $E49E
 $E72E DEFW $E4A7
 $E730 DEFW $E4B0
 $E732 DEFW $E4CD
 $E734 DEFW $E4DB
 $E736 DEFW $E4E6
 $E738 DEFW $E4F1
 $E73A DEFW $E4FC
 $E73C DEFW $E508
 $E73E DEFW $E51F
 $E740 DEFW $E528
 $E742 DEFW $E539
 $E744 DEFW $E543
 $E746 DEFW $E54D
 $E748 DEFW $E55E
 $E74A DEFW $E578
 $E74C DEFW $E588
 $E74E DEFW $E59B
 $E750 DEFW $E5A9
 $E752 DEFW $E5B2
 $E754 DEFW $E5D3
 $E756 DEFW $E5EE
 $E758 DEFW $E5F7
 $E75A DEFW $E60A
 $E75C DEFW $E616
 $E75E DEFW $E624
 $E760 DEFW $E640
 $E762 DEFW $E64A
 $E764 DEFW $E667
 $E766 DEFW $E675
 $E768 DEFW $E690
 $E76A DEFW $E69F
 $E76C DEFW $E6B3
 $E76E DEFW $E6CD
 $E770 DEFW $E6DE
 $E772 DEFW $E6ED
 $E774 DEFW $E6FF
 $E776 DEFW $E711
 $E778 DEFW $E71C

; Clear the inventory display, so new text can go on
;
; Used by the routine at #R$E41D.
c$E77A PUSH HL       ; { Store main registers.
 $E77B PUSH BC       ;
 $E77C PUSH DE       ; }
 $E77D LD IX,$81F8   ; Point #REGix at the screen offset table.
 $E781 LD C,$20      ; #N$20 rows to update.
*$E783 LD L,(IX+$00) ; { Get the next screen address in #REGhl.
 $E786 LD H,(IX+$01) ; }
 $E789 LD B,$0F      ; #N$0F columns per row to update.
*$E78B LD (HL),$00   ; Clear all bits.
 $E78D INC HL        ; Move to the next column.
 $E78E DJNZ $E78B    ; Loop until all columns are done.
 $E790 INC IX        ; { Move to the next position in the offset table.
 $E792 INC IX        ; }
 $E794 DEC C         ; { Loop until all rows are updated.
 $E795 JR NZ,$E783   ; }
 $E797 POP DE        ; { Restore main registers and return.
 $E798 POP BC        ;
 $E799 POP HL        ;
 $E79A RET           ; }

; See if a player wants to swap character, and do so if they can
;
; Used by the routine at #R$8184.
c$E79B LD A,$F7        ; { Get keyboard input from 1 - 5.
 $E79D IN A,($FE)      ; }
 $E79F OR $E0          ; Set the top three bits, to ensure
                       ; all bits are set if no key is pressed.
 $E7A1 XOR $FF         ; Were no keys pressed?
 $E7A3 RET Z           ; Return if so.
; A key was pressed. Work out what to do.
 $E7A4 LD B,(IY+$0F)   ; Put the current character's room (#R$BC76) in #REGb.
 $E7A7 PUSH IY         ; Remember the original pointer in #REGiy.
 $E7A9 LD IY,$BC67     ; Point #REGiy at the first character buffer (Wally). (#R$BC67)
*$E7AD RRCA            ; Was this key pressed? (Loops from 1 - 5.)
 $E7AE JR C,$E7B4      ; Jump if so.
 $E7B0 INC IY          ; { Otherwise move to the next entry and loop back.
 $E7B2 JR $E7AD        ; }
; Found the character to switch to, can it be done?
*$E7B4 LD A,(IY+$0F)   ; Get the character's room.
 $E7B7 CP B            ; Is it this one?
 $E7B8 JR Z,$E7C0      ; Yes, so we can switch.
 $E7BA CALL $BA6E      ; Otherwise, print "{character} is in {room}"
*$E7BD POP IY          ; { Clear up the stack and return.
 $E7BF RET             ; }
; The character is in the same room, so the switch can be made.
*$E7C0 CALL $A921      ; Is this character the current one.
 $E7C3 JR Z,$E7BD      ; If so, clear up the stack and return - there's nothing to do.
; The character is in the room and it's not the current one, so switch.
 $E7C5 LD ($B09D),IY   ; Set the current character pointer (#R$B09D) to this one.
 $E7C9 POP IY          ; Clear up the stack.
 $E7CB LD A,B          ; Put the room in #REGa.
 $E7CC CALL $AC69      ; Get the "next rooms" table for this room.
 $E7CF LD A,(HL)       ; { Put the first byte (room) in the buffer at #R$BCD0.
 $E7D0 LD (IY+$69),A   ; }
 $E7D3 INC HL          ; { Put the second byte (destination co-ordinate) at #R$BCCB.
 $E7D4 LD A,(HL)       ;
 $E7D5 LD (IY+$64),A   ; }
 $E7D8 INC HL          ; { Put the third byte (target co-ordinate) at #R$BCDA
 $E7D9 LD A,(HL)       ; 
 $E7DA LD (IY+$73),A   ; }
 $E7DD LD (IY+$6E),$05 ; Set the previous room to 5 (?)
 $E7E1 LD IY,($B09D)   ; Point #REGiy to the selected character.
 $E7E5 CALL $E3FD      ; Refresh the status bar to reflect the new current character.
 $E7E8 RET             ; Return.

; Jump table for pattern matching in rooms
w$E7E9 DEFW $EB95   ; Pattern 0 - AT OBJ(x) (#R$EB95)
 $E7EB DEFW $EBED   ; Pattern 1 - HAS(x) (#R$EBED)
 $E7ED DEFW $EDB3   ; Pattern 2 - SET(x) (#R$EDB3)
 $E7EF DEFW $EC2B   ; Pattern 3 - OBJ(x,y) (#R$EC2B)
 $E7F1 DEFW $EBC4   ; Pattern 4 - AT(x,y) (#R$EBC4)
 $E7F3 DEFW $EBE2   ; Pattern 5 - AM(x) (#R$EBE2)
 $E7F5 DEFW $EBFE   ; Pattern 6 - NOT HAS(x) (#R$EBFE)
 $E7F7 DEFW $EC34   ; Pattern 7 - NOT OBJ(x,y) (#R$EC34)

; Jump table for actions in rooms
w$E7F9 DEFW $EB01   ; Action 0 - SWAP (#R$EB01)
 $E7FB DEFW $EB0F   ; Action 1 - SWAPFOR( x ) (#R$EB0F)
 $E7FD DEFW $EDA3   ; Action 2 - SET(x) (#R$EDA3)
 $E7FF DEFW $EDA8   ; Action 3 - RESET(x) (#R$EDA8)
 $E801 DEFW $EDAC   ; Action 4 - SET(x,y) (#R$EDAC)
 $E803 DEFW $ECBC   ; Action 5 - EARN(x) (#R$ECBC)
 $E805 DEFW $EB79   ; Action 6 - WALL (#R$EB79)
 $E807 DEFW $EDF7   ; Action 7 - SPACE (#R$EDF7)
 $E809 DEFW $EDC6   ; Action 8 - SAFE (#R$EDC6)
 $E80B DEFW $EFC7   ; Action 9 - CHASE (#R$EFC7)
 $E80D DEFW $F177   ; Action A - OUT (#R$F177)

; Action data 00 : Town Square
;
; #CALL:print_logic(#PC)
b$E80F DEFB $04,$48,$60,$05,$08,$01,$18,$01
 $E817 DEFB $00,$F7,$05,$00,$02,$08,$F6,$04
 $E81F DEFB $48,$98,$01,$10,$02,$08,$F7,$05
 $E827 DEFB $02,$02,$04,$F6,$04,$48,$60,$06
 $E82F DEFB $18,$F7,$09,$F6,$04,$48,$60,$06
 $E837 DEFB $00,$F7,$09,$F6,$FF

; Action data 01 : Stamp Street
;
; #CALL:print_logic(#PC)
b$E83C DEFB $04,$E0,$90,$F7,$07,$F6,$FF

; Action data 02 : Post Office
;
; #CALL:print_logic(#PC)
b$E843 DEFB $00,$00,$F7,$00,$F6,$01,$15,$01
 $E84B DEFB $26,$05,$02,$04,$18,$98,$F7,$05
 $E853 DEFB $09,$02,$02,$F6,$FF

; Action data 03 : Market Street
b$E858 DEFB $FF

; Action data 04 : The Super Market
;
; #CALL:print_logic(#PC)
b$E859 DEFB $05,$10,$00,$00,$F7,$05,$1C,$00
 $E861 DEFB $F6,$00,$01,$F7,$00,$F6,$04,$F0
 $E869 DEFB $98,$01,$1F,$02,$07,$05,$04,$F7
 $E871 DEFB $05,$05,$02,$0C,$F6,$FF

; Action data 05 : The Park
;
; #CALL:print_logic(#PC)
b$E877 DEFB $00,$00,$F7,$00,$F6,$FF

; Action data 06 : Wobbly Walk
b$E87D DEFB $FF

; Action data 07 : Rubble Road
b$E87E DEFB $FF

; Action data 08 : Wall Street
;
; #CALL:print_logic(#PC)
b$E87F DEFB $05,$04,$00,$00,$F7,$00,$F6,$05
 $E887 DEFB $04,$03,$00,$04,$02,$06,$F7,$05
 $E88F DEFB $1E,$F6,$00,$01,$F7,$05,$1F,$00
 $E897 DEFB $F6,$05,$01,$01,$08,$01,$06,$04
 $E89F DEFB $80,$98,$F7,$05,$0D,$02,$09,$06
 $E8A7 DEFB $0C,$0C,$0F,$06,$0C,$0C,$13,$F6
 $E8AF DEFB $FF

; Action data 09 : Pete Street
;
; #CALL:print_logic(#PC)
b$E8B0 DEFB $05,$01,$01,$10,$02,$04,$01,$03
 $E8B8 DEFB $00,$00,$F7,$05,$0C,$03,$04,$01
 $E8C0 DEFB $03,$F6,$04,$F0,$98,$F7,$0A,$F6
 $E8C8 DEFB $FF

; Action data 0A : The Work Shed
;
; #CALL:print_logic(#PC)
b$E8C9 DEFB $00,$00,$F7,$00,$F6,$00,$01,$F7
 $E8D1 DEFB $00,$F6,$00,$02,$F7,$00,$F6,$03
 $E8D9 DEFB $00,$1D,$01,$1C,$01,$0F,$04,$78
 $E8E1 DEFB $98,$05,$08,$F7,$05,$07,$02,$05
 $E8E9 DEFB $F6,$03,$00,$1B,$01,$0E,$04,$78
 $E8F1 DEFB $98,$05,$01,$F7,$05,$08,$02,$03
 $E8F9 DEFB $F6,$FF

; Action data 0B : School Lane
;
; #CALL:print_logic(#PC)
b$E8FB DEFB $06,$19,$00,$00,$F7,$09,$F6,$06
 $E903 DEFB $21,$07,$00,$21,$00,$00,$F7,$09
 $E90B DEFB $F6,$05,$10,$01,$19,$01,$21,$02
 $E913 DEFB $0D,$00,$00,$F7,$05,$04,$01,$21
 $E91B DEFB $02,$0B,$F6,$FF

; Action data 0C : The School
;
; #CALL:print_logic(#PC)
b$E91F DEFB $00,$00,$F7,$00,$F6,$FF

; Action data 0D : Baker Street
;
; #CALL:print_logic(#PC)
b$E925 DEFB $04,$F0,$98,$F7,$0A,$F6,$FF

; Action data 0E : The Bakers
;
; #CALL:print_logic(#PC)
b$E92C DEFB $00,$00,$F7,$00,$F6,$FF

; Action data 0F : The Pub
;
; #CALL:print_logic(#PC)
b$E932 DEFB $05,$04,$01,$22,$02,$00,$00,$00
 $E93A DEFB $F7,$05,$0E,$01,$22,$F6,$FF

; Action data 10 : Motor Way
b$E941 DEFB $FF

; Action data 11 : The Laboratory
;
; #CALL:print_logic(#PC)
b$E942 DEFB $00,$00,$F7,$00,$F6,$00,$01,$F7
 $E94A DEFB $00,$F6,$05,$04,$02,$0A,$03,$00
 $E952 DEFB $12,$03,$01,$22,$01,$09,$04,$60
 $E95A DEFB $98,$F7,$05,$03,$02,$00,$F6,$FF

; Action data 12 : The Garage
;
; #CALL:print_logic(#PC)
b$E962 DEFB $00,$00,$F7,$00,$F6,$04,$D8,$98
 $E96A DEFB $01,$0D,$01,$1F,$F7,$05,$17,$02
 $E972 DEFB $07,$F6,$02,$0B,$04,$3C,$98,$01
 $E97A DEFB $04,$01,$11,$05,$10,$F7,$05,$0B
 $E982 DEFB $02,$06,$F6,$FF

; Action data 13 : Reference Road
;
; #CALL:print_logic(#PC)
b$E986 DEFB $04,$08,$90,$F7,$07,$F6,$04,$00
 $E98E DEFB $98,$F7,$0A,$F6,$FF

; Action data 14 : The Library
;
; #CALL:print_logic(#PC)
b$E993 DEFB $05,$02,$01,$0B,$00,$00,$F7,$00
 $E99B DEFB $F6,$05,$02,$01,$02,$03,$00,$0B
 $E9A3 DEFB $00,$01,$F7,$05,$10,$00,$F6,$05
 $E9AB DEFB $02,$01,$07,$03,$00,$0B,$03,$01
 $E9B3 DEFB $02,$00,$02,$F7,$05,$11,$01,$07
 $E9BB DEFB $F6,$FF

; Action data 15 : Penny Lane
b$E9BD DEFB $FF

; Action data 16 : The Bank
;
; #CALL:print_logic(#PC)
b$E9BE DEFB $00,$00,$F7,$00,$F6,$04,$EC,$98
 $E9C6 DEFB $05,$02,$01,$13,$F7,$05,$12,$08
 $E9CE DEFB $F6,$04,$EC,$98,$05,$04,$01,$1E
 $E9D6 DEFB $F7,$05,$13,$08,$F6,$04,$EC,$98
 $E9DE DEFB $05,$08,$01,$1A,$F7,$05,$14,$08
 $E9E6 DEFB $F6,$04,$EC,$98,$05,$10,$01,$01
 $E9EE DEFB $F7,$05,$15,$08,$F6,$04,$EC,$98
 $E9F6 DEFB $05,$01,$01,$05,$F7,$05,$16,$05
 $E9FE DEFB $01,$08,$F6,$04,$EC,$98,$05,$02
 $EA06 DEFB $06,$13,$F7,$09,$F6,$04,$EC,$98
 $EA0E DEFB $05,$04,$06,$1E,$F7,$09,$F6,$04
 $EA16 DEFB $EC,$98,$05,$08,$06,$1A,$F7,$09
 $EA1E DEFB $F6,$04,$EC,$98,$05,$10,$06,$01
 $EA26 DEFB $F7,$09,$F6,$04,$EC,$98,$05,$01
 $EA2E DEFB $06,$05,$F7,$09,$F6,$FF

; Action data 17 : Wally's House
;
; #CALL:print_logic(#PC)
b$EA34 DEFB $00,$00,$F7,$00,$F6,$FF

; Action data 18 : Meat Street
b$EA3A DEFB $FF

; Action data 19 : The Butcher's
;
; #CALL:print_logic(#PC)
b$EA3B DEFB $00,$00,$F7,$00,$F6,$03,$00,$16
 $EA43 DEFB $02,$01,$02,$0B,$00,$01,$F7,$00
 $EA4B DEFB $F6,$01,$16,$01,$20,$05,$10,$F7
 $EA53 DEFB $05,$06,$02,$01,$F6,$FF

; Action data 1A : Trunk Road
;
; #CALL:print_logic(#PC)
b$EA59 DEFB $04,$00,$98,$F7,$0A,$F6,$FF

; Action data 1B : The Zoo
;
; #CALL:print_logic(#PC)
b$EA60 DEFB $00,$00,$F7,$05,$18,$00,$F6,$07
 $EA68 DEFB $00,$0C,$06,$0C,$F7,$09,$F6,$FF

; Action data 1C : Rail Road
b$EA70 DEFB $FF

; Action data 1D : The Station
;
; #CALL:print_logic(#PC)
b$EA71 DEFB $00,$00,$F7,$00,$F6,$FF

; Action data 1E : The Docks
;
; #CALL:print_logic(#PC)
b$EA77 DEFB $03,$01,$1B,$02,$03,$05,$02,$00
 $EA7F DEFB $00,$F7,$00,$05,$0A,$F6,$03,$01
 $EA87 DEFB $1B,$02,$03,$F7,$05,$19,$F6,$00
 $EA8F DEFB $01,$F7,$00,$F6,$FF

; Action data 1F : The Sewer
;
; #CALL:print_logic(#PC)
b$EA94 DEFB $03,$00,$17,$F7,$05,$1A,$F6,$00
 $EA9C DEFB $00,$F7,$00,$F6,$FF

; Action data 20 : The Cave
;
; #CALL:print_logic(#PC)
b$EAA1 DEFB $05,$08,$00,$00,$F7,$00,$F6,$03
 $EAA9 DEFB $00,$1D,$02,$05,$F7,$05,$0F,$02
 $EAB1 DEFB $0A,$F6,$01,$1E,$F7,$05,$1B,$F6
 $EAB9 DEFB $00,$01,$F7,$00,$F6,$FF

; Process logic for the current room
;
; Used by the routine at #R$8184.
c$EABF LD A,(IY+$0F) ; Get the current character's room.
 $EAC2 LD ($B951),A  ; Set this as the current room number. (#R$B951)
 $EAC5 LD HL,$E80F   ; Point #REGhl at the first action table. (#R$E80F)
 $EAC8 CALL $AC6C    ; Get the pointer to the action table.
; This entry point is used by the routines at #R$EAE3, #R$EAEB, #R$EB95,
; #R$EBC4, #R$EBE2, #R$EBED, #R$EBFE, #R$EC2B, #R$EC34 and #R$EDB3.
;
; At this point, #REGhl points to the logic table of the current room.
*$EACB LD A,(HL)     ; Put the next pattern in #REGa.
 $EACC INC HL        ; Move to the next position in the table.
 $EACD CP $FF        ; Is this the end of the logic?
 $EACF RET Z         ; Return if so.
 $EAD0 CP $F7        ; Is this an action?
 $EAD2 JR Z,$EAEB    ; Process it if it is.
; If this isn't an action, it's a pattern, so look it up.
 $EAD4 ADD A,A       ; Double the pattern ID to get a word offset.
 $EAD5 LD E,A        ; { Put this in #REGde.
 $EAD6 LD D,$00      ; }
 $EAD8 PUSH HL       ; Remember #REGhl.
 $EAD9 LD HL,$E7E9   ; { Add the base pointer for the match table. (#R$E7E9)
 $EADC ADD HL,DE     ; }
 $EADD LD E,(HL)     ; { Put the address found in #REGde.
 $EADE INC HL        ;
 $EADF LD D,(HL)     ; }
 $EAE0 POP HL        ; Restore #REGhl.
 $EAE1 PUSH DE       ; { Jump to the address pointed to by #REGde.
 $EAE2 RET           ; }

; A condition does not match. Skip to the ENDIF (F6) character.
;
; Used by the routines at #R$EB95, #R$EBC4, #R$EBE2, #R$EBED, #R$EBFE, #R$EC2B,
; #R$EC34 and #R$EDB3.
;
; HL On exit, holds the address for the next room logic byte
c$EAE3 LD A,(HL)     ; Put the next byte in #REGa.
 $EAE4 INC HL        ; Move to the next position in the table.
 $EAE5 CP $F6        ; Is this ENDIF?
 $EAE7 JR Z,$EACB    ; Jump if it is.
 $EAE9 JR $EAE3      ; Otherwise loop back to keep searching.

; A condition matches. Process any actions in it.
;
; Used by the routines at #R$EABF, #R$EB01, #R$EB0F, #R$EB79, #R$EC4A, #R$ECBC
; and #R$EDC6.
; 
; HL Pointer to the action table.
c$EAEB LD A,(HL)     ; Put the next action in #REGa.
 $EAEC INC HL        ; Move to the next position in the table.
 $EAED CP $F6        ;
 $EAEF JP Z,$EACB    ;
 $EAF2 ADD A,A       ; Double the action to get a word offset.
 $EAF3 LD E,A        ; { Put this in #REGde.
 $EAF4 LD D,$00      ; }
 $EAF6 PUSH HL       ; Remember #REGhl.
 $EAF7 LD HL,$E7F9   ; { Add the base address of the action table. (#R$E7F9)
 $EAFA ADD HL,DE     ; }
 $EAFB LD E,(HL)     ; { Put the address found in #REGde.
 $EAFC INC HL        ;
 $EAFD LD D,(HL)     ; }
 $EAFE POP HL        ; Restore #REGhl.
 $EAFF PUSH DE       ; { Jump to the action pointed to by #REGde.
 $EB00 RET           ; }

; Action 0 : SWAP. An item can be collected. Swap it for the oldest item.
c$EB01 LD A,$01      ; { Set that the item should be swapped. (#R$EB54)
 $EB03 LD ($EB54),A  ; }
 $EB06 LD B,(IY-$2D) ; Get the ID of the least recently picked up object the player has.
 $EB09 CALL $AA30    ; Swap the objects.
 $EB0C JP $EAEB      ; Process more actions.

; Action 1 : SWAPFOR. An item can be collected. Swap it for a specific item.
;
; -
;
; HL Points to the object ID that should be swapped
c$EB0F LD A,$01      ; { Set that the item should be swapped. (#R$EB54)
 $EB11 LD ($EB54),A  ; }
 $EB14 LD B,(IY-$2D) ; Get the ID of the least recently picked up object the player has.
 $EB17 LD C,(HL)     ; Put the ID of the object to swap in #REGc.
 $EB18 INC HL        ; Ensure #REGhl points to the next place in the action buffer.
 $EB19 PUSH HL       ; Remember this.
 $EB1A PUSH IY       ; Remember the current player pointer in #REGiy.
 $EB1C CALL $AA8C    ; Get the buffer for this object.
 $EB1F LD A,(IY+$50) ; Get the ID of the first object held.
 $EB22 CP C          ; Does it equal this one?
 $EB23 JR Z,$EB2F    ; Jump forward if it does.
 $EB25 INC IY        ; { Otherwise, temporarily shift #REGiy forward
 $EB27 INC IY        ; so the second object held appears at the first.
 $EB29 INC IY        ;
 $EB2B INC IY        ;
 $EB2D INC IY        ; }
*$EB2F LD C,(HL)     ; Put the ID of the object in the room in #REGc.
 $EB30 LD A,(IY+$50) ; Get the ID of the object to swap (first or second) in #REGa.
 $EB33 LD (HL),A     ; { Swap them round.
 $EB34 LD (IY+$50),C ; }
 $EB37 INC HL        ; { Move to the flags.
 $EB38 INC HL        ;
 $EB39 INC HL        ; }
 $EB3A LD A,(HL)     ; Put the flags in #REGa.
 $EB3B RES 7,A       ; Reset bit 7, the item has been swapped.
 $EB3D LD C,A        ; Store this in #REGc.
 $EB3E LD A,(HL)     ; Put the flags in #REGa.
 $EB3F AND $80       ; Clear bit 7.
 $EB41 OR (IY-$37)   ; Keep the bits set on the current bit mask.
 $EB44 LD (HL),A     ; Store this.
 $EB45 LD (IY-$37),C ; Store the old flags.
 $EB48 POP IY        ; Restore the original value of #REGiy.
 $EB4A CALL $E41D    ; Update the inventory.
 $EB4D CALL $AA7F    ; Play an "item swapped" effect.
 $EB50 POP HL        ; Restore the place in the buffer to #REGhl.
 $EB51 JP $EAEB      ; Process more actions.

; Holds 1 if the player is near an object, or 0 for no item.
g$EB54 DEFB $00

; See if the player is touching any collectable item
;
; Used by the routine at #R$8184.
c$EB55 LD BC,$0000   ; Set #REGb to 0 (first object) and #REGc to 0 (no items).
 $EB58 CALL $AA8C    ; Get the buffer for this object.
*$EB5B LD A,(HL)     ; Get the first byte.
 $EB5C CP $FF        ; Is it an end marker?
 $EB5E JR Z,$EB72    ; If so, there are no items here, so jump forward.
 $EB60 INC HL        ; Point #REGhl at the X co-ordinate.
 $EB61 LD A,(IY+$05) ; Get the X co-ordinate.
 $EB64 SUB (HL)      ; { Convert the player co-ordinate to an object co-ordinate.
 $EB65 INC HL        ;
 $EB66 INC HL        ;
 $EB67 INC HL        ;
 $EB68 SUB $06       ; }
 $EB6A CP $F4        ; Are the two near enough?
 $EB6C JR C,$EB5B    ; Jump back to look at other entries if not.
 $EB6E LD C,$01      ; { Otherwise set that an object is found in #REGc, then jump back.
 $EB70 JR $EB5B      ; }
; At this point, all objects in the room have been checked, and #REGc is set to 1 if
; the player is near any of them.
*$EB72 LD A,C        ; { Were any items found?
 $EB73 OR A          ; }
 $EB74 RET NZ        ; Return if not.
 $EB75 LD ($EB54),A  ; { Otherwise mark that the player is near an object (#R$EB54)
 $EB78 RET           ; and return. }

; Action 6 : WALL. The wall is or can be built. Patch the logic in Wall Street
; for it.
;
; -
;
; HL The data for this action (graphic, x, y)
c$EB79 LD A,(HL)     ; Put the graphic ID in #REGa.
 $EB7A INC HL        ; { Put the x co-ordinate in #REGe.
 $EB7B LD E,(HL)     ; }
 $EB7C INC HL        ; { Put the y co-ordinate in #REGd.
 $EB7D LD D,(HL)     ; }
 $EB7E INC HL        ; Point to the next action in the buffer.
 $EB7F PUSH HL       ; Store #REGhl.
 $EB80 PUSH DE       ; Store the position that is in #REGde.
 $EB81 ADD A,A       ; Double the graphic ID to get a word offset.
 $EB82 LD E,A        ; { Put this in #REGde.
 $EB83 LD D,$00      ; }
 $EB85 LD HL,$BD86   ; { Add the offset for the basic room block components. (#R$BD86)
 $EB88 ADD HL,DE     ; }
 $EB89 LD E,(HL)     ; { Put the actual address in #REGde.
 $EB8A INC HL        ;
 $EB8B LD D,(HL)     ; }
 $EB8C EX DE,HL      ; Swap #REGde and #REGhl, so #REGhl has the graphic address.
 $EB8D POP DE        ; Restore #REGde with the position.
 $EB8E CALL $B82B    ; Draw the graphic.
 $EB91 POP HL        ; Restore #REGhl.
 $EB92 JP $EAEB      ; Jump to handle any other actions.

; Pattern 0 AT OBJ(x) : Match if at an item
;
; -
;
; HL : Points to the room's object ID to test for
c$EB95 LD B,(HL)     ; Put the object to test for in #REGb.
 $EB96 INC HL        ; Ensure #REGhl points to the next pattern.
 $EB97 PUSH HL       ; Store this.
 $EB98 LD A,($EB54)  ; Get the current ID of the item the player is next to, if any.
 $EB9B OR A          ; Was there one?
 $EB9C JR NZ,$EBC0   ; Jump forward if not.
; There's an item here, is it the right one.
 $EB9E LD (IY-$2D),B ; Put the ID of the object to test in the buffer at #R$BC3A.
 $EBA1 CALL $AA8C    ; Get the object's data.
 $EBA4 LD A,(IY+$05) ; Get the X co-ordinate.
 $EBA7 INC HL        ; Point to the item's X co-ordinate.
 $EBA8 SUB (HL)      ; { Is is near enough?
 $EBA9 SUB $04       ;
 $EBAB CP $F8        ; }
 $EBAD JR C,$EBC0    ; If it isn't, jump forward to set the pattern as not matched.
 $EBAF INC HL        ; Point to the item's Y co-ordinate.
 $EBB0 LD A,(IY+$0A) ; Get the player's Y co-ordinate.
 $EBB3 ADD A,$10     ; { Is it near enough?
 $EBB5 SUB (HL)      ;
 $EBB6 SUB $04       ;
 $EBB8 CP $F8        ; }
 $EBBA JR C,$EBC0    ; If not, jump forward to set the pattern as not matched.
; There's the right object here, and the player is near enough to it.
 $EBBC POP HL        ; Restore the address of the next pattern in #REGhl.
 $EBBD JP $EACB      ; Carry on looking at other patterns.
; There's no item here, or it's not the right one.
*$EBC0 POP HL        ; Restore the address of the next pattern in #REGhl.
 $EBC1 JP $EAE3      ; Flag the pattern has having not matched.

; Pattern 4 AT(x,y) : Match if at co-ordinate x,y
;
; HL Pointer to data for this pattern.
c$EBC4 LD A,(IY+$05) ; Get the X co-ordinate.
 $EBC7 SUB (HL)      ; { Is the player near enough?
 $EBC8 SUB $04       ;
 $EBCA CP $F8        ; }
 $EBCC JR C,$EBDD    ; Jump forward if not.
 $EBCE INC HL        ; Point to the Y co-ordinate.
 $EBCF LD A,(IY+$0A) ; Get the Y co-ordinate.
 $EBD2 SUB (HL)      ; { Is the player near enough?
 $EBD3 SUB $04       ;
 $EBD5 CP $F8        ; }
 $EBD7 JR C,$EBDE    ; Jump if not.
 $EBD9 INC HL        ; Ensure #REGhl points to the next pattern.
 $EBDA JP $EACB      ; Carry on looking at other patterns.
; The player isn't near enough.
*$EBDD INC HL        ; { Ensure #REGhl points to the
*$EBDE INC HL        ; next pattern. }
 $EBDF JP $EAE3      ; Flag the pattern has having not matched.

; Pattern 5 AM(x) : Match if we are a character (bitfield)
c$EBE2 LD A,(HL)     ; Get the character ID.
 $EBE3 INC HL        ; Ensure #REGhl points to the next pattern.
 $EBE4 CP (IY-$28)   ; Compare with the current character.
 $EBE7 JP Z,$EACB    ; If there's a match, carry on looking at other patterns.
 $EBEA JP $EAE3      ; Otherwise, flag the pattern has having not matched.

; Pattern 1 HAS(x) : Match if item xx held
c$EBED LD A,(HL)     ; Get the item ID.
 $EBEE INC HL        ; Ensure #REGhl points to the next pattern.
 $EBEF CP (IY+$50)   ; Is the first item held this?
 $EBF2 JP Z,$EACB    ; If so, there's a match, carry on looking at other patterns.
 $EBF5 CP (IY+$55)   ; Is the second item held this?
 $EBF8 JP Z,$EACB    ; If so, there's a match, carry on looking at other patterns.
 $EBFB JP $EAE3      ; Otherwise, flag the pattern has having not matched.

; Pattern 6 NOT HAS(x) : Match if item xx NOT held
c$EBFE LD A,(HL)     ; Get the item ID.
 $EBFF INC HL        ; Ensure #REGhl points to the next pattern.
 $EC00 CP (IY+$50)   ; Is the first item held this?
 $EC03 JP Z,$EAE3    ; If so, flag the pattern has having not matched.
 $EC06 CP (IY+$55)   ; Is the second item held this?
 $EC09 JP Z,$EAE3    ; If so, flag the pattern has having not matched.
 $EC0C JP $EACB      ; Otherwise, carry on looking at other patterns.

; Flag 0 : Bottle is full
g$EC0F DEFB $00

; Flag 1 : Fuse is rewired
g$EC10 DEFB $01

; Flag 2 : Parcel is stamped
g$EC11 DEFB $02

; Flag 3 : Hook is working
g$EC12 DEFB $03

; Flag 4 : Bucket is full
g$EC13 DEFB $04

; Flag 5 : Pipe is patched
g$EC14 DEFB $05

; Flag 6 : Battery is charged
g$EC15 DEFB $06

; Flag 7 : Oil can is full
g$EC16 DEFB $07

; Flag 8 : Fountain is repaired
g$EC17 DEFB $08

; Flag 9 : Wall is built
g$EC18 DEFB $09

; Flag A : Gas is repaired
g$EC19 DEFB $0A

; Flag B : Electricity is repaired
g$EC1A DEFB $0B

; Flag C : Trolley is moving
g$EC1B DEFB $0C

; Flag D : Asteroids game has been won
g$EC1C DEFB $0D

; Get a game status flag and return it in A, setting the zero flag
; appropriately
;
; Used by the routines at #R$B952, #R$E468, #R$EDB3, #R$F43C, #R$F4D3, #R$F503,
; #R$F54F, #R$F572 and #R$F5F1.
;
; A flag number to get
c$EC1D PUSH HL       ; { Store #REGhl and #REGde.
 $EC1E PUSH DE       ; }
 $EC1F LD E,A        ; { Put the flag in #REGde.
 $EC20 LD D,$00      ; }
 $EC22 LD HL,$EC0F   ; { Add the base pointer to the flags at #R$EC0F.
 $EC25 ADD HL,DE     ; }
 $EC26 LD A,(HL)     ; Get the flag.
 $EC27 POP DE        ; { Restore #REGhl and #REGde.
 $EC28 POP HL        ; }
 $EC29 OR A          ; { Return, setting the zero flag if #REGa is zero.
 $EC2A RET           ; }

; Pattern 3 OBJ(x,y) : Match if room object x is y
c$EC2B CALL $EC3D    ; Get the flag.
 $EC2E JP Z,$EACB    ; Continue looking at patterns if there's a match.
 $EC31 JP $EAE3      ; Otherwise, flag the pattern as failed.

; Pattern 7 NOT OBJ(x,y) : Match if room object x is not y
c$EC34 CALL $EC3D    ; Get the flag.
 $EC37 JP NZ,$EACB   ; Continue looking at patterns if there's not a match.
 $EC3A JP $EAE3      ; Otherwise, flag the pattern as failed.

; Check if the item in a room matches a certain object ID and sets the zero
; flag if it is
;
; Used by the routines at #R$EC2B and #R$EC34.
;
; HL Buffer containing the nth object number and the target ID
c$EC3D LD B,(HL)     ; Put the first byte in #REGb as the object number.
 $EC3E INC HL        ; { Put the second byte in #REGa as the target object ID.
 $EC3F LD A,(HL)     ; }
 $EC40 INC HL        ; { Move to the next part of the buffer for future use,
 $EC41 PUSH HL       ; and store it. }
 $EC42 PUSH AF       ; { Get the current object data for this room in #REGhl.
 $EC43 CALL $AA8C    ;
 $EC46 POP AF        ; }
 $EC47 CP (HL)       ; Set the zero flag if the ID matches.
 $EC48 POP HL        ; { Restore the active buffer pointer in #REGhl and return.
 $EC49 RET           ; }

; Set a game flag to a value
;
; Used by the routines at #R$EDA3 and #R$EDA8.
;
; HL Points to the value to use and the flag to set
c$EC4A LD E,(HL)     ; 
 $EC4B INC HL        ;
; This entry point is used by the routine at #R$EDAC.
; At this point, #REGe contains the ID of the flag to set.
*$EC4C PUSH HL       ; Remember #REGhl.
 $EC4D LD D,$00      ; { Add the ID to the base address of
 $EC4F LD HL,$EC0F   ; flags at #R$EC0F.
 $EC52 ADD HL,DE     ; }
 $EC53 CP (HL)       ; Set the zero flag if the flag already has this value.
 $EC54 LD (HL),A     ; Set the value.
 $EC55 CALL NZ,$E41D ; If the value is different, update the inventory as it may have changed.
 $EC58 POP HL        ; Restore #REGhl.
 $EC59 JP $EAEB      ; Continue to any further actions to process.

; Lookup table for how much money each task earns.
;
; Each entry contains the following:
; #TABLE( default, center)
; { 0 | Set to 0 if the task is not complete, or 1 if it is }
; { 1 | Amount to earn, tens part }
; { 2 | Amount to earn, hundreds part }
; TABLE#
b$EC5C DEFB $00,$50,$01
 $EC5F DEFB $01,$00,$01
 $EC62 DEFB $02,$20,$00
 $EC65 DEFB $03,$50,$01
 $EC68 DEFB $04,$50,$01
 $EC6B DEFB $05,$50,$00
 $EC6E DEFB $06,$50,$00
 $EC71 DEFB $07,$40,$00
 $EC74 DEFB $08,$50,$00
 $EC77 DEFB $09,$20,$00
 $EC7A DEFB $0A,$50,$01
 $EC7D DEFB $0B,$50,$00
 $EC80 DEFB $0C,$50,$00
 $EC83 DEFB $0D,$50,$01
 $EC86 DEFB $0E,$50,$00
 $EC89 DEFB $0F,$20,$01
 $EC8C DEFB $10,$50,$00
 $EC8F DEFB $11,$00,$01
 $EC92 DEFB $12,$00,$02
 $EC95 DEFB $13,$00,$02
 $EC98 DEFB $14,$00,$02
 $EC9B DEFB $15,$00,$02
 $EC9E DEFB $16,$00,$02
 $ECA1 DEFB $17,$20,$00
 $ECA4 DEFB $18,$50,$00
 $ECA7 DEFB $19,$70,$00
 $ECAA DEFB $1A,$40,$00
 $ECAD DEFB $1B,$50,$00
 $ECB0 DEFB $1C,$60,$00
 $ECB3 DEFB $1D,$00,$01
 $ECB6 DEFB $1E,$60,$00
 $ECB9 DEFB $1F,$50,$00

; Action 5 EARN(x). Pay the current character amount in offset x
;
; HL Pointer to the data for this action.
c$ECBC LD E,(HL)     ; { Get the next byte as the ID for earnings and put it in #REGde.
 $ECBD INC HL        ;
 $ECBE LD D,$00      ; }
 $ECC0 PUSH HL       ; Remember the current position in the buffer.
 $ECC1 LD HL,$EC5C   ; Point #REGhl at the start of the money lookup table. (#R$EC5C)
 $ECC4 ADD HL,DE     ; { Add the ID multiplied by 3 to get to the right address.
 $ECC5 ADD HL,DE     ;
 $ECC6 ADD HL,DE     ; }
 $ECC7 LD A,(HL)     ; Get the ID.
 $ECC8 OR A          ; Is it zero? ie: money not collected
 $ECC9 JR NZ,$ECF1   ; Jump forward if not.
; Allocate the money to the current character.
 $ECCB LD (HL),$01   ; Set the money as collected.
 $ECCD INC HL        ; Move to the next position in the buffer.
 $ECCE LD A,(IY-$0A) ; Get the current player's earnings (tens portion).
 $ECD1 ADD A,(HL)    ; Add the next tens value to the current player's total.
 $ECD2 DAA           ; Adjust to give an appropriate value in decimal.
 $ECD3 LD (IY-$0A),A ; Set that as the new tens value.
 $ECD6 INC HL        ; Move to the next position in the buffer.
 $ECD7 LD A,(IY-$1E) ; Get the current player's earnings (hundreds portion).
 $ECDA ADC A,(HL)    ; Add the next hundreds value to the current player's total,
                     ; including any overflow from the tens portion.
 $ECDB DAA           ; Adjust to give an appropriate value in decimal.
 $ECDC LD (IY-$1E),A ; Set that as the new hundreds value.
; Now update the grand total for all players.
 $ECDF DEC HL        ; Move back to point at the tens portion.
 $ECE0 LD A,($ECFF)  ; Get the tens portion for the current total.
 $ECE3 ADD A,(HL)    ; Add the next tens value.
 $ECE4 DAA           ; Adjust for decimal.
 $ECE5 LD ($ECFF),A  ; Set the new tens portion.
 $ECE8 INC HL        ; Move to point at the hundreds portion.
 $ECE9 LD A,($ECFE)  ; Get the hundreds portion for the current total.
 $ECEC ADC A,(HL)    ; Add the next hundreds total.
 $ECED DAA           ; Adjust for decimal.
 $ECEE LD ($ECFE),A  ; Set the new hunderds portion.
*$ECF1 POP HL        ; Restore the current position in the buffer.
 $ECF2 JP $EAEB      ; Jump forward to execute more actions.

; The next "reward" screen to print, 0 = morning, 1 = lunch, 2 = tea
b$ECF5 DEFB $00

; Table of amount of money needed to get morning, lunch and tea breaks
;
; £600 - morning tea, £1300 - lunch, £2100 - tea
b$ECF6 DEFB $00,$06
 $ECF8 DEFB $00,$13
 $ECFA DEFB $00,$21

; Total amount of money that can be earned
b$ECFC DEFB $00,$40

; Total amount of money currently earned (x / 100), (x % 100)
b$ECFE DEFB $00,$00

; String lookup tables for morning tea, lunch and tea
w$ED00 DEFW $7E71
 $ED02 DEFW $7E9F
 $ED04 DEFW $7ECC

; Movement table : Laboratory / Reward screens / Cave
g$ED06 DEFB $30,$78,$02,$02
 $ED0A DEFB $78,$44,$FE,$02
 $ED0E DEFB $C0,$8C,$02,$FE
 
; Current object ID to use when drawing gas
g$ED12 DEFB $7C

; Room logic : The Laboratory
;
; Used by the routine at #R$F54F.
c$ED13 LD A,$02      ; { Moving objects decrease endurance by 2 here.
 $ED15 LD ($F26E),A  ; }
 $ED18 LD A,($ED12)  ; Get the object ID to use for the gas. (#R$ED12)
 $ED1B CALL $ED8A    ; Set up moving objects.
 $ED1E ADD A,$02     ; Move to the next object ID (a masked object is double size).
 $ED20 CP $82        ; { If the ID is greater than #N$80, set it back to #N$7C.
 $ED22 JR NZ,$ED26   ;
 $ED24 LD A,$7C      ; }
*$ED26 LD ($ED12),A  ; { Store the new object ID and return.
 $ED29 RET           ; }

; See if we've reached a break, and display a message if so
;
; Used by the routine at #R$8184.
c$ED2A LD A,($ECF5)  ; Get the index of the next reward screen. (#R$ECF5)
 $ED2D ADD A,A       ; Double it to get a word offset
 $ED2E LD E,A        ; { Put this in #REGde.
 $ED2F LD D,$00      ; }
 $ED31 LD HL,$ECF6   ; { Add the base address of the reward value buffer. (#R$ECF6)
 $ED34 ADD HL,DE     ; }
 $ED35 LD A,($ECFF)  ; Get the "tens" part of the total money earned.
 $ED38 SUB (HL)      ; Subtract the "tens" value.
 $ED39 INC HL        ; Move to the next entry containsing the "hundreds"
 $ED3A LD A,($ECFE)  ; Get the "hundreds" part of the total money earned.
 $ED3D SBC A,(HL)    ; Subtract the "hundreds" value, accounting for any carry with the "tens".
 $ED3E RET C         ; Return if the value is greater than our current earnings.
; We've got enough money, so display a graphic.
 $ED3F LD BC,$0000   ; { Pause for a bit.
*$ED42 DEC BC        ;
 $ED43 NOP           ;
 $ED44 NOP           ;
 $ED45 LD A,B        ;
 $ED46 OR C          ;
 $ED47 JR NZ,$ED42   ; }
 $ED49 CALL $B902    ; Clear the playing area.
 $ED4C LD HL,$ED00   ; { Add the word offset previously stored in #REGde to the
 $ED4F ADD HL,DE     ; base address of the message buffer. (#R$ED00) }
 $ED50 LD E,(HL)     ; { Put the actual address in #REGde. 
 $ED51 INC HL        ;
 $ED52 LD D,(HL)     ; }
 $ED53 EX DE,HL      ; Swap #REGde and #REGhl.
 $ED54 LD DE,$0000   ; Set the position to top left.
 $ED57 CALL $B8C4    ; Print the string pointed to by #REGhl.
 $ED5A CALL $B9AC    ; Draw the screen.
*$ED5D CALL $EEA2    ; Update the sprite buffers.
 $ED60 LD A,($ECF5)  ; Get the index of the next reward screen. (#R$ECF5)
 $ED63 ADD A,A       ; { Double it and add #N$65 to get an appropriate index for
 $ED64 ADD A,$65     ; the reward screen moving graphics. }
 $ED66 LD IX,$ED06   ; Point #REGix at the movement table for the reward screens. (#R$ED06)
 $ED6A LD B,$03      ; Three rounds to draw.
*$ED6C PUSH BC       ; Store #REGbc.
 $ED6D LD BC,$F5CA   ; Point #REGbc at the bounds for the moving graphics.
 $ED70 CALL $EF35    ; Update the moving objects.
 $ED73 CALL $A8A0    ; Put the object in the sprite buffer.
 $ED76 POP BC        ; Restore #REGbc.
 $ED77 DJNZ $ED6C    ; Loop back while there's more to display.
 $ED79 CALL $B9FB    ; Put the sprites on screen.
 $ED7C CALL $ABD7    ; { Was a key pressed?
 $ED7F OR A          ; }
 $ED80 JR Z,$ED5D    ; If not, loop back to draw some more.
 $ED82 LD HL,$ECF5   ; { Move onto the next reward screen index.
 $ED85 INC (HL)      ; }
 $ED86 CALL $B952    ; Draw the room.
 $ED89 RET           ; Return.

; Set up moving objects in the Laboratory
;
; Used by the routines at #R$ED13 and #R$F177.
c$ED8A LD IX,$ED06   ; Point #REGix at the movement table. (#R$ED06)
 $ED8E LD B,$03      ; 3 objects to update.
*$ED90 PUSH BC       ; Remember the count in #REGbc.
 $ED91 LD BC,$F5CA   ; Point #REGbc at the bounds table. (#R$F5CA)
 $ED94 CALL $EF35    ; Update the next moving object.
 $ED97 CALL $A8A0    ; Put the object in the sprite buffer.
 $ED9A PUSH AF       ; { Check for collision detection.
 $ED9B CALL $E329    ;
 $ED9E POP AF        ; }
 $ED9F POP BC        ; Restore the count in #REGbc.
 $EDA0 DJNZ $ED90    ; Loop until all objects are drawn.
 $EDA2 RET           ; Return.

; Action 2 SET(x) : Set flag xx
c$EDA3 LD A,$01      ; { Set the value as 1.
 $EDA5 JP $EC4A      ; }

; Action 3 RESET(x) : Reset flag xx
c$EDA8 XOR A         ; { Set the value as 0.
 $EDA9 JP $EC4A      ; }

; Action 4 SET(x,y) : Set flag xx to yy
c$EDAC LD E,(HL)     ; { Put the flag ID in #REGe.
 $EDAD INC HL        ; }
 $EDAE LD A,(HL)     ; { Put the value in #REGa.
 $EDAF INC HL        ; }
 $EDB0 JP $EC4C      ; Set it.

; Pattern 2 SET(x) : Match if flag x set
c$EDB3 LD A,(HL)     ; { Get the flag ID in #REGa.
 $EDB4 INC HL        ; }
 $EDB5 CALL $EC1D    ; Get the flag's value.
 $EDB8 JP Z,$EAE3    ; Mark the pattern as failed if it's 0.
 $EDBB JP $EACB      ; Otherwise process other actions.

; Unused
u$EDBE DEFB $FF

; List of characters that should bring each letter
b$EDBF DEFB $FF,$02,$04,$08,$10,$01,$FF

; Number of combination letters completed + 1
b$EDC5 DEFB $01

; Action 8 SAFE. The safe has been touched with a combination letter. Process
; it now.
c$EDC6 PUSH HL       ; Remember #REGhl.
 $EDC7 LD HL,$EDBE   ; Point #REGhl at the list of which order to bring letters. (#R$EDBE)
 $EDCA LD A,($EDC5)  ; Put the number of safe letters already used in #REGa. (#R$EDC5)
 $EDCD LD E,A        ; { Put in this in #REGde.
 $EDCE LD D,$00      ; }
 $EDD0 ADD HL,DE     ; Add the base address of the letters to give an offset from #R$EDBF.
 $EDD1 LD A,(HL)     ; Get the next character ID.
 $EDD2 CP $FF        ; Is it an end marker (#N$FF)?
 $EDD4 JR Z,$EDE5    ; Jump forward if it is.
 $EDD6 CP (IY-$28)   ; Is the character ID the current player?
 $EDD9 JR NZ,$EDE9   ; Jump forward if it isn't.
; The right character is at the safe.
 $EDDB INC E         ; Move to the next position in the buffer.
 $EDDC LD A,E        ; { Store this as the number of safe letters used.
 $EDDD LD ($EDC5),A  ; }
 $EDE0 CP $06        ; Have all safe letters been used?
 $EDE2 JP Z,$B3C3    ; If so, the safe is cracked and the game is won!
                     ; Display the final sequence.
*$EDE5 POP HL        ; { Otherwise, restore #REGhl and process more actions.
 $EDE6 JP $EAEB      ; }
; The wrong character is at the safe.
*$EDE9 DEC HL        ; Move back in the list.
 $EDEA LD A,(HL)     ; Get the character ID from here.
 $EDEB CP (IY-$28)   ; Does it equal the current character?
 $EDEE JR Z,$EDE5    ; If so, leave here.
 $EDF0 LD A,$01      ; { Otherwise, reset the number of letters completed back to 1.
 $EDF2 LD ($EDC5),A  ; } 
 $EDF5 JR $EDE5      ; Jump back to return and process more actions.

; Action 7 SPACE. Play the "asteroids" phone box game
c$EDF7 XOR A           ; { Reset the "create new lightning bolts" flag. (#R$FAEF)
 $EDF8 LD ($FAEF),A    ; }
 $EDFB DEC A           ; { Set the missile as inactive. (#R$F9F0) 
 $EDFC LD ($F9F0),A    ; }
; Set the starting position as left or right, depending on which phone booth was entered.
 $EDFF LD (IY+$00),$6E ; Set the current graphic to the space ship. (#R$9158)
 $EE03 LD A,(IY+$05)   ; Get the x co-ordinate.
 $EE06 CP $80          ; { If it's less then #N$80, then set to #N$30,
 $EE08 LD (IY+$05),$C0 ; otherwise set it to #N$C0.
 $EE0C JR NC,$EE12     ;
 $EE0E LD (IY+$05),$30 ; }
*$EE12 LD (IY+$0A),$78 ; Set the y co-ordinate to #N$78.
 $EE16 LD HL,$F879     ; { Copy the initial state (#R$F879) to the working state (#R$80A9).
 $EE19 LD DE,$80A9     ;
 $EE1C LD BC,$003C     ;
 $EE1F LDIR            ; }
 $EE21 CALL $B902      ; Clear the playing area.
; Put stars randomly on-screen.
 $EE24 LD HL,$4800     ; Point #REGhl at the start of the main playing area.
 $EE27 LD D,$00        ; Set #REGd to 0.
 $EE29 LD A,$53        ; { Set #REGr to #N$53, used to generate a random number.
 $EE2B LD R,A          ; }
*$EE2D LD A,R          ; { Put the next value of #REGr in #REGe, in ensuring a
 $EE2F LD E,A          ; pseudo-random offset will be used. }
 $EE30 LD (HL),$20     ; Set bit 5, to print a dot.
 $EE32 ADD HL,DE       ; Move to the next random place.
 $EE33 LD A,H          ; { Continue until we run out of screen and hit
 $EE34 CP $58          ; the attribute area.
 $EE36 JR NZ,$EE2D     ; }
 $EE38 LD HL,$7F02     ; Point #REGhl at the background graphic. (#R$7F02)
 $EE3B LD DE,$0F04     ; Set the position.
 $EE3E CALL $B84B      ; Draw the graphic.
 $EE41 CALL $B9AC      ; Copy the screen to the graphic buffer.
; Run the main loop of the game.
*$EE44 CALL $BAB4      ; Update the "{character} is in {room}" tick count, if any.
 $EE47 CALL $EEA2      ; Update the sprite buffers.
 $EE4A CALL $F93A      ; Check for player's movement.
 $EE4D CALL $F9F5      ; { Move the objects around and check for firing.
 $EE50 CALL $F9F5      ;
 $EE53 CALL $F9F5      ;
 $EE56 CALL $F8B9      ; }
 $EE59 CALL $B9FB      ; Put sprites on screen.
; See if the player is near one of the exit portals.
 $EE5C LD A,(IY+$05)   ; Get the X co-ordinate.
 $EE5F LD B,A          ; { Is it close enough to the right portal?
 $EE60 SUB $24         ;
 $EE62 CP $F8          ; }
 $EE64 JR NC,$EE6D     ; Jump forward if so.
 $EE66 LD A,B          ; { Is it close enough to the left portal?
 $EE67 SUB $D4         ; 
 $EE69 CP $F8          ; }
 $EE6B JR C,$EE44      ; Jump back if not and run the main loop again.
; The x co-ordinate lines up with a portal, so check the y co-ordinate.
*$EE6D LD A,(IY+$0A)   ; Get the Y co-ordinate.
 $EE70 SUB $7C         ; { Is it close enough to the portal?
 $EE72 CP $F8          ; }
 $EE74 JR C,$EE44      ; Jump back if not and run the main loop again.
; The player is by a portal. Work out which one it was, and drop them back into town.
 $EE76 LD A,B          ; Get the X co-ordinate previously stored in B.
 $EE77 CP $80          ; Is it less than #N$80? ie: left hand side
 $EE79 JR NC,$EE85     ; { If it is, set the x co-ordinates as #N$DC 
 $EE7B LD (IY+$05),$04 ; and the room as 01 (Stamp Street),
 $EE7F LD (IY+$0F),$13 ; otherwise, set the x co-ordinate as #N$04 
 $EE83 JR $EE8D        ; and the room as #N$13 (Reference Road).
*$EE85 LD (IY+$05),$DC ;
 $EE89 LD (IY+$0F),$01 ; }
; This entry point is used by the routines at #R$EFC7 and #R$F177.
*$EE8D CALL $B952      ; Draw the room.
 $EE90 LD (IY+$0A),$98 ; Set the y co-ordinate as #N$98 ie: on the floor
 $EE94 LD (IY+$46),$00 ; Set the character as not jumping.
 $EE98 LD (IY+$00),$00 ; Set the frame ID back to 0.
 $EE9C LD SP,$FC00     ; Reset the stack to its initial place.
 $EE9F JP $8194        ; Jump back to the main game loop.

; Initialise the sprite buffers
;
; Used by the routines at #R$813B, #R$ED2A, #R$EDF7, #R$EEC1, #R$EFC7 and
; #R$F177.
;
; .
;
; This routine takes a copy of the screen already in #R$5B00 (set by the
; routine in #R$B9AC) ready to start overlaying sprites on top of it.
c$EEA2 LD DE,$6B00   ; Point #REGde at the sprite buffer.
 $EEA5 LD HL,$5B00   ; Point #REGhl at the screen buffer.
 $EEA8 LD BC,$1000   ; Length is #N$1000.
*$EEAB CALL $BA25    ; Copy a row.
 $EEAE JP PE,$EEAB   ; Loop back while there is more to draw.
; Now copy the attributes.
 $EEB1 LD BC,$0200   ; Length is #N$200.
 $EEB4 LD HL,$FE00   ; Point #REGhl at the attribute buffer.
 $EEB7 LD DE,$FC00   ; Point #REGde at the sprite attribute buffer.
*$EEBA CALL $BA25    ; Copy a row.
 $EEBD JP PE,$EEBA   ; Loop back while there is more to draw.
 $EEC0 RET           ; Otherwise return.

; Refresh the current room
;
; Used by the routines at #R$81AE and #R$B3C3.
c$EEC1 CALL $EEA2    ; Initialize the sprite buffers.
 $EEC4 LD A,(IY+$0F) ; Get the current room in #REGa.
 $EEC7 LD ($B951),A  ;
 $EECA LD B,$00      ; { Point #REGhl at the start of the object buffer for this room.
 $EECC CALL $AA8C    ; }
*$EECF LD A,(HL)     ; Put the object ID.
 $EED0 CP $FF        ; Is this an end marker?
 $EED2 JR Z,$EEE3    ; Jump forward if it is, nothing left to do.
 $EED4 INC HL        ; { Put the co-ordinates found in #REGde.
 $EED5 LD E,(HL)     ;
 $EED6 INC HL        ;
 $EED7 LD D,(HL)     ; }
 $EED8 INC HL        ; { Move to the buffer for the next item.
 $EED9 INC HL        ; }
 $EEDA LD ($A838),DE ; Put the position in the scratch buffer at #R$A838.
 $EEDE CALL $A83D    ; { Draw the object, and loop back to see if there is anything
 $EEE1 JR $EECF      ; further to draw. }
; See if there is any custom routines for this room, and if so, execute them.
*$EEE3 LD E,(IY+$0F) ; { Put the current room in #REGe and double it to get a word offset.
 $EEE6 SLA E         ; 
 $EEE8 LD D,$00      ; }
 $EEEA LD HL,$EEF3   ; { Add the base address of the room logic table (#R$EEF3).
 $EEED ADD HL,DE     ; }
 $EEEE LD E,(HL)     ; { Put the address found in #REGde.
 $EEEF INC HL        ;
 $EEF0 LD D,(HL)     ; }
 $EEF1 EX DE,HL      ; Swap #REGde and #REGhl so #REGhl points to the logic routine.
 $EEF2 JP (HL)       ; Execute it.

; Jump table for custom room logic
;
; If a room has extra code associated with it, a pointer to it is stored here.
; If there is no custom routine, a pointer to #R$F2F6 is stored instead, which is a
; simple RET instruction.
w$EEF3 DEFW $F572   ; The Town Square
 $EEF5 DEFW $F2F6   ; Stamp Street
 $EEF7 DEFW $F24B   ; The Post Office
 $EEF9 DEFW $F2F6   ; Market Street
 $EEFB DEFW $F503   ; The Super Market
 $EEFD DEFW $F674   ; The Park
 $EEFF DEFW $F2F6   ; Wobbly Walk
 $EF01 DEFW $F2F6   ; Rubble Road
 $EF03 DEFW $F43C   ; Wall Street
 $EF05 DEFW $F2F6   ; Pete Street
 $EF07 DEFW $F49D   ; The Work Shed
 $EF09 DEFW $F5F1   ; School Lane
 $EF0B DEFW $F773   ; The School
 $EF0D DEFW $F2F6   ; Baker Street
 $EF0F DEFW $F409   ; The Bakers
 $EF11 DEFW $F309   ; The Pub
 $EF13 DEFW $F4D3   ; Motor Way
 $EF15 DEFW $ED13   ; The Laboratory
 $EF17 DEFW $F2F6   ; The Garage
 $EF19 DEFW $F2F6   ; Reference Road
 $EF1B DEFW $F2F6   ; The Library
 $EF1D DEFW $F2F6   ; Penny Lane
 $EF1F DEFW $F6EC   ; The Bank
 $EF21 DEFW $F746   ; Wally's House
 $EF23 DEFW $F2F6   ; Meat Street
 $EF25 DEFW $F2F6   ; The Butchers
 $EF27 DEFW $F2F6   ; Trunk Road
 $EF29 DEFW $F334   ; The Zoo
 $EF2B DEFW $F2F6   ; Rail Road
 $EF2D DEFW $F2F6   ; The Station
 $EF2F DEFW $F37D   ; The Docks
 $EF31 DEFW $F3AB   ; The Sewer
 $EF33 DEFW $F54F   ; The Cave

; Update the current position of moving objects
;
; Used by the routines at #R$ED2A, #R$ED8A, #R$F10E, #R$F24B, #R$F277, #R$F309,
; #R$F334, #R$F37D, #R$F3AB, #R$F409, #R$F49D, #R$F503, #R$F5F1, #R$F674,
; #R$F6EC, #R$F746, #R$F8B9 and #R$F9F5.
;
; IX pointer to a buffer containing current positions
; BC Pointer to a buffer containing bounds
;
; The buffer containing bounds is fixed at:
; #TABLE(map)
; { 0 | Minimum x co-ordinate }
; { 1 | Maximum x co-ordinate }
; { 2 | Minimum y co-ordinate }
; { 3 | Maximum y co-ordinate }
; TABLE#
;
; The buffer containing the positions varies over time and contains:
; #TABLE(map)
; { 0 | Current x co-ordinate }
; { 1 | Current y co-ordinate }
; { 2 | Distance to move in x }
; { 3 | Distance to move in y }
; TABLE#
; The distances to move are stored as a 2s complement value.
; When an object hits the minimum or maximum value, its distance to move is
; inverted between positive and negative and it starts travelling back in the
; other direction.
;
; .
;
; The function updates #REGix on each call to point at the next entries beyond the one
; it was called with, and can be called multiple times or in a loop
; for each moving object in the room.
c$EF35 LD E,(IX+$02) ; { Put the distance to move in #REGde.
 $EF38 LD D,(IX+$03) ; }
 $EF3B PUSH BC       ; { Store #REGbc and #REGaf.
 $EF3C PUSH AF       ; }
 $EF3D XOR A         ; { Reset flags used in this routine.
 $EF3E LD ($F673),A  ; 
 $EF41 LD ($F672),A  ; }
 $EF44 LD A,(IX+$00) ; Get the current x co-ordinate in #REGa.
 $EF47 ADD A,E       ; Add the distance to move by.
 $EF48 LD L,A        ; Put this in #REGl.
; Check the minimum x co-ordinate.
 $EF49 LD A,(BC)     ; Get the minimum x co-ordinate.
 $EF4A INC BC        ; Point #REGbc to the next place in the buffer.
 $EF4B CP L          ; Is our current x co-ordinate the minimum?
 $EF4C JR NZ,$EF59   ; Jump forward if not.
; x co-ordinate has reached the minimum or maximum.
*$EF4E LD A,$01      ; { Flag x boundary reached.
 $EF50 LD ($F672),A  ; }
 $EF53 LD A,E        ; { Flip the distance to change between negative and positive.
 $EF54 NEG           ;
 $EF56 LD E,A        ; 
 $EF57 JR $EF5D      ; }
; Check the maxmimum x co-ordinate.
*$EF59 LD A,(BC)     ; Get the maxmimum x co-ordinate.
 $EF5A CP L          ; Is our current x co-ordinate the maximum?
 $EF5B JR Z,$EF4E    ; Jump back to flip direction if so.
; x co-ordinate is in range, check the y co-ordinate.
*$EF5D INC BC        ; Point #REGbc to the next place in the buffer.
 $EF5E LD A,(IX+$01) ; Get the current y co-ordinate in #REGa.
 $EF61 ADD A,D       ; Add the distance to move by.
 $EF62 LD H,A        ; Put this in #REGh.
; Check the minimum y co-ordinate.
 $EF63 LD A,(BC)     ; Get the minumum y co-ordinate.
 $EF64 INC BC        ; Point #REGbc to the next place in the buffer.
 $EF65 CP H          ; Is our current y co-ordinate the minimum?
 $EF66 JR NZ,$EF73   ; Jump forward if not.
; y co-ordinate has reached the minimum or maximum.
*$EF68 LD A,$01      ;
 $EF6A LD ($F673),A  ;
 $EF6D LD A,D        ; { Flip the distance to change between negative and positive.
 $EF6E NEG           ;
 $EF70 LD D,A        ; 
 $EF71 JR $EF77      ; }
; Check the maximum y co-ordinate.
*$EF73 LD A,(BC)     ; Get the maximum y co-ordinate.
 $EF74 CP H          ; Is our current y co-ordinate the maxmimum?
 $EF75 JR Z,$EF68    ; Jump back to flip the direction if so.
; The positions have all been updated, so write them out.
*$EF77 LD ($A838),HL ; Write the position to update that will be used
                     ; by the next call to the routine at #R$A83D.
 $EF7A LD (IX+$00),L ; { Write back the positions.
 $EF7D LD (IX+$01),H ; }
 $EF80 LD (IX+$02),E ; { Write back the directions.
 $EF83 LD (IX+$03),D ; }
 $EF86 POP AF        ; { Restore #REGaf and #REGbc. 
 $EF87 POP BC        ; }
; This entry point is used by the routines at #R$F8B9 and #R$FAF0.
*$EF88 INC IX        ; { Move to the next entry and return.
 $EF8A INC IX        ;
 $EF8C INC IX        ;
 $EF8E INC IX        ; 
 $EF90 RET           ; }

; Set the attributes for the fountain in the town square if it is repaired
;
; Used by the routines at #R$F277 and #R$F572.
c$EF91 PUSH AF       ; Remember #REGaf.
 $EF92 EXX           ; Exchange main registers.
 $EF93 LD A,($F26F)  ; { Put the current attribute (#R$F26F) in #REGc.
 $EF96 LD C,A        ; }
 $EF97 LD A,($A839)  ; Get the Y co-ordinate to print. (#R$A838)
 $EF9A AND $07       ; Select bits 0 - 2.
 $EF9C JR Z,$EFA2    ;
 $EF9E LD B,$03      ;
 $EFA0 JR $EFA4      ;
*$EFA2 LD B,$02      ;
*$EFA4 LD A,($A839)  ; Get the Y co-ordinate to print.
 $EFA7 AND $F8       ; Select bits 3 - 8
 $EFA9 LD H,$00      ; { Put this in #REGhl.
 $EFAB LD L,A        ; }
 $EFAC ADD HL,HL     ; { Multiply by 4 to get a suitable offset.
 $EFAD ADD HL,HL     ; }
 $EFAE LD DE,$FB00   ; { Add the base address to get an offset from #R$FC00.
 $EFB1 ADD HL,DE     ; Note that this address is modified by the routines in #R$A83D and #R$A8A0. }
 $EFB2 LD DE,$001E   ; Set #REGde as the amount to increment for each row.
*$EFB5 LD (HL),C     ; { Set the attribute for the next two columns.
 $EFB6 INC HL        ;
 $EFB7 LD (HL),C     ;
 $EFB8 INC HL        ; }
 $EFB9 LD A,($A838)  ; Get the X co-ordinate to print.
 $EFBC AND $07       ; Select bits 0 - 2.
 $EFBE JR Z,$EFC1    ; Jump forward if this is 0.
 $EFC0 LD (HL),C     ; Otherwise set the attribute here.
*$EFC1 ADD HL,DE     ; Move on a row.
 $EFC2 DJNZ $EFB5    ; Loop while all rows are printed.
 $EFC4 EXX           ; Exchange main registers.
 $EFC5 POP AF        ; { Restore #REGaf and return.
 $EFC6 RET           ; }

; Action 9 CHASE. Drop down to the "shark chase" game
c$EFC7 LD A,(IY+$05)   ; Get the X co-ordinate.
 $EFCA SUB $08         ; Move back 8 columns.
 $EFCC CP $E0          ; { If the co-ordinate is greater than #N$E0
 $EFCE JR C,$EFD2      ; then set it to that.
 $EFD0 LD A,$E0        ; }
*$EFD2 SRL A           ; { Divide it by 8 and set the result in #REGe
 $EFD4 SRL A           ; as the column to draw at.
 $EFD6 SRL A           ;
 $EFD8 LD E,A          ; }
 $EFD9 LD D,$17        ; Set the row to #N$17.
 $EFDB LD HL,$7F16     ; Point #REGhl at the data for the hole.
 $EFDE CALL $B82B      ; Patch the display to overwrite graphics.
; A hole has opened, so drop the player down to it.
*$EFE1 LD A,(IY+$0A)   ; Get the Y co-ordinate.
 $EFE4 ADD A,$04       ; Drop down four rows.
 $EFE6 CP $A0          ; { If the co-ordinate is creater than #N$A0,
 $EFE8 JR C,$EFEC      ; set it to that. 
 $EFEA LD A,$A0        ; }
*$EFEC LD (IY+$0A),A   ; Set the new Y co-ordinate.
 $EFEF CALL $81AE      ; Move everything on screen.
 $EFF2 LD A,(IY+$0A)   ; Get the Y co-ordinate.
 $EFF5 CP $A0          ; Is it #N$A0?
 $EFF7 JR NZ,$EFE1     ; Jump back if not to fall some more.
; The player has fallen into the hole, so update for the chase sequence.
 $EFF9 LD (IY+$00),$00 ; Set the frame counter to 0.
 $EFFD LD A,(IY-$3C)   ; Get the current direction of the sprite. (#R$BC2B)
 $F000 OR A            ; Is it 0 (left)?
 $F001 CALL NZ,$81D4   ; If not, need to flip the sprite around to be left-facing.
 $F004 LD A,$F0        ; { Set the shark's X co-ordinate to #N$F0.
 $F006 LD ($F0BD),A    ; }
 $F009 LD HL,$F0B7     ; Point #REGhl directly at the background graphics. (#R$F0B7)
 $F00C CALL $B902      ; Clear the playing area.
 $F00F CALL $B969      ; Draw the background graphics.
 $F012 LD (IY+$05),$DA ; Set the X co-ordinate to #N$DA.
 $F016 LD (IY+$0A),$3C ; Set the Y co-ordinate to #N$3C.
*$F01A LD A,(IY+$0A)   ; Get the Y co-ordinate.
 $F01D CP $98          ; Is the player on the ground yet?
 $F01F JR Z,$F026      ; Jump forward if so.
 $F021 ADD A,$04       ; { Otherwise just drop down a row.
 $F023 LD (IY+$0A),A   ; }
*$F026 CALL $EEA2      ; Initialize the sprite buffers.
 $F029 CALL $F057      ; Update the shark.
 $F02C CALL $F0C0      ; Check for player movement.
 $F02F CALL $B0E6      ; Update the sprite buffer.
 $F032 CALL $B9FB      ; Put the sprites on screen.
 $F035 LD A,(IY+$05)   ; Get the Y co-ordinate.
 $F038 OR A            ; Is it 0?
 $F039 JR NZ,$F01A     ; Jump back if it's not.
 $F03B LD (IY+$0F),$1F ; Set the Y co-ordinate to #N$1F.
 $F03F LD (IY+$05),$F0 ; Set the X co-ordinate to #N$F0.
 $F043 JP $EE8D        ; Move to the sewer.

; Direction of the shark
;
; 0 - left, 1 - right
g$F046 DEFB $00        ;

; Flip the shark so it's the right way round.
;
; Used by the routines at #R$F057 and #R$F3AB.
c$F047 EXX           ; Exchange main registers.
 $F048 XOR $01       ; { Flip bit 1 in #R$F046.
 $F04A LD ($F046),A  ; }
 $F04D LD DE,$88F8   ; Point #REGde at the shark graphic. (#R$88F8)
 $F050 LD BC,$00C0   ; Set the size.
 $F053 CALL $81E3    ; Change the sprite to reverse direction.
 $F056 RET           ; Return.

; Chase : Update the shark
;
; Used by the routine at #R$EFC7.
c$F057 LD A,($F046)  ; Get the shark's direction.
 $F05A OR A          ; Is it facing left?
 $F05B CALL NZ,$F047 ; If not, reverse the graphic so it is.
 $F05E LD HL,($F0BD) ; { Put the x co-ordinate in #REGl and set the y co-ordinate to #N$98.
 $F061 LD H,$98      ; }
 $F063 LD A,$30      ; Set the object ID to be the shark's head (#N$88F8)
 $F065 LD ($A838),HL ; Set the position.
 $F068 CALL $A8A0    ; Put the object in the sprite buffer.
 $F06B LD H,$A8      ; Set the y co-ordinate to #N$A8.
 $F06D LD ($A838),HL ; Set the position.
 $F070 LD A,($F3A0)  ; Get the object ID of the shark's body.
 $F073 XOR $02       ; { Toggle bit 2, so it alternates between #N$2D and #N$2F.
 $F075 LD ($F3A0),A  ; }
 $F078 CALL $A8A0    ; Put the object in the sprite buffer.
 $F07B LD A,$0C      ; { Touching the shark drops endurance by #N$0C.
 $F07D LD ($F26E),A  ; }
 $F080 CALL $E329    ; Check for collision detection.
 $F083 LD A,(IY+$0A) ; Get the player's Y co-ordinate.
 $F086 CP $98        ; Is it #N$98 ie: ground level.
 $F088 RET NZ        ; Return if it is, chase hasn't started.
; The chase is on.
 $F089 LD HL,$F0BD   ; Point #REGhl to the shark's x co-ordinate.
 $F08C LD A,(HL)     ; { Has the shark caught up with the player?
 $F08D SUB (IY+$05)  ; 
 $F090 SUB $01       ;
 $F092 CP $FE        ; }
 $F094 JR NC,$F09A   ; Jump forward if it has, it doesn't need to chase any more.
 $F096 LD A,(HL)     ; { Otherwise decrement the X co-ordinate by 2.
 $F097 SUB $02       ;
 $F099 LD (HL),A     ; }
*$F09A LD A,(HL)     ; { Is the shark close enough to the player to attack?
 $F09B SUB (IY+$05)  ;
 $F09E SUB $0C       ;
 $F0A0 CP $E0        ; }
 $F0A2 JR C,$F0AE    ; Jump forward if it isn't.
; The shark is close enough to attack the player, so don't make them advance
; otherwise they'll overtake and not attack anymore.
 $F0A4 INC (HL)      ; Increment the X co-ordinate.
 $F0A5 LD A,($F0E4)  ; Get the number of ticks in this run.
 $F0A8 INC A         ; Increment it.
 $F0A9 CP $05        ; { Return if it doesn't equal 5 yet.
 $F0AB RET Z         ; }
 $F0AC JR $F0B3      ; Otherwise set it to that value.
; The shark isn't close enough yet.
*$F0AE LD A,($F0E4)  ; Get the number of ticks in this run.
 $F0B1 DEC A         ; Decrement it.
 $F0B2 RET Z         ; Return if it doesn't equal 0 yet.
*$F0B3 LD ($F0E4),A  ; { Otherwise set it to that value and return.
 $F0B6 RET           ; }

; Chase : Room data
;
; #CALL:print_room_data(#PC,chase)
b$F0B7 DEFB $80,$07,$75,$03,$7F,$00

; Chase : Current x co-ordinate of the shark
g$F0BD DEFB $F0

; Chase : The amount of ticks left to move the player on this control action
b$F0BE DEFB $04

; Chase : The next direction control the player should use to move
;
; 1 - left, 0 - right
b$F0BF DEFB $00

; Chase : Check for player movement
;
; Used by the routine at #R$EFC7.
c$F0C0 LD A,(IY+$0A)   ; Get the Y co-ordinate.
 $F0C3 CP $98          ; Is the player on the floor yet?
 $F0C5 RET NZ          ; Return if so.
 $F0C6 CALL $B03C      ; { Check for 'left' and put the result in #REGc.
 $F0C9 LD C,A          ; }
 $F0CA CALL $B00B      ; { Check for 'right' and put the result in #REGb.
 $F0CD LD B,A          ; }
 $F0CE LD A,($F0BF)    ; Get the next direction control. (#R$F0BF)
 $F0D1 OR A            ; Is it zero?
 $F0D2 JR NZ,$F0DB     ; Jump forward if it isn't.
; Player should be moving left.
 $F0D4 LD A,B          ; { Did the player move right?
 $F0D5 OR A            ; }
 $F0D6 JR NZ,$F0FB     ; Jump forward to reduce the tick count if so.
 $F0D8 LD A,C          ; { Otherwise test for moving left.
 $F0D9 JR $F0E0        ; }
; Player should be moving right.
*$F0DB LD A,C          ; { Did the player move left?
 $F0DC OR A            ; }
 $F0DD JR NZ,$F0FB     ; Jump forward to reduce the tick count if so.
 $F0DF LD A,B          ; Otherwise test for moving right.
*$F0E0 OR A            ; Did the player move in the correct direction?
 $F0E1 JR Z,$F0FB      ; If not, skip forward to reducing the frame count.
; The character moved in the right way, so move them forward.
 $F0E3 LD A,$05        ; { Set the number of ticks left (#R$F0BE) to 5.
 $F0E5 LD ($F0BE),A    ; }
 $F0E8 LD A,($F0BF)    ; { Invert the direction flag.
 $F0EB XOR $01         ; 
 $F0ED LD ($F0BF),A    ; }
*$F0F0 LD (IY+$3C),$FF ; { Set the direction to left.
 $F0F4 LD (IY+$41),$FF ; }
 $F0F8 JP $B288        ; Move the character.
; Move forward one frame.
*$F0FB LD HL,$F0BE     ; Point #REGhl at the tick count. (#R$F0BE)
 $F0FE LD A,(HL)       ; Get the value in #REGa.
 $F0FF OR A            ; Is it zero?
 $F100 RET Z           ; Return if it is.
 $F101 DEC (HL)        ; { Otherwise, reduce the tick count and move.
 $F102 JR $F0F0        ; }

; Movement table : Jumping jack
g$F104 DEFB $00,$A8,$02,$FE

; Next room for the jumping jack to appear in.
g$F108 DEFB $05

; Tick counter until the jumping jack updates
g$F109 DEFB $02

; Bounds table : Jumping jack
b$F10A DEFB $00,$F0,$A0,$A8

; See if the jumping jack needs to be on screen, and if so, move it
;
; Used by the routine at #R$81AE.
c$F10E LD A,$04        ; { Touching the jumping jack drops endurance by 4.
 $F110 LD ($F26E),A    ; }
 $F113 LD IX,$F104     ; Point #REGix at the movement table.
 $F117 LD BC,$F10A     ; Point #REGbc at the bounds.
 $F11A CALL $EF35      ; Update the object positions.
 $F11D LD A,(IX-$04)   ; Get the x co-ordinate.
 $F120 OR A            ; Is it zero?
 $F121 JR NZ,$F13F     ; Jump forward if it isn't.
 $F123 DEC (IX+$01)    ; Decrement the tick counter.
 $F126 JR NZ,$F13F     ; Jump forward if it's not zero.
; The tick counter has reached 0, need to update.
 $F128 LD (IX+$01),$02 ; Set the tick counter back to 2.
 $F12C LD (IX-$04),$00 ; Set the x co-ordinate to 0.
 $F130 LD (IX-$03),$A8 ; Set the y co-ordinate to #N$A8.
 $F134 LD (IX-$01),$FE ; Set the direction to -2. (ie: 2 updwards)
 $F138 CALL $AF01      ; { Set the next room for the jumping jack to appear in.
 $F13B LD (IX+$00),A   ; and return.
 $F13E RET             ; }
; Now draw the jumping jack if it's visible.
*$F13F LD A,(IX+$00)   ; Get the jumping jack's current room.
 $F142 CP (IY+$0F)     ; Is it the same room the player is in?
 $F145 RET NZ          ; Return if not.
; The jumping jack is in the same room as the player, so draw it.
 $F146 LD A,(IX-$03)   ; Get the Y co-ordinate.
 $F149 CP $A8          ; { If it's #N$A8, 
 $F14B LD A,$48        ; set #REGa to the first jumping jack graphic. (#R$8C78)
 $F14D JR NZ,$F151     ; Otherwise, set #REGa to the second jumping jack graphic
 $F14F LD A,$4A        ; }
*$F151 CALL $A8A0      ; Put the object in the sprite buffer.
 $F154 CALL $E329      ; Check for collision detection.
 $F157 RET             ; Return.

; Initial co-ordinate moving to a room with more miles.
b$F158 DEFB $00

; Initial co-ordinate moving to a room with less miles.
b$F159 DEFB $00

; The direction to face movable objects in the "out of town" screen
;
; 1 = right, 2 = left
b$F15A DEFB $00

; The number of miles walked out of town
w$F15B DEFW $0000

; Room data : Out of town
;
; #CALL:print_room_data(#PC,outoftown)
b$F15D DEFB $80,$07,$86,$20,$86,$70,$86,$C8
 $F165 DEFB $89,$07,$89,$2F,$89,$57,$89,$7F
 $F16D DEFB $8A,$A7,$8A,$C7,$8A,$E7,$74,$46
 $F175 DEFB $7F,$00

; Action A OUT. Go to the "out of town" screen
c$F177 LD A,(IY+$05)   ; Put the X co-ordinate in #REGa.
 $F17A LD HL,$06EA     ; Set the extremities in #REGhl.
 $F17D CP $80          ; Is the character position greater than 80?
 $F17F LD A,$FE        ; Set starting position as the far right.
 $F181 JR C,$F188      ; If not, the character's moved left to here, so jump forward.
 $F183 LD HL,$EA06     ; Set the extremities in #REGhl.
 $F186 LD A,$02        ; Set position at the far left.
*$F188 LD ($F158),HL   ; Store the extremeties.
 $F18B LD ($F15A),A    ; Store the current position.
 $F18E LD HL,$0000     ; { Set the number of miles walked to 0. (#R$F15B)
 $F191 LD ($F15B),HL   ; }
 $F194 LD (IY+$0A),$98 ; Ensure the player is on the ground.
 $F198 CALL $B902      ; Clear the playing area.
 $F19B LD HL,$F15D     ; Point #REGhl to the graphics data.
 $F19E CALL $B969      ; Draw it.
 $F1A1 JR $F1D2        ; Enter the room.
*$F1A3 CALL $EEA2      ; Initialize the sprite buffers.
 $F1A6 CALL $F202      ; Print the number of miles out of town
 $F1A9 LD A,$04        ; { Touching an arrow drops the endurance by 4.
 $F1AB LD ($F26E),A    ; }
 $F1AE LD A,($F15A)    ; Get the direction of arrows.
 $F1B1 CP $02          ; Is the direction left?
 $F1B3 LD A,$82        ; Set #REGa to "left arrow".
 $F1B5 JR Z,$F1B9      ; Jump if the direction is left.
 $F1B7 LD A,$84        ; Set #REGa to "right arrow".
*$F1B9 CALL $ED8A      ; Set up moving objects (the movement is the same as the Laboratory).
 $F1BC CALL $B09F      ; Get user input.
 $F1BF CALL $B0E6      ; Put characters in the sprite buffer.
 $F1C2 CALL $B9FB      ; Put the sprites on scren.
 $F1C5 LD BC,($F158)   ; Get the co-ordinate limits in #REGbc.
 $F1C9 LD HL,($F15B)   ; Put the number of miles walked in #REGhl.
 $F1CC LD A,(IY+$05)   ; Put the X co-ordinate in #REGb.
 $F1CF CP B            ; Has it reached the edge?
 $F1D0 JR NZ,$F1E6     ; Jump forward if it hasn't.
; Move to a room with more miles.
*$F1D2 LD BC,($F158)   ; Put the extremities in #REGbc.
 $F1D6 LD HL,($F15B)   ; Put the number of miles in #REGhl.
 $F1D9 LD A,($F15A)    ; Put the direction in #REGc.
 $F1DC ADD A,C         ; { Set the X co-ordinate to the initial position.
 $F1DD LD (IY+$05),A   ; }
 $F1E0 INC HL          ; { Increment the number of miles.
 $F1E1 LD ($F15B),HL   ; }
 $F1E4 JR $F1A3        ; Jump back to run the room.
; Move to a room with less miles.
*$F1E6 CP C            ; Is the Y co-ordinate at the edge?
 $F1E7 JR NZ,$F1A3     ; Jump back if it isn't.
 $F1E9 DEC HL          ; { Decrement the number of miles.
 $F1EA LD ($F15B),HL   ; }
 $F1ED LD A,H          ; { Is this zero?
 $F1EE OR L            ; }
 $F1EF JR Z,$F1FC      ; If so, jump forward as we're back in town.
 $F1F1 LD A,($F15A)    ; Put the direction in #REGa.
 $F1F4 LD C,A          ; { Set the X co-ordinate to the initial position.
 $F1F5 LD A,B          ;
 $F1F6 SUB C           ; }
 $F1F7 LD (IY+$05),A   ; Set the new X co-ordinate.
 $F1FA JR $F1A3        ; Jump back to run the room.
; Finally found our way back to town.
*$F1FC LD (IY+$05),B   ; Set the X co-ordinate as the starting point for a room with less miles.
 $F1FF JP $EE8D        ;

; Print the current miles "out of town"
;
; Used by the routine at #R$F177.
c$F202 LD HL,($F15B) ; Put the number of miles in #REGhl.
 $F205 LD BC,$DFDC   ; { Set the drawing routine at #R$B7BA to use the character set (#R$DFDC) as a base address.
 $F208 LD ($B7E9),BC ; }
 $F20C LD DE,$1208   ; Set the position.
 $F20F LD A,$2F      ; Set #REGa just before ASCII '0' so the correct digits are printed.
 $F211 LD BC,$2710   ; { Print tens of thousands.
 $F214 CALL $F233    ; }
 $F217 LD BC,$03E8   ; { Print thousands.
 $F21A CALL $F233    ; }
 $F21D LD BC,$0064   ; { Print hundreds.
 $F220 CALL $F233    ; }
 $F223 LD BC,$000A   ; { Print tens.
 $F226 CALL $F233    ; }
 $F229 LD BC,$0001   ; { Print units.
 $F22C CALL $F233    ; }
 $F22F LD A,$4D      ; { Print 'M'.
 $F231 JR $F23A      ; }

; Print a digit for the miles "out of town"
;
; Used by the routine at #R$F202.
;
; A Base character to use for drawing.
; HL Number of miles to print
; BC Value to divide by (to select the correct digit)
c$F233 INC A         ; Increment the current character.
 $F234 AND A         ; Reset the carry flag.
 $F235 SBC HL,BC     ; Decrement by the divisor.
 $F237 JR NC,$F233   ; Repeat while there is no carry,
                     ; which will leave the result of the division in #REGa.
 $F239 ADD HL,BC     ; Restore the last decrement so the number of miles is correct.
; This entry point is used by the routine at #R$F202.
*$F23A LD C,$70      ; Use bright black on yellow.
 $F23C CALL $B7F9    ; Print the graphic.
 $F23F INC E         ; Move to the next row.
 $F240 LD A,$2F      ; Set #REGa back to just before ASCII '0' for the next run.
 $F242 RET           ; Return.

; Movement table : The Post Office
g$F243 DEFB $20,$44,$04,$02

; Bounds table : The Post Office
b$F247 DEFB $98,$A0,$FC,$02

; Room logic : The Post Office.
c$F24B LD A,$04      ; { Touching a stamp drops the endurance by 4.
 $F24D LD ($F26E),A  ; }
 $F250 LD IX,$F243   ; Point #REGix at the movement table.
 $F254 LD BC,$F2F7   ; Point #REGbc at the stamp table.
 $F257 CALL $EF35    ; Update moving objects.
 $F25A LD A,$7A      ; Select the ID for the stamp. (#R$92B8)
 $F25C CALL $A8A0    ; Draw it.
 $F25F CALL $E329    ; Check for collision detection.
 $F262 LD A,$7A      ; Select the ID for the stamp.
 $F264 CALL $EF35    ; Update moving objects.
 $F267 CALL $A8A0    ; Draw the stamp.
 $F26A CALL $E329    ; Check for collision detection.
 $F26D RET           ; Return.

; The amount to decrease endurance by in a collision
g$F26E DEFB $00

; The next attribute to use with drawing
b$F26F DEFB $43

; Movement table : Herbert
g$F270 DEFB $5A,$A8,$01,$00

; Current room Herbert is in
g$F274 DEFB $00

; Current tick count until Herbert moves
g$F275 DEFB $03

; Current object ID for Herbert. (#N$40 - #N$46)
g$F275 DEFB $40

; Move Herbert
;
; Used by the routine at #R$81AE.
c$F277 LD A,$02      ; { Touching Herbert reduces endurance by 2.
 $F279 LD ($F26E),A  ; }
 $F27C LD IX,$F270   ; Point #REGix at the movement table.
 $F280 LD BC,$F2F7   ; Point #REGbc at the bounds.
 $F283 CALL $EF35    ; Update object positions.
 $F286 LD A,(IX+$00) ; Get Herbert's current room.
 $F289 CALL $AC69    ; Get the "next rooms" table for this room.
 $F28C INC HL        ; Move to the second byte in the table.
 $F28D LD A,(HL)     ; Get the target co-ordinate.
 $F28E CALL $AC5F    ; Get the address of the co-ordinate table.
 $F291 LD A,(HL)     ; Get the target co-ordinate.
 $F292 CP (IX-$04)   ; Is it Herbert's current x co-ordinate?
 $F295 JR NZ,$F2C3   ; Jump forward if it isn't.
 $F297 DEC (IX+$01)  ; Decerement Herbert's tick count.
 $F29A JR NZ,$F2C3   ; Jump forward while it is 0.
 $F29C LD A,R        ; { Get a random number between 3 and 6.
 $F29E AND $03       ;
 $F2A0 ADD A,$03     ; }
 $F2A2 LD (IX+$01),A ; Set this as the new tick count.
*$F2A5 CALL $AF01    ; Set the next room for Herbert to appear in.
 $F2A8 CP $1F        ; { If this is the Sewer, jump back and choose again.
 $F2AA JR Z,$F2A5    ; }
 $F2AC LD (IX+$00),A ; Set the new room.
 $F2AF CALL $AC69    ; Get the "next rooms" table for this room.
 $F2B2 INC HL        ; Move to the second byte in the buffer.
 $F2B3 LD A,(HL)     ; Get the target co-ordinate.
 $F2B4 CALL $AC5F    ; Get the address of the co-ordinate table.
 $F2B7 LD A,(HL)     ; Get the x co-ordinate.
 $F2B8 ADD A,$02     ; Add 2 to it.
 $F2BA CP $EE        ; { Set a ceiling of #N$EE.
 $F2BC JR C,$F2C0    ;
 $F2BE LD A,$EE      ; }
*$F2C0 LD (IX-$04),A ; Set the new x co-ordinate.
; Draw Herbert if he's visible.
*$F2C3 LD A,(IX+$00) ; Get Herbert's current room.
 $F2C6 CP (IY+$0F)   ; Is this the room the player is in?
 $F2C9 RET NZ        ; Return if not.
; Herbert is in the same room as the player, so draw him.
 $F2CA LD A,(IX-$02) ; Get the x direction difference.
 $F2CD LD BC,$4440   ; { Set Herbert to use object IDs #N$40 - #N$42 if he's moving right,
 $F2D0 CP $01        ; or #N$44 - #N$46 if he is moving left.
 $F2D2 JR Z,$F2D7    ; 
 $F2D4 LD BC,$4844   ; }
*$F2D7 LD A,(IX+$02) ; Get Herbert's current object ID.
 $F2DA ADD A,$02     ; { Ensure the object ID cycles between the two set values.
 $F2DC CP B          ; 
 $F2DD JR C,$F2E2    ; 
*$F2DF LD A,C        ; 
 $F2E0 JR $F2E5      ;
*$F2E2 CP C          ; 
 $F2E3 JR C,$F2DF    ; }
*$F2E5 LD (IX+$02),A ; Set the new object ID for Herbert.
 $F2E8 CALL $A8A0    ; Draw Herbert.
 $F2EB LD A,$46      ; { Set bright yellow on black.
 $F2ED LD ($F26F),A  ; }
 $F2F0 CALL $EF91    ; Set the attributes for the fountain in the Town Square.
 $F2F3 CALL $E329    ; Check for collision detection.
 $F2F6 RET           ; Return.

; Bounds table : Full left / right on screen
b$F2F7 DEFB $00,$F0,$40,$A8

; Bounds table : The Pub
b$F2FB DEFB $20,$D8

; Movement table : The Pub
g$F2FD DEFB $22,$90,$02,$00,$D6,$90,$FE,$00
 $F305 DEFB $78,$90,$04,$00

; Room logic : The Pub
c$F309 LD A,$06      ; { Touching a mug drops endurance by 6.
 $F30B LD ($F26E),A  ; }
 $F30E LD IX,$F2FD   ; Point #REGix at the data for this room..
 $F312 LD B,$03      ; 3 objects to draw.
*$F314 PUSH BC       ; Remember the count in #REGbc.
 $F315 LD A,$29      ; Use object ID 29 (pint glass) (#R$8898)
 $F317 LD BC,$F2FB   ; Set the bounds.
 $F31A CALL $EF35    ; Update object positions.
 $F31D CALL $A8A0    ; Draw the object.
 $F320 CALL $E329    ; Check for collision detection.
 $F323 POP BC        ; Restore the count in #REGbc.
 $F324 DJNZ $F314    ; Loop while there are more objects to draw.
 $F326 RET           ; Otherwise return.

; Movement table : The Zoo
g$F327 DEFB $32,$64,$FE,$00,$60,$32,$6E,$00
 $F32F DEFB $02

; Bounds table : The Zoo
b$F330 DEFB $08,$60,$00,$A8

; Room logic : The Zoo
c$F334 LD A,$08        ; { Touching a banana drops endurance by 8.
 $F336 LD ($F26E),A    ; }
 $F339 LD IX,$F327     ; Point #REGix at the data for this room.
 $F33D LD BC,$F330     ; Set the bounds.
 $F340 CALL $EF35      ; Update moving objects.
 $F343 LD A,(IX+$00)   ; Get the current object ID. (#R$8F78)
 $F346 INC A           ; Increment it.
 $F347 CP $64          ; Is it now #N64?
 $F349 JR NZ,$F34D     ; Skip the next bit if not.
 $F34B LD A,$60        ; Otherwise reset to ID #N$60.
*$F34D LD (IX+$00),A   ; Set the new object ID.
 $F350 CALL $A83D      ; Draw the object.
 $F353 INC IX          ; Move to the next position in the buffer.
 $F355 CALL $EF35      ; Update moving objects.
 $F358 LD A,$64        ; Point #REGa at the object ID for the banana. (#R$8FF8)
 $F35A CALL $A83D      ; Draw the object.
 $F35D CALL $E329      ; Check for collision detection.
 $F360 LD A,(IX-$01)   ; Get the Y direction change.
 $F363 CP $FE          ; Is it now trying to move upwards?
 $F365 RET NZ          ; Return if so.
; The banana has hit the boundary, instead of reversing direction, draw it
; again from the start.
 $F366 LD (IX-$03),$6E ; Set the Y co-ordinate back to #N$6E.
 $F36A LD (IX-$01),$02 ; Set the direction change back to 2 downwards.
 $F36E LD A,(IX-$09)   ; { Set the X co-ordinate to the same as the monkey,
 $F371 LD (IX-$04),A   ; so it looks like the monkey has directly thrown the banana. }
 $F374 RET             ; Return.

; Movement table : The Docks
g$F375 DEFB $78,$A8,$02,$00
 $F379 DEFB $78,$A8,$FE,$00

; Room logic : The Docks
c$F37D LD A,$04      ; { Touching a moving object drops endurance by 4.
 $F37F LD ($F26E),A  ; }
 $F382 LD IX,$F375   ; Point #REGix at the movement table. (#R$F375)
 $F386 LD BC,$F2F7   ; Point #REGbc at the boundary table. (#R$F2F7)
 $F389 CALL $EF35    ; Update moving object.
 $F38C LD A,$78      ; Set the object ID to the life raft. (#R$9278)
 $F38E CALL $A8A0    ; Draw the object.
 $F391 CALL $E329    ; Check for collision detection.
 $F394 CALL $EF35    ; Update the next moving object.
 $F397 LD A,$78      ; Set the object ID to the life raft. (#R$9278)
 $F399 CALL $A8A0    ; Draw the object.
 $F39C CALL $E329    ; Check for collision detection.
 $F39F RET           ; Return.

; The animation state for the shark in the Sewer
b$F3A0 DEFB $2C

; Bounds table : The Sewer
b$F3A1 DEFB $00,$50

; Movement table : The Sewer
g$F3A3 DEFB $0A,$98,$02,$00
 $F3A7 DEFB $0A,$A8,$02,$00

; Room logic : The Sewer
c$F3AB LD A,$40      ; { Touching the shark drops endurance by 64,
 $F3AD LD ($F26E),A  ; which can kill a player pretty quickly. }
 $F3B0 LD IX,$F3A3   ; Point #REGix to the movement table. (#R$F3A3)
; Make sure the shark is facing the right way.
 $F3B4 LD A,(IX+$02) ; Get the distance to move in X.
 $F3B7 CP $02        ; Compare it to +2 ie: moving right.
 $F3B9 LD A,($F046)  ; Get the shark's direction.
 $F3BC JR Z,$F3C4    ; If the distance is positive, nothing to do.
; Shark should be facing left.
 $F3BE OR A          ; Is the direction 0? (left)
 $F3BF CALL NZ,$F047 ; { If not, need to flip the shark the other way round.
 $F3C2 JR $F3C8      ; }
; Shark should be facing right.
*$F3C4 OR A          ; Is the direction 0? (left)
 $F3C5 CALL Z,$F047  ; If so, need to flip the shark the other way round.
; Now draw the shark.
*$F3C8 LD A,$30      ; Set the object ID to be the shark's head.
 $F3CA LD BC,$F3A1   ; Point #REGbc to the bounds table. (#R$F3A1)
 $F3CD CALL $EF35    ; Update the position.
 $F3D0 CALL $A8A0    ; Draw the graphic.
 $F3D3 LD A,($F3A0)  ; Get the next ID for the shark's body.
 $F3D6 XOR $02       ; { Cycle bit 2 so it changes between #N$2D and #N$2F.
 $F3D8 LD ($F3A0),A  ; }
 $F3DB CALL $EF35    ; Update the position.
 $F3DE CALL $A8A0    ; Draw the graphic.
; Check to see if the player has the meat.
 $F3E1 LD A,($BD78)  ; Get the item in the sewer.
 $F3E4 CP $17        ; Is it the meat?
 $F3E6 RET Z         ; If so, the shark won't harm the player, so return.
 $F3E7 LD A,$17      ; { Otherwise, is the player's first item the meat?
 $F3E9 CP (IY+$50)   ; }
 $F3EC RET Z         ; Return if it is.
 $F3ED CP (IY+$55)   ; Otherwise, is the player's second item the meat?
 $F3F0 RET Z         ; Return if it is.
; The player doesn't have the meat, if they touch the shark it's bad news.
 $F3F1 LD A,($A839)  ; { Move up two rows and check collision detection.
 $F3F4 SUB $10       ;
 $F3F6 LD ($A839),A  ;
 $F3F9 CALL $E329    ; }
 $F3FC RET           ; Return.

; Bounds table : The Bakers
b$F3FD DEFB $00,$F0,$78,$A8

; Movement table : The Bakers
g$F401 DEFB $00,$80,$02,$FC
 $F405 DEFB $64,$8C,$02,$04

; Room logic : The Bakers
c$F409 LD A,$06        ; { Touching a moving object drops endurance by 6.
 $F40B LD ($F26E),A    ; }
 $F40E LD IX,$F401     ; Point #REGix at the movement table. (#R$F401)
 $F412 LD B,$02        ; 2 moving objects to draw.
*$F414 PUSH BC         ; Store #REGbc.
 $F415 LD BC,$F3FD     ; Point #REGbc at the boundary table.
 $F418 CALL $EF35      ; Update the moving object.
 $F41B LD A,E          ; Get the x co-ordinate.
 $F41C CP $FE          ; Is it #N$FE?
 $F41E JR NZ,$F430     ; Jump forward if it isn't.
; The toast is off-screen, so redraw it back at the other end.
 $F420 LD (IX-$01),$FC ; Set the y difference as -4.
 $F424 LD (IX-$02),$02 ; Set the x difference at +2.
 $F428 LD (IX-$03),$80 ; Set the y co-ordinate as #N$80.
 $F42C LD (IX-$04),$00 ; Set the x co-ordinate as 00.
; Now draw the toast.
*$F430 LD A,$32        ; Use the ID of the toast. (#R$89B8)
 $F432 CALL $A8A0      ; Draw the object.
 $F435 CALL $E329      ; Check for collision detection.
 $F438 POP BC          ; Restore #REGbc.
 $F439 DJNZ $F414      ; Loop while there are still objects to update.
 $F43B RET             ; Otherwise return.

; Room logic : Wall Street
c$F43C LD A,$09      ; { Is flag 9 (wall built) set?
 $F43E CALL $EC1D    ; }
 $F441 JR Z,$F479    ; Jump forward if it is.
 $F443 LD A,$06      ; { Is flag 6 (battery charged) set?
 $F445 CALL $EC1D    ; }
 $F448 JR Z,$F479    ; Jump forward if it is.
 $F44A LD A,($BD01)  ; { Is the battery the first item in the room?
 $F44D CP $04        ; }
 $F44F JR NZ,$F479   ; Jump forward if it isn't.
 $F451 LD A,(IY+$05) ; Get the x co-ordinate.
 $F454 SUB $42       ; { Is it by the fork lift?
 $F456 CP $FC        ; }
 $F458 JR C,$F479    ; Jump foward if it isn't.
; The fork lift truck has a charged battery and the player is standing
; by the lift, so it can be activated.
 $F45A LD A,($AF88)  ; Get the fork lift's position.
 $F45D SUB (IY+$0A)  ; { Is the player standing on it?
 $F460 SUB $22       ;
 $F462 CP $FC        ; }
 $F464 JR C,$F479    ; Jump forward if they aren't.
; The player is standing on the fork lift, so move it.
 $F466 LD A,($AF88)  ; Get the fork lift's position.
 $F469 SUB $02       ; Move it up two positions.
 $F46B CP $78        ; { Restrict the height to #N$78, 
 $F46D JR NC,$F471   ; 
 $F46F LD A,$78      ; } 
*$F471 LD ($AF88),A  ; Set the new height.
 $F474 SUB $20       ; { Set the player's y co-ordinate above the lift.
 $F476 LD (IY+$0A),A ; }
*$F479 LD A,($AF88)  ; Get the fork lift's position.
 $F47C LD B,$10      ; { Invert it to get a y co-ordinate on screen.
 $F47E CP $B8        ;
 $F480 JR Z,$F484    ;
 $F482 LD B,$0E      ;
*$F484 SUB B         ; }
 $F485 LD H,A        ; Set the y co-ordinate.
 $F486 LD L,$40      ; x co-ordinate is always #N$40.
 $F488 LD ($A838),HL ; Set the position of the fork lift.
 $F48B LD A,$2B      ; Set the ID of the fork lift. (#R$88D8)
 $F48D CALL $A83D    ; { Draw the object and return.
 $F490 RET           ; }

; Movement table : The Work Shed
g$F491 DEFB $40,$64,$00,$02
 $F495 DEFB $64,$40,$00,$02
 $F499 DEFB $DC,$78,$00,$02

; Room logic : The Work Shed
c$F49D LD A,$06        ; { Touching a moving object drops endurance by 6.
 $F49F LD ($F26E),A    ; }
 $F4A2 LD IX,$F491     ; Point #REGix at the movement table. (#R$F491)
 $F4A6 LD B,$03        ; 3 objects to draw.
*$F4A8 PUSH BC         ; Store the count in #REGbc.
 $F4A9 LD BC,$F2F7     ; Point #REGbc at the bounds table. (#R$F2F7)
 $F4AC CALL $EF35      ; Update moving objects.
 $F4AF LD A,D          ; Get the Y co-ordinate.
 $F4B0 CP $FE          ; Is it #N$FE ie: off screen?
 $F4B2 JR NZ,$F4C6     ; Jump forward if it isn't.
; A hammer has moved off screen, so recreate it.
 $F4B4 LD (IX-$01),$02 ; Set the direction in y to +2.
 $F4B8 LD (IX-$03),$40 ; Set the y co-ordinate to #N$40 ie: top of screen.
 $F4BC LD A,R          ; { Set the x co-ordinate to a random location
 $F4BE AND $3F         ; between #N$38 and #N$B6, rounded to the nearest
 $F4C0 ADD A,A         ; even number.
 $F4C1 ADD A,$38       ;
 $F4C3 LD (IX-$04),A   ; }
*$F4C6 LD A,$34        ; Use object ID #$34 (hammer) (#R$89F8)
 $F4C8 CALL $A8A0      ; Draw the object.
 $F4CB CALL $E329      ; Check for collision detection.
 $F4CE POP BC          ; Restore #REGbc.
 $F4CF DJNZ $F4A8      ; Loop while there are more objects to draw.
 $F4D1 RET             ; Otherwise return.

; The animation state for the flame in Motor Way
b$F4D2 DEFB $4C

; Room logic : Motor Way
;
; Check the pipe is patched, and display the flame if not
c$F4D3 LD A,($BD7D)  ; { Is the pipe in the cave?
 $F4D6 CP $1D        ; }
 $F4D8 JR NZ,$F4E0   ; Jump forward if it isn't.
 $F4DA LD A,$05      ; { Is flag 5 (pipe patched) set?
 $F4DC CALL $EC1D    ; }
 $F4DF RET NZ        ; Return if it is.
; The pipe is either leaking or not in the cave, so the
; gas leak means there's a fire here that needs drawing.
*$F4E0 LD HL,$A880   ; { Set the location of the flame.
 $F4E3 LD ($A838),HL ; }
 $F4E6 LD A,$04      ; { Touching the flame (if it's there)
 $F4E8 LD ($F26E),A  ; drops endurance by 4. }
 $F4EB LD A,($F4D2)  ; Get the current frame ID. (#R$F4D2)
 $F4EE INC A         ; Increment it.
 $F4EF CP $50        ; Does it equal #N$50?
 $F4F1 JR NZ,$F4F5   ; Skip the next bit if it doesn't.
 $F4F3 LD A,$4C      ; Otherwise reset it back to #N$4C.
*$F4F5 LD ($F4D2),A  ; Set the new frame ID.
 $F4F8 CALL $A83D    ; Draw the object.
 $F4FB CALL $E329    ; Check for collision detection.
 $F4FE RET           ; Return.

; Movement table : The Super Market
g$F4FF DEFB $F0,$A8,$FE,$00

; Room logic : The Super Market
c$F503 LD A,$FF      ; { Turn off the second platform, active when the trolley
 $F505 LD ($AF80),A  ; is moving. (#R$AF7C) }
 $F508 LD A,$0C      ; { Is flag #N$C (trolley oiled) set?
 $F50A CALL $EC1D    ; }
 $F50D JR Z,$F543    ; Jump forward if it isn't.
 $F50F LD A,$06      ; { Touching a moving object drops endurance by 6.
 $F511 LD ($F26E),A  ; }
; If the trolley is oiled, it needs moving.
 $F514 LD IX,$F4FF   ; Point #REGix at the movement table.
 $F518 LD BC,$F2F7   ; Point #REGde at the bounds table.
 $F51B CALL $EF35    ; Update moving objects.
 $F51E LD A,$36      ; Set the ID to the trolley graphic. (#R$8A38)
 $F520 CALL $A8A0    ; Draw the graphic.
 $F523 CALL $E329    ; Check for collision detection.
; See if we have jumped onto the trolley.
 $F526 LD A,(IY+$0A) ; Get the Y co-ordinate?
 $F529 CP $88        ; Is it #N$88 ie: jumped to the height of the trolley?
 $F52B RET NZ        ; Return if it hasn't.
; The Y co-ordinate is correct, check the X co-ordinate.
 $F52C LD A,(IY+$05) ; Get the current X co-ordinate.
 $F52F SUB (IX-$04)  ; { Is it close enough to the X co-ordinate of the trolley?
 $F532 SUB $04       ;
 $F534 CP $F8        ; }
 $F536 RET C         ; Return if it isn't.
; The character has landed on top of a moving trolley. Switch on a byte in the
; platform table (#R$AF7C) that will treat this as a temporary platform and
; allow them to jump higher.
 $F537 LD A,(IX-$04) ; { Set the X co-ordinate to match that of the trolley.
 $F53A LD (IY+$05),A ; }
 $F53D LD A,$A8      ; { Set the top of the trolley as an active platform. 
 $F53F LD ($AF80),A  ; }
 $F542 RET           ; Return.
; The trolley's not oiled, so just draw it.
*$F543 LD HL,$A8F0   ; { Set the position.
 $F546 LD ($A838),HL ; }
 $F549 LD A,$36      ; Set the ID to the trolley graphic.
 $F54B CALL $A8A0    ; { Draw it and return.
 $F54E RET           ; }

; Room logic : The Cave
;
; If the pipe is not patched and the gas mask is not carried, start
; dropping endurance immediately as the room is full of gas!
c$F54F LD A,($BD7D)  ; { Is the pipe in the room?
 $F552 CP $1D        ; }
 $F554 JR NZ,$F55C   ; Jump forward if it isn't.
 $F556 LD A,$05      ; { Is the pipe patched?
 $F558 CALL $EC1D    ; }
 $F55B RET NZ        ; Return if it is.
; The pipe is not patched. See if the player has the gas mask.
*$F55C LD A,$14      ; { Is the first item carried the gas mask?
 $F55E CP (IY+$50)   ; }
 $F561 RET Z         ; Return if so.
 $F562 CP (IY+$55)   ; { Is the second item carried the gas mask?
 $F565 RET Z         ; }
; The pipe is not patched and the player does not have the gas mask.
; Start dropping endurance as they choke to death - oh dear.
 $F566 LD A,$04      ; { Drop endurance by 6 each frame.
 $F568 LD ($F26E),A  ; }
 $F56B CALL $E33F    ; Mark an immediate collision to drop endurance.
 $F56E JP $ED13      ; Otherwise, the logic is the same as the laboratory.

; The animation state for the water in the Town Square fountain
;
; Cycles between #N$50 - #N$52 / #N$53 - #N$55.
b$F571 DEFB $50

; Room logic : Town Square
;
; Check the fountain's repaired
c$F572 LD A,$08      ; { Is flag 08 (fountain repaired) set?
 $F574 CALL $EC1D    ; }
 $F577 RET Z         ; Return if not.
; The fountain is repaired, so draw it.
; 
; This entry point is used by the routine at #R$813B.
*$F578 LD A,$45      ; { Set bright cyan on black.
 $F57A LD ($F26F),A  ; }
; Draw bottom right.
 $F57D LD HL,$9878   ; { Set the position.
 $F580 LD ($A838),HL ; }
 $F583 LD A,($F571)  ; Get the next object ID of the water.
 $F586 CALL $A83D    ; Draw it.
 $F589 CALL $EF91    ; Set the attributes.
; Draw top right.
 $F58C LD HL,$8868   ; { Set the position.
 $F58F LD ($A838),HL ; }
 $F592 CALL $A83D    ; Draw the water.
 $F595 CALL $EF91    ; Set the attributes.
; Draw bottom left.
 $F598 LD HL,$9818   ; { Set the position.
 $F59B LD ($A838),HL ; }
 $F59E ADD A,$03     ; Add 3 to the object ID to get the water
                     ; facing left instead of right.
 $F5A0 CALL $A83D    ; Draw the water.
 $F5A3 CALL $EF91    ; Set the attributes.
; Draw top left.
 $F5A6 LD HL,$8828   ; { Set the position.
 $F5A9 LD ($A838),HL ; }
 $F5AC CALL $A83D    ; Draw the water.
 $F5AF CALL $EF91    ; Set the attributes.
; Change the graphic used.
 $F5B2 SUB $02       ; Decrement 2 from the object ID.
                     ; ie: subtract 3 to get back to the right facing graphics,
                     ; then add 1 for the next.
 $F5B4 CP $53        ; Is it #N$53?
 $F5B6 JR NZ,$F5BA   ; Jump forward if it isn't.
 $F5B8 LD A,$50      ; Otherwise reset to #N$50.
*$F5BA LD ($F571),A  ; { Set the next ID to use and return.
 $F5BD RET           ; }

; Movement table : School Lane
g$F5BE DEFB $28,$46,$02,$02
 $F5BE DEFB $3C,$78,$FE,$02
 $F5C6 DEFB $20,$64,$02,$FE

; Bounds table : Multiple purpose
b$F5CA DEFB $10,$E0,$40,$A8

; Bounds table 2 : School Lane
b$F5CE DEFB $10,$40,$40,$A8

; Next object ID for the lighting bolts in School Lane
;
; Alternates between #N$38 and #N$3A (#R$8A78)
g$F5D2 DEFB $38

; School Lane electricity wire data
;
; The buffer is defined as the direction in which to move after drawing
; one 8-bit cell of data. A 1 moves drawing up one row, a 0 moves
; it down one row, a 2 leaves it unchanged. #N$FF marks the end of the data.
g$F5D3 DEFB $01,$01,$01,$01,$00,$01,$00,$01
 $F5DB DEFB $00,$01,$00,$01,$00,$00,$00,$00
 $F5E3 DEFB $00,$02,$00,$02,$00,$02,$00,$02
 $F5EB DEFB $00,$02,$02,$02,$02,$FF

; Room logic : School Lane
;
; First, draw the electricity wire.
c$F5F1 LD HL,$5DE7   ; Point #REGhl to the screen buffer. (#R$5B00)
 $F5F4 LD DE,$0020   ; Set #REGde to the amount to move forward by for each row.
 $F5F7 LD BC,$F5D3   ; Set #REGbc to the data table. (#R$F5D3)
*$F5FA LD (HL),$00   ; Reset all pixels on the first row.
 $F5FC ADD HL,DE     ; Move to the next row.
 $F5FD LD (HL),$FF   ; Set all pixels.
 $F5FF ADD HL,DE     ; Move to the next row.
 $F600 LD (HL),$00   ; Set all pixels.
 $F602 AND A         ; { Move back up to the initial row.
 $F603 SBC HL,DE     ;
 $F605 SBC HL,DE     ; }
 $F607 LD A,(BC)     ; Get the next byte.
 $F608 INC BC        ; Move to the next place in the buffer.
 $F609 CP $FF        ; Is it an end marker?
 $F60B JR Z,$F61D    ; Jump foward if it is.
 $F60D OR A          ; Is the data 0?
 $F60E JR Z,$F61A    ; Jump forward if it isn't.
 $F610 CP $01        ; Is the data 1?
 $F612 JR NZ,$F617   ; Jump forward if it is.
 $F614 ADD HL,DE     ; { Otherwise move to the next row.
 $F615 JR $F61A      ; }
*$F617 AND A         ; { Move up a row.
 $F618 SBC HL,DE     ; }
*$F61A INC HL        ; { Move to the next column and repeat.
 $F61B JR $F5FA      ; }
; Now set the main data for the room.
*$F61D LD A,$06      ; { Moving objects decrease endurance by 6.
 $F61F LD ($F26E),A  ; }
 $F622 LD IX,$F5BE   ; Point #REGix at the movement table.
 $F626 LD B,$03      ; 3 lightning bolts to draw.
*$F628 PUSH BC       ; Store #REGbc.
 $F629 LD A,$0D      ; {Is flag #N$D (Asteroids game won) set?
 $F62B CALL $EC1D    ; }
 $F62E LD BC,$F5CA   ; Point #REGbc at the first bounds table. (#R$F5CA)
 $F631 JR NZ,$F636   ; If the flag is set, skip the next bit.
 $F633 LD BC,$F5CE   ; Otherwise point #REGbc at the second bounds table. (#R$F5CE)
*$F636 CALL $EF35    ; Update moving objects.
 $F639 LD A,($F5D2)  ; Get the next object ID to print.
 $F63C XOR $02       ; Invert bit 2, so the ID alternates between #N$38 and #N$3A.
 $F63E LD ($F5D2),A  ; Set this for the next object ID.
 $F641 CALL $A8A0    ; Draw moving objects.
 $F644 CALL $E329    ; Check for collision detection.
 $F647 POP BC        ; Restore #REGbc.
 $F648 DJNZ $F628    ; Loop while there are more lighting bolts to draw.
 $F64A RET           ; Return.

; Table of direction to switch to in The Park
b$F64B DEFB $01,$01 ; Right and down
 $F64D DEFB $FF,$01 ; Left and down
 $F64F DEFB $FF,$FF ; Left and up
 $F651 DEFB $01,$FF ; Right and up

; Movement table : The Park
g$F653 DEFB $28,$46,$01,$01
 $F657 DEFB $05,$04,$C8,$78
 $F65B DEFB $FF,$01,$23,$02
 $F69F DEFB $26,$64,$01,$FF
 $F663 DEFB $26,$00,$C8,$78
 $F668 DEFB $FF,$01,$23,$02
 $F66B DEFB $26,$64,$01,$FF
 $F66F DEFB $26,$00
 
; Next ID to use for moving objects in the park
;
; Alternates between #N$3C and #N$3E (#R$8AF8).
g$F671 DEFB $3C
 
; Set to 1 if a moving object hits its boundary in X and needs to move in the other direction.
;
; Used by the routine in #R$EF35.
g$F672 DEFB $00

; Set to 1 if a moving object hits its boundary in Y and needs to move in the other direction.
;
; Used by the routine in #R$EF35.
g$F673 DEFB $00

; Room logic : The Park
c$F674 LD A,$04      ; { Moving objects decrease endurance by 4.
 $F676 LD ($F26E),A  ; }
 $F679 LD B,$05      ; 5 objects to update.
 $F67B LD IX,$F653   ; Point #REGix at the movement table.
*$F67F PUSH BC       ; Store the count in #REGbc.
 $F680 LD BC,$F5CA   ; Point #REGbc at the bounds table.
 $F683 CALL $EF35    ; Update moving objects.
 $F686 DEC (IX+$00)  ; Decrement the X position.
 $F689 JR NZ,$F6BB   ; Jump forward if it's not zero.
 $F68B LD A,($F673)  ; { Has a bird hit a boundary in X or Y?
 $F68E LD B,A        ;
 $F68F LD A,($F672)  ;
 $F692 OR B          ; }
 $F693 JR NZ,$F6BB   ; Jump forward if they haven't.
; A bird has hit the edge of the screen, move them off in some random direction.
 $F695 LD A,R        ; { Get a random number between #N$14 and #N$53.
 $F697 AND $3F       ;
 $F699 ADD A,$14     ; }
 $F69B LD (IX+$00),A ; Set this as the new x co-ordinate.
 $F69E LD A,(IX+$01) ; { Cycle the y co-ordinate between 0 and 6 in multiples of 2,
 $F6A1 ADD A,$02     ; to give an offset into the table at #R$F653.
 $F6A3 CP $08        ;
 $F6A5 JR NZ,$F6A8   ;
 $F6A7 XOR A         ; }
*$F6A8 LD (IX+$01),A ; Set the new y co-ordinate.
 $F6AB LD E,A        ; { Put the y co-ordinate in #REGde.
 $F6AC LD D,$00      ; } 
 $F6AE LD HL,$F64B   ; { Add the base address of the direction table. (#R$F64B)
 $F6B1 ADD HL,DE     ; }
 $F6B2 LD A,(HL)     ; { Set the new x and y direction changes based on the data found.
 $F6B3 LD (IX-$02),A ;
 $F6B6 INC HL        ;
 $F6B7 LD A,(HL)     ;
 $F6B8 LD (IX-$01),A ; }
; Now draw the bird.
*$F6BB LD A,($F671)  ; Get the object ID to use.
 $F6BE XOR $02       ; { Alternate between #N$3C and #N$3E (#R$8AF8).
 $F6C0 LD ($F671),A  ; for the next iteration. }
 $F6C3 CALL $A8A0    ; Draw the object.
 $F6C6 CALL $E329    ; Check for collision detection
 $F6C9 INC IX        ;
 $F6CB INC IX        ;
 $F6CD POP BC        ; Restore the count in #REGbc.
 $F6CE DJNZ $F67F    ; Loop while there are more objects to draw.
 $F6D0 RET           ; Otherwise return.

; Table containing x position and item number to print for bank letters
;
; Used by the routine in #R$F6EC
b$F6D1 DEFB $40,$13 ; B
 $F6D3 DEFB $60,$1E ; R
 $F6D5 DEFB $80,$1A ; E
 $F6D7 DEFB $A0,$01 ; A
 $F6D9 DEFB $C0,$05 ; K

; Flag set if letters need to be printed in the bank
b$F6DB DEFB $00

; Movement table : The Bank
g$F6DC DEFB $40,$64,$02,$04
 $F6E0 DEFB $B4,$98,$02,$FC
 $F6E4 DEFB $20,$44,$02,$04
 $F6E8 DEFB $C8,$78,$02,$FC

; Room logic : The Bank
c$F6EC LD A,($EDC5)  ; Get the number of letters put in the safe + 1
 $F6EF CP $06        ; Are all letters there?
 $F6F1 JR NZ,$F6FF   ; Jump forward if not.
; If we've got all 5 letters, flash them.
 $F6F3 LD A,($F6DB)  ; { Toggle the display state
 $F6F6 XOR $01       ; between 0 and 1.
 $F6F8 LD ($F6DB),A  ; }
 $F6FB JR Z,$F716    ; If the display state is 0, there's nothing to do here.
 $F6FD LD A,$06      ; Set the number of letters + 1 back to 6.
*$F6FF DEC A         ; Decrement by 1 to get the actual number of letters.
 $F700 JR Z,$F716    ; If there are no letters to draw, then there's
                     ; nothing to do here.
 $F702 LD B,A        ; Put the number of letters to draw in #REGb.
 $F703 LD HL,$F6D1   ; Point #REGhl at the first letter.
 $F706 LD DE,$4800   ; Set the initial position on row #N$48.
*$F709 LD E,(HL)     ; Get the column from the buffer.
 $F70A INC HL        ; Move to the next position in the buffer.
 $F70B LD ($A838),DE ; Set the position for the drawing routine.
 $F70F LD A,(HL)     ; Get the object ID to print.
 $F710 INC HL        ; Move to the next position in the buffer.
 $F711 CALL $A83D    ; Draw the graphic.
 $F714 DJNZ $F709    ; Loop while there are more letters.
*$F716 LD A,($EDC5)  ; Get the number of letters + 1.
 $F719 CP $06        ; Have we got all six.
 $F71B RET Z         ; If so, there's nothing to do here.
; As long as the safe isn't cracked yet, put the moving objects on screen.
 $F71C LD A,$06      ; { Moving objects decrease endurance by 6.
 $F71E LD ($F26E),A  ; }
 $F721 LD IX,$F6DC   ; Point #REGix at the movement table. (#R$F6DC)
 $F725 LD B,$04      ; 4 objects to draw.
*$F727 PUSH BC       ; Remember the object count in #REGbc.
 $F728 LD BC,$F2F7   ; Point #REGde at the bounds table. (#R$F2F7)
 $F72B CALL $EF35    ; Update the next moving object.
 $F72E LD A,$76      ; Set the object ID to the pound symbol.
 $F730 CALL $A8A0    ; Put the object in the sprite buffer.
 $F733 CALL $E329    ; Check for collision detection.
 $F736 POP BC        ; Restore the object count in #REGbc.
 $F737 DJNZ $F727    ; Loop while there are more objects to draw.
 $F739 RET           ; Return.

; Movement table : Wally's House
g$F73A DEFB $34,$40,$00,$02
 $F73E DEFB $74,$6C,$00,$02
 $F742 DEFB $B4,$A0,$00,$02

; Room logic : Wally's House
c$F746 LD A,$08        ; { Moving objects decrease endurance by 8.
 $F748 LD ($F26E),A    ; }
 $F74B LD IX,$F73A     ; Point #REGix at the movement table. (#R$F73A)
 $F74F LD B,$03        ; 3 bulbs to draw.
*$F751 PUSH BC         ; Store #REGbc.
 $F752 LD BC,$F2F7     ; Point #REGbc at the bounds table. (#R$F2F7)
 $F755 CALL $EF35      ; Update moving objects.
 $F758 LD A,(IX-$01)   ; Check the direction of the bulbs.
 $F75B CP $02          ; Is it still +2 ie: hasn't hit bounds?
 $F75D JR Z,$F767      ; Jump forward if it has.
; The bulb has moved to the edge of the boundary. Rather than
; reversing direction as per usual, just reset the co-ordinates.
 $F75F LD (IX-$01),$02 ; Set the amount to change as 2 again.
 $F763 LD (IX-$03),$40 ; Set the Y co-ordinate to #N$40.
; Now draw the lightbulb.
*$F767 LD A,$56        ; Set the ID to be the lightbulb. (#R$8E38)
 $F769 CALL $A83D      ; Draw the object.
 $F76C CALL $E329      ; Check for collision detection.
 $F76F POP BC          ; Restore #REGbc.
 $F770 DJNZ $F751      ; Loop until all the bulbs are updated.
 $F772 RET             ; Return.

; Room logic : The School
c$F773 LD A,$02        ; { Moving objects decrease endurance by 2.
 $F775 LD ($F26E),A    ; }
 $F778 LD A,(IY+$0A)   ; Get the player's Y co-ordinate.
 $F77B CP $98          ; Is the player on the floor?
 $F77D JR NZ,$F78D     ; Jump forward if they're not.
; The player is on the floor.
 $F77F LD A,(IY+$05)   ; Get the X co-ordinate.
 $F782 CP $28          ; Is it greater than #N$28?
 $F784 JR C,$F78D      ; Jump forward if so.
 $F786 CP $E6          ; Is it less than #N$E6?
 $F788 JR NC,$F78D     ; Jump forward if not.
 $F78A CALL $E33F      ; Otherwise, the player is standing on the spikes,
                       ; so decrease endurance.
; Now draw the desks.
*$F78D LD B,$05        ; 5 objects to draw.
 $F78F LD A,($F7DE)    ; Get the next frame ID of the desk.
 $F792 INC A           ; Increment it.
 $F793 CP $5B          ; { If it goes higher than #N$5A,
 $F795 JR NZ,$F799     ; set it back to #N$57.
 $F797 LD A,$57        ; }
*$F799 LD ($F7DE),A    ; Store the next frame ID.
 $F79C LD HL,$F7DF     ; Point #REGhl at the next x co-ordinate to use.
 $F79F LD D,$98        ; Y co-ordinate is always #N$98.
*$F7A1 LD E,(HL)       ; Get the X co-ordinate.
 $F7A2 LD ($A838),DE   ; Set the position to draw. (#R$A838)
 $F7A6 INC HL          ; Move to the next position in the buffer.
 $F7A7 DEC (HL)        ; Decrement the tick counter.
 $F7A8 JR NZ,$F7AC     ; Jump forward if it's not zero.
; The tick counter has run to 0, does a desk need to be flipped?
 $F7AA LD (HL),$28     ; Set the tick count back to #N$28.
*$F7AC LD A,(HL)       ; Put the tick count in #REGa.
 $F7AD INC HL          ; Move to the next position in the buffer.
 $F7AE CP $09          ; Is the counter less than 9?
 $F7B0 JR NC,$F7D6     ; Jump forward if not.
; The desk needs flipping, check if dislodges the player.
 $F7B2 LD A,(IY+$0A)   ; Get the player's y co-ordinate.
 $F7B5 CP $80          ; Is it #N$80? (ie: on a desk)
 $F7B7 JR NZ,$F7D1     ; Jump foward if it isn't.
 $F7B9 LD A,($A838)    ; { Is the player's x co-ordinate
 $F7BC SUB (IY+$05)    ; near this one?
 $F7BF SUB $10         ;
 $F7C1 CP $E0          ; }
 $F7C3 JR C,$F7D1      ; Jump if not.
; The desk opened while the player was on it. Dislodge them.
 $F7C5 LD A,(IY+$0A)   ; { Add 4 to the player's y co-ordinate.
 $F7C8 ADD A,$04       ;
 $F7CA LD (IY+$0A),A   ; }
 $F7CD LD (IY+$37),$01 ; Set the character in mid-air.
*$F7D1 LD A,($F7DE)    ; Get the object ID to draw.
 $F7D4 JR $F7D8        ; Jump forward to draw it.
*$F7D6 LD A,$57        ; Set the object ID as #N$57 - closed desk. (#R$8E58)
*$F7D8 CALL $A83D      ; Draw the object
 $F7DB DJNZ $F7A1      ; Loop while there are more objects to draw.
 $F7DD RET             ; Otherwise return.

; Frame ID of the next moving desk in the school (#N$57 - #N$5A)
;
; Used by the routine in #R$F773.
g$F7DE DEFB $5A

; X co-ordinate to draw the first school desk
;
; Used by the routine in #R$F773.
g$F7DF DEFB $38

; Time until the first school desk flips
b$F7E0 DEFB $29

; X co-ordinate to draw the second school desk
;
; Used by the routine in #R$F773.
g$F7E1 DEFB $60

; Time until the second school desk flips
b$F7E2 DEFB $21

; X co-ordinate to draw the third school desk
;
; Used by the routine in #R$F773.
g$F7E3 DEFB $88

; Time until the third school desk flips
b$F7E4 DEFB $19

; X co-ordinate to draw the fourth school desk
;
; Used by the routine in #R$F773.
g$F7E5 DEFB $B0

; Time until the fourth school desk flips
b$F7E6 DEFB $11

; X co-ordinate to draw the fifth school desk
;
; Used by the routine in #R$F773.
g$F7E7 DEFB $D8

; Time until the fifth school desk flips
b$F7E8 DEFB $09

; The food table.
;
; Used by the routine in #R$F814.
;
; .
;
; Format is:
; #TABLE( center, default)
; { =h Byte | =h Description }
; { 0 | Room ID }
; { 1 | x co-ordinate }
; { 2 | y co-ordinate }
; { 3 | Object ID }
; TABLE#
b$F7E9 DEFB $0E,$90,$A0,$5B
 $F7ED DEFB $0A,$08,$A8,$5C
 $F7F1 DEFB $0F,$F0,$A8,$5E
 $F7F5 DEFB $19,$90,$A0,$5D
 $F7F9 DEFB $17,$20,$90,$5F
 $F7FD DEFB $FF

; Copy of the food table (not used)
u$F7FE DEFB $0F,$F0,$A8,$5E
 $F802 DEFB $19,$90,$A0,$5D
 $F806 DEFB $17,$20,$90,$5F
 $F80A DEFB $0E,$90,$A0,$5B
 $F80E DEFB $0A,$08,$A8,$5C

; Pointer to the next food table entry
g$F812 DEFW $F7E9

; See if any food is in the current room, and display it if so
;
; Used by the routine at #R$81AE.
c$F814 LD HL,($F812) ; Point #REGhl at the next food.
 $F817 LD A,(IY+$0F) ; Get the current room in #REGa.
 $F81A CP (HL)       ; Is the food in this room?
 $F81B JR Z,$F823    ; Jump foward if there is.
 $F81D LD DE,$0015   ; { Point to the second food table.
 $F820 ADD HL,DE     ; }
 $F821 CP (HL)       ; Is the food in this room?
 $F822 RET NZ        ; Return if it isn't - there's no food here.
; There's food in the room, so draw it.
*$F823 INC HL        ; { Put the x co-ordinate in #REGe.
 $F824 LD E,(HL)     ; }
 $F825 INC HL        ; { Put the y co-ordinate in #REGd.
 $F826 LD D,(HL)     ; }
 $F827 INC HL        ; { Put the object number in #REGb.
 $F828 LD A,(HL)     ; 
 $F829 LD B,A        ; }
 $F82A LD ($A838),DE ; Copy the position to the scratch buffer at #R$A838.
 $F82E CALL $A83D    ; Draw the food.
 $F831 LD A,(IY+$05) ; Put the x co-ordinate in #REGa.
 $F834 SUB E         ; { Is it near enough the food?
 $F835 SUB $04       ;
 $F837 CP $F8        ; }
 $F839 RET C         ; Return if not.
 $F83A LD A,(IY+$0A) ; Get the y co-ordinate.
 $F83D SUB D         ; { Is it near enough the food?
 $F83E ADD A,$0C     ;
 $F840 CP $F8        ; }
 $F842 RET C         ;  Return if not.
; There's food here, and the player has picked it up.
 $F843 LD HL,($F812) ; { Move #REGhl to the next food entry.
 $F846 INC HL        ;
 $F847 INC HL        ;
 $F848 INC HL        ;
 $F849 INC HL        ; }
 $F84A LD A,(HL)     ; Is this the end of the list?
 $F84B CP $FF        ; { If so, set it back to the beginning. (#R$F7E9)
 $F84D JR NZ,$F852   ;
 $F84F LD HL,$F7E9   ; }
*$F852 LD ($F812),HL ; Store the next location of food back in memory.
 $F855 LD A,(IY+$19) ; Get the ID of favourite food for this player. (#R$BC80)
 $F858 CP B          ; Does it match the ID of this food?
 $F859 JR Z,$F864    ; If so, jump forward to restore endurance to full strength.
 $F85B LD A,(IY+$14) ; Get the endurance.
 $F85E ADD A,$20     ; { Add #N$20 to a maximum of #N$80.
 $F860 CP $80        ;
 $F862 JR C,$F866    ;
*$F864 LD A,$80      ; }
*$F866 LD (IY+$14),A ; Store this new endurance value.
 $F869 CALL $E36D    ; Update the endurance and lives display.
 $F86C LD BC,$643C   ; { Play a "picked up food" sound effect.
 $F86F LD DE,$0128   ;
 $F872 LD HL,$0103   ;
 $F875 CALL $E3D3    ; }
 $F878 RET           ; Return.

; Initial states of lightning bolts in the "asteroids" game
;
; See documentation for #R$80A9.
b$F879 DEFB $EE,$42,$FE,$02,$38
 $F87E DEFB $EE,$AE,$FE,$FE,$38
 $F883 DEFB $02,$42,$02,$02,$38
 $F888 DEFB $02,$AE,$02,$FE,$38
 $F88D DEFB $78,$42,$00,$02,$38
 $F892 DEFB $78,$AE,$00,$FE,$38
 $F897 DEFB $FF,$00,$00,$00,$00
 $F89C DEFB $FF,$00,$00,$00,$00
 $F8A1 DEFB $FF,$00,$00,$00,$00
 $F8A6 DEFB $FF,$00,$00,$00,$00
 $F8AB DEFB $FF,$00,$00,$00,$00
 $F8B0 DEFB $FF,$00,$00,$00,$00

; Bounds table : Asteroids missile
b$F8B5 DEFB $00,$F0,$40,$B0

; Asteroids : Check for collision with lightning
;
; Used by the routine at #R$EDF7.
c$F8B9 LD IX,$80A9   ; Point #REGix at the movement table.
 $F8BD LD A,$08      ; { Moving objects decrease endurance by 8.
 $F8BF LD ($F26E),A  ; }
 $F8C2 LD B,$0C      ; #N$C entries to check.
*$F8C4 PUSH BC       ; Remember the count in #REGbc.
 $F8C5 LD BC,$F8B5   ; Point #REGbc at the bounds table. (#R$F8B5)
 $F8C8 LD A,(IX+$00) ; 
 $F8CB CP $FF        ; 
 $F8CD JR NZ,$F8D6   ; Jump forward if it isn't.
 $F8CF CALL $EF88    ; { Move to the next entry and return.
 $F8D2 INC IX        ; 
 $F8D4 JR $F936      ; }
; The lightning bolt is active.
*$F8D6 CALL $EF35    ; Update the position.
 $F8D9 LD A,(IX+$00) ; Get the current graphic ID.
 $F8DC CALL $A8A0    ; Put it in the sprite buffer.
 $F8DF INC IX        ; Move to the next position in the table.
 $F8E1 LD A,(IY+$05) ; Get the player's x co-ordinate.
 $F8E4 SUB (IX-$05)  ; { Is it close enough to the lightning?
 $F8E7 SUB $08       ;
 $F8E9 CP $F0        ; }
 $F8EB JR C,$F8FA    ; Jump forward if it isn't.
 $F8ED LD A,(IY+$0A) ; Get the player's y co-ordinate.
 $F8F0 SUB (IX-$04)  ; { Is it close enough to the lightning?
 $F8F3 SUB $08       ;
 $F8F5 CP $F0        ; }
 $F8F7 CALL NC,$E33F ; If it is, the player has hit the lightning, so decrease endurance.
*$F8FA LD A,($F672)  ; { Has the missile hit a boundary in X?
 $F8FD OR A          ; }
 $F8FE JR Z,$F918    ; Jump forward if it hasn't.
; If the missile hits a boundary, the usual logic for moving objects needs changing.
; Instead of reversing direction, move to the other end of the screen, and keep the existing
; direction.
 $F900 LD A,(IX-$05) ; { If the position is #N$F0, set it to #N$02.
 $F903 CP $F0        ; Otherwise, it must be 0, so set it to #N$EE.
 $F905 JR Z,$F90B    ;
 $F907 LD A,$EE      ;
 $F909 JR $F90D      ;
*$F90B LD A,$02      ; }
*$F90D LD (IX-$05),A ; Set the new x co-ordinate.
 $F910 LD A,(IX-$03) ; { Restore the sign of the direction, that was changed in
 $F913 NEG           ; the previous call to #R$EF35.
 $F915 LD (IX-$03),A ; }
*$F918 LD A,($F673)  ; { Has the missile hit a boundary in Y?
 $F91B OR A          ; }
 $F91C JR Z,$F936    ; Jump forward if it hasn't.
; Update the boundary logic as earlier.
 $F91E LD A,(IX-$04) ; { If the position is #N$40, set it to #N$AE.
 $F921 CP $40        ; Otherwise it must be #N$B0, so set it to #N$42.
 $F923 JR NZ,$F929   ;
 $F925 LD A,$AE      ;
 $F927 JR $F92B      ;
*$F929 LD A,$42      ; }
*$F92B LD (IX-$04),A ; Set the new y co-ordinate.
 $F92E LD A,(IX-$02) ; { Restore the sign of the direction, that was changed in
 $F931 NEG           ; the previous call to #R$EF35.
 $F933 LD (IX-$02),A ; }
*$F936 POP BC        ; Restore the count in #REGbc.
 $F937 DJNZ $F8C4    ; Loop while there is more lightning to draw.
 $F939 RET           ; Otherwise return.

; Asteroids : Check for player's movement
;
; Used by the routine at #R$EDF7.
c$F93A CALL $B03C      ; { Was 'left' pressed?
 $F93D OR A            ; }
 $F93E JR Z,$F94E      ; Jump forward if it wasn't.
; 'left' was pressed, so rotate anticlockwise.
 $F940 DEC (IY+$00)    ; Decrement the graphic used for the player.
 $F943 LD A,(IY+$00)   ; { If it's now #N$6D, past the end of usable sprites,
 $F946 CP $6D          ; set it to the maximum of #N$75.
 $F948 JR NZ,$F94E     ;
 $F94A LD (IY+$00),$75 ; }
*$F94E CALL $B00B      ; { Was 'right' pressed?
 $F951 OR A            ; }
 $F952 JR Z,$F962      ; Jump forward if it wasn't.
; 'right' was pressed, so rotate clockwise.
 $F954 INC (IY+$00)    ; Increment the graphic used for the player.
 $F957 LD A,(IY+$00)   ; { If it's now #N$75, past the end of usable sprites,
 $F95A CP $76          ; set it to the minimum of #N$6E.
 $F95C JR NZ,$F962     ;
 $F95E LD (IY+$00),$6E ; }
*$F962 CALL $ABD7      ; { Was 'in' pressed?
 $F965 OR A            ; }
 $F966 JR Z,$F994      ; Jump forward if it wasn't.
; 'in' was pressed, so move forward.
 $F968 CALL $F9A4      ; Put the change in co-ordinates in #REGhl.
 $F96B LD A,(IY+$05)   ; Get the x co-ordinate.
 $F96E ADD A,(HL)      ; Add the offset (may be negative).
 $F96F JR NZ,$F975     ; { If the x co-ordinate is 0, wrap around to #N$EE.
 $F971 LD A,$EE        ;
 $F973 JR $F97B        ; }
*$F975 CP $F0          ; { If the x co-ordinate is #N$F0, wrap around to #N$02.
 $F977 JR NZ,$F97B     ;
 $F979 LD A,$02        ; }
*$F97B LD (IY+$05),A   ; Set the new x co-ordinate.
 $F97E INC HL          ; Move to the next position in the table.
 $F97F LD A,(IY+$0A)   ; Get the y co-ordinate
 $F982 ADD A,(HL)      ; Add the offset (may be negative).
 $F983 CP $40          ; { If the y co-ordinate is #N$40, wrap around to #N$AC.
 $F985 JR NZ,$F98B     ;
 $F987 LD A,$AC        ;
 $F989 JR $F991        ; }
*$F98B CP $AE          ; { If the y co-ordinate is #N$AE, wrap around to #N$42.
 $F98D JR NZ,$F991     ;
 $F98F LD A,$42        ; }
*$F991 LD (IY+$0A),A   ; Set the new y co-ordinate.
*$F994 LD L,(IY+$05)   ; { Set the co-ordinates as the location to draw. (#R$A838)
 $F997 LD H,(IY+$0A)   ;
 $F99A LD ($A838),HL   ; }
 $F99D LD A,(IY+$00)   ; Use the current sprite ID for the player.
 $F9A0 CALL $A83D      ; { Draw it and return.
 $F9A3 RET             ; }

; Asteroids : Get the change values for the current direction
;
; Used by the routines at #R$F93A and #R$F9F5.
;
; HL On exit, points to data containing a change in x and y co-ordinates
c$F9A4 LD A,(IY+$00) ; Get the current sprite.
 $F9A7 SUB $6E       ; Subtract #N$6E to get an offset between 0 and 8.
 $F9A9 ADD A,A       ; Double this to get a word offset.
 $F9AA LD E,A        ; { Put this in #REGde.
 $F9AB LD D,$00      ; }
 $F9AD LD HL,$F9B2   ; { Add the base address of the direction table. (#R$F9B2)
 $F9B0 ADD HL,DE     ; and return.
 $F9B1 RET           ; }

; Asteroids : Direction to move in
;
; Each entry contains the change in x and y co-ordinate depending on which
; way the player is facing.
b$F9B2 DEFB $00,$FE     ; 0
 $F9B4 DEFB $02,$FE     ; 1
 $F9B6 DEFB $02,$00     ; 2
 $F9B8 DEFB $02,$02     ; 3
 $F9BA DEFB $00,$02     ; 4
 $F9BC DEFB $FE,$02     ; 5
 $F9BE DEFB $FE,$00     ; 6
 $F9C0 DEFB $FE,$FE     ; 7

; Asteroids : Current pointer to data for "hit lightning" sound
;
; Used by the routine at #R$F9C4.
g$F9C2 DEFBW $8000      ; 

; Asteroids : Generate a "hit lightning" sound
;
; Used by the routine at #R$F9F5.
;
; .
;
; The routine takes random bytes from #N$8000 - #N$9BFF and uses
; them as pairs of lengths to keep the speaker on or off,
; effectively determine the frequency and wave type.
c$F9C4 PUSH AF       ; { Store #REGaf, #REGbc and #REGhl.
 $F9C5 PUSH BC       ;
 $F9C6 PUSH HL       ; }
 $F9C7 LD HL,($F9C2) ; Get the current pointer to sound data.
 $F9CA LD B,$19      ; Loop #N$19 times.
*$F9CC PUSH BC       ; Remember the count in #REGbc.
 $F9CD LD B,(HL)     ; Get the current frequency.
 $F9CE INC HL        ; Move to the next position in the buffer.
 $F9CF LD A,$10      ; { Turn the speaker on.
 $F9D1 OUT ($FE),A   ; }
 $F9D3 PUSH BC       ; Remember the frequency count.
*$F9D4 DJNZ $F9D4    ; Loop to keep the speaker on for this time.
 $F9D6 POP BC        ; Restore the count.
 $F9D7 LD B,(HL)     ; Get the next frequency count.
 $F9D8 INC HL        ; Move to the next place in the buffer.
 $F9D9 LD A,$00      ; { Turn the speaker off.
 $F9DB OUT ($FE),A   ; }
*$F9DD DJNZ $F9DD    ; Loop to keep the speaker off for this time.
 $F9DF POP BC        ; Restore the count in #REGbc.
 $F9E0 DJNZ $F9CC    ; Loop while there is more to do.
 $F9E2 LD A,H        ; { If #REGhl reaches #N$9c, set it back to #N$80.
 $F9E3 CP $9C        ;
 $F9E5 JR NZ,$F9E9   ;
 $F9E7 LD H,$80      ;
*$F9E9 LD ($F9C2),HL ; }
 $F9EC POP HL        ; { Restore registers pushed earlier and return.
 $F9ED POP BC        ;
 $F9EE POP AF        ;
 $F9EF RET           ; }

; Asteroids : X co-ordinate of missile, or #N$FF in inactive.
g$F9F0 DEFB $FF

; Asteroids : Y co-ordinate of missile.
g$F9F1 DEFB $FF

; Asteroids : Change in X for the missile
g$F9F2 DEFB $00

; Asteroids : Change in Y for the missile
g$F9F3 DEFB $00

; Number of asteroids left to hit to win the game (starts at 14)
b$F9F4 DEFB $14

; Asteroids : Check for firing missile and animate accordingly
;
; Used by the routine at #R$EDF7.
c$F9F5 LD IX,$F9F0     ; Point #REGix at the missile data.
 $F9F9 LD A,(IX+$00)   ; { Is a missile firing?
 $F9FC CP $FF          ; }
 $F9FE JR NZ,$FA2A     ; Jump forward if it is.
 $FA00 CALL $B06D      ; { Was 'fire' pressed?
 $FA03 OR A            ; }
 $FA04 RET Z           ; Return if it wasn't.
; 'Fire' was pressed.
 $FA05 LD A,(IY+$05)   ; Get the x co-ordinate.
 $FA08 LD ($F9F0),A    ; Set this as the x co-ordinate of the missile.
 $FA0B LD A,(IY+$0A)   ; Get the y co-ordinate.
 $FA0E LD ($F9F1),A    ; Set this as the y co-ordinate of the missile.
 $FA11 CALL $F9A4      ; Get the change values for the current direction.
 $FA14 LD A,(HL)       ; Get the change in x.
 $FA15 LD ($F9F2),A    ; Set this for the missile.
 $FA18 INC HL          ; Move to the next position in the table.
 $FA19 LD A,(HL)       ; Get the change in y.
 $FA1A LD ($F9F3),A    ; Set this for the missile.
 $FA1D LD BC,$FF0A     ; { Play a "fire a missile" round.
 $FA20 LD DE,$0114     ;
 $FA23 LD HL,$1401     ;
 $FA26 CALL $E3D3      ; }
 $FA29 RET             ; Return.
; A missile is in mid-fire, work out what to do with it.
*$FA2A LD BC,$F8B5     ; Point #REGbc at the bounds table. (#R$F8B5)
 $FA2D CALL $EF35      ; Update the missile's position.
 $FA30 LD A,$6D        ; Use the ID of the missle. (#R$9118)
 $FA32 CALL $A83D      ; Draw it.
 $FA35 LD A,($F672)    ; { Is the change in X and Y both 0?
 $FA38 LD B,A          ;
 $FA39 LD A,($F673)    ;
 $FA3C OR B            ; }
 $FA3D JR Z,$FA44      ; Jump forward if it is.
 $FA3F LD (IX-$04),$FF ; Signal that the missile is firing and return.
 $FA43 RET             ;
; The missile is moving.
*$FA44 LD B,$0C        ;
 $FA46 LD HL,$80A9     ; Point #REGhl at the lightning bolt position table. (#R$80A9)
*$FA49 LD A,(HL)       ; { Is the next lighting bolt inactive?
 $FA4A CP $FF          ; }
 $FA4C JR NZ,$FA56     ; Jump forward if it isn't.
*$FA4E INC HL          ; { Otherwise move to the next entry.
 $FA4F INC HL          ;
 $FA50 INC HL          ;
 $FA51 INC HL          ;
 $FA52 INC HL          ; }
 $FA53 DJNZ $FA49      ; Loop while there are still more lightning bolts to look at.
 $FA55 RET             ; Otherwise return.
; There is active lightning, did the missile hit it?
*$FA56 LD E,A          ; Put the lightning's x co-ordinate in #REGe.
 $FA57 SUB (IX-$04)    ; { Is it close enough to the missile?
 $FA5A SUB $08         ;
 $FA5C CP $F0          ; }
 $FA5E JR C,$FA4E      ; If not, jump back to check the next lightning.
 $FA60 INC HL          ; Move to the next position in the buffer.
 $FA61 LD A,(HL)       ; { Put the lightning's y co-ordinate  in #REGd.
 $FA62 LD D,A          ; } 
 $FA63 DEC HL          ; Move back to the previous position in the buffer.
 $FA64 SUB (IX-$03)    ; { Is the y co-ordinate close enough to the missile?
 $FA67 SUB $08         ;
 $FA69 CP $F0          ; }
 $FA6B JR C,$FA4E      ; Jump back if it isn't.
; The missile has hit some lightning.
 $FA6D LD A,$FF        ; { Signal there is no lightning here.
 $FA6F LD (HL),A       ; }
 $FA70 LD ($F9F0),A    ; Signal that the missile is no longer active.
 $FA73 INC HL          ; { Move to the next place in the buffer.
 $FA74 INC HL          ;
 $FA75 INC HL          ;
 $FA76 INC HL          ; }
 $FA77 LD A,(HL)       ; Get the object ID for the lightning.
 $FA78 CP $6B          ; Is it #N$6B? (small lightning)
 $FA7A JR Z,$FA86      ; Jump forward if it is.
 $FA7C LD A,$6B        ; Set the UDG to a small lightning bolt. (#R$90D8)
 $FA7E CALL $FAF0      ; { Move the lightning bolts around.
 $FA81 CALL $FAF0      ; }
 $FA84 JR $FAE3        ; Jump forward to play the sound effect and return.
; The missile hit some small lightning.
*$FA86 LD A,($FAEF)    ; { Flip the "regenerate lightning" bit.
 $FA89 XOR $01         ;
 $FA8B LD ($FAEF),A    ; }
 $FA8E JR NZ,$FAE3     ; Skip the next bit of code if the bit is set.
 $FA90 LD DE,$42EE     ; { Get bit 1 of #REGr, to generate a random flag,
 $FA93 LD A,R          ; that determines the lightning comes in at the top
 $FA95 AND $01         ; right or the bottom left.
 $FA97 JR NZ,$FA9C     ;
 $FA99 LD DE,$AE02     ; }
*$FA9C LD A,$38        ; Set the UDG to a big lightning bolt. (#R$8A78)
 $FA9E CALL $FAF0      ; Move the lightning bolts around.
 $FAA1 LD HL,$F9F4     ; Point #REGhl at the number of asteroids left to hit. (#R$F9F4)
 $FAA4 LD A,(HL)       ; { Have we destroyed all of them already?
 $FAA5 OR A            ; }
 $FAA6 JR Z,$FAE3      ; Jump forward if we have.
 $FAA8 DEC (HL)        ; Otherwise decrement the count of asteroids left to hit.
 $FAA9 JR NZ,$FAE3     ; Jump forward if the count is not zero.
; The player has destroyed enough asteroids to win the sub-game.
 $FAAB LD A,$01        ; { Set the asteroids game as completed.
 $FAAD LD ($EC1C),A    ; }
 $FAB0 LD ($ECB3),A    ; Set the task completed. (#R$EC5C)
 $FAB3 LD A,(IY-$1E)   ; { Earn the player £100.
 $FAB6 ADD A,$01       ;
 $FAB8 DAA             ;
 $FAB9 LD (IY-$1E),A   ; }
 $FABC LD A,($ECFE)    ; { Add £100 to the grand total.
 $FABF ADD A,$01       ;
 $FAC1 DAA             ;
 $FAC2 LD ($ECFE),A    ; }
; Play the "completed" sound effect.
 $FAC5 LD BC,$BE32     ; { Set the parameters for the first sound.
 $FAC8 LD HL,$0000     ;
 $FACB LD DE,$0A0A     ; }
 $FACE CALL $FAE7      ; Play it.
 $FAD1 LD BC,$9664     ; Set the parameters for the second sound.
 $FAD4 CALL $FAE7      ; Play it.
 $FAD7 LD BC,$A532     ; Set the parameters for the third sound.
 $FADA CALL $FAE7      ; Play it.
 $FADD LD BC,$7D78     ; Set the parameter for the fourth sound.
 $FAE0 CALL $FAE7      ; Play it.
; This code is a common entry point if lightining was hit.
*$FAE3 CALL $F9C4      ; { Play the "hit lighting" sound effect and return.
 $FAE6 RET             ; }

; Asteroids : Play a note of the "won" sound effect
;
; Used by the routine at #R$F9F5.
c$FAE7 PUSH HL       ; { Store #REGhl and #REGde.
 $FAE8 PUSH DE       ; }
 $FAE9 CALL $E3D3    ; Play the sound effect.
 $FAEC POP DE        ; { Restore #REGde and #REGhl, and return.
 $FAED POP HL        ; 
 $FAEE RET           ; }

; Asteroids : Flag to indicate new lightning bolts should be created
;
; Alternates between 0 and 1. If reset, a new lightning bolt can be created
; if a small bolt is destroyed.
g$FAEF DEFB $00

; Asteroids : Move the lightning bolts around
;
; Used by the routine at #R$F9F5.
;
; A Object ID to use
c$FAF0 PUSH IX       ; Store #REGix.
 $FAF2 LD IX,$80A9   ; Point #REGix at the lightning bolts table. (#R$80A9)
 $FAF6 PUSH AF       ; Store #REGaf.
*$FAF7 LD A,(IX+$00) ; { Is the lightning bolt here active?
 $FAFA CP $FF        ; }
 $FAFC JR Z,$FB05    ; Jump forward if it isn't.
 $FAFE CALL $EF88    ; { Otherwise move to the next entry.
 $FB01 INC IX        ; 
 $FB03 JR $FAF7      ; }
; Create a lightning bolt here and set it moving in a random direction.
*$FB05 LD (IX+$00),E ; Put the x co-ordinate in #REGe.
 $FB08 LD (IX+$01),D ; Put the y co-ordinate in #REGd.
 $FB0B LD A,R        ; Copy #REGr to #REGa to get a pseudo-random number.
 $FB0D AND $02       ; { Select bit 2 and subtract that value, giving a random number
 $FB0F DEC A         ; that's 0 or #N$FE. }
 $FB10 ADD A,A       ; Double the value.
 $FB11 LD (IX+$02),A ; Set that as the next change in direction.
 $FB14 LD A,R        ; Copy #REGr to #REGa to get a pseudo-random number.
 $FB16 AND $02       ; { Select bit 2 and shift right, giving a random number
 $FB18 RRA           ; that's 0 or 1. }
 $FB19 LD C,A        ; Store this value in #REGc.
 $FB1A LD A,R        ; Copy #REGr to #REGa to get a pseudo-random number.
 $FB1C AND $01       ; Select bit 1.
 $FB1E SUB C         ; Subtract #REGc, giving a random number that's 1, 0 or #N$FF.
 $FB1F ADD A,A       ; Double this (giving 2, 0 or #N$FE).
 $FB20 LD (IX+$03),A ; Set this as the Y offset
 $FB23 POP AF        ; Restore #REGaf.
 $FB24 LD (IX+$04),A ; Set the object ID.
 $FB27 POP IX        ; { Restore #REGix and return.
 $FB29 RET           ; }

; Spare space for the stack
s$FB2A DEFS $D6

; Copy of attribute buffer for sprites
;
; The data is written to the screen by the routine at #R$B9FB.
; It is initialised as a copy of the main screen at #R$5B00
; by the routine at #R$EEA2. 
; Sprites are then drawn on top by the routine at #R$A83D.
g$FC00 DEFS $200
 
; Copy of attribute buffer for main play area
;
; The buffer is initialised by the routine at #R$B9AC
; when all the background graphics are drawn.
g$FE00 DEFS $200